From 651b0d8489b2ce49cf1b965128c90255e310d62d Mon Sep 17 00:00:00 2001
From: d0rbu <hacperu2010@gmail.com>
Date: Thu, 24 Jul 2025 10:22:28 -0500
Subject: [PATCH 01/12] implement summarize and suggested response

---
 crates/goose-cli/src/notifier/intelligence.rs | 82 +++++++++++++++----
 crates/goose-cli/src/notifier/mod.rs          | 45 +++++-----
 crates/goose-cli/src/session/mod.rs           | 10 ++-
 3 files changed, 97 insertions(+), 40 deletions(-)

diff --git a/crates/goose-cli/src/notifier/intelligence.rs b/crates/goose-cli/src/notifier/intelligence.rs
index 6f6caac20a..c1b166f20c 100644
--- a/crates/goose-cli/src/notifier/intelligence.rs
+++ b/crates/goose-cli/src/notifier/intelligence.rs
@@ -18,6 +18,50 @@ use tokio::fs;
 #[cfg(feature = "notifications")]
 use rmcp::model::Role;
 
+// Embedded prompt templates for portability
+#[cfg(feature = "notifications")]
+const NOTIFICATION_SUMMARY_TEMPLATE: &str = r#"
+You are helping to generate a concise notification summary for a user who is away from their computer.
+
+Based on the following conversation context, create a brief summary of what the AI assistant (Goose) is currently waiting for from the user.
+
+## Conversation Context:
+{{ messages }}
+
+## Wait Type: 
+{{ wait_type }}
+
+## Instructions:
+- Keep the summary under 100 words
+- Be specific about what action or input is needed
+- Use clear, natural language
+- Focus on what the user needs to do next
+
+Generate a clear, actionable summary:
+"#;
+
+#[cfg(feature = "notifications")]
+const NOTIFICATION_RESPONSE_TEMPLATE: &str = r#"
+You are helping to generate a suggested response for a user who received a notification about their AI assistant.
+
+## Context Summary:
+{{ summary }}
+
+## Conversation Context:
+{{ messages }}
+
+## Wait Type:
+{{ wait_type }}
+
+## Instructions:
+- Generate a helpful response the user could send to continue the conversation
+- Keep it under 50 words
+- Be specific and actionable
+- Use natural language as if the user is typing it
+
+Generate a suggested response:
+"#;
+
 /// Types of wait states
 #[derive(Debug, Clone, PartialEq)]
 pub enum WaitType {
@@ -90,12 +134,9 @@ impl NotificationIntelligence {
     }
 
     /// Generate context for a specific wait type
-    pub async fn generate_context(&self, _messages: &[Message], wait_type: &WaitType) -> Result<NotificationContext, anyhow::Error> {
-        // Stub implementation: just return a default summary
-        Ok(NotificationContext {
-            wait_type: wait_type.clone(),
-            summary: "(stub summary)".to_string(),
-        })
+    pub async fn generate_context(&self, messages: &[Message], wait_type: &WaitType) -> Result<NotificationContext, anyhow::Error> {
+        // Use the full analyze_context implementation for real intelligence
+        self.analyze_context(messages).await
     }
 
     /// Detect what type of input Goose is waiting for
@@ -103,7 +144,7 @@ impl NotificationIntelligence {
         if let Some(last_message) = messages.last() {
             let content = last_message.content.iter().find_map(|c| {
                 if let MessageContent::Text(text) = c {
-                    Some(text.raw.text.to_lowercase())
+                    Some(text.text.to_lowercase())
                 } else {
                     None
                 }
@@ -149,7 +190,7 @@ impl NotificationIntelligence {
 
         Ok(response.0.content.iter().find_map(|c| {
             if let goose::message::MessageContent::Text(text) = c {
-                Some(text.raw.text.trim().to_string())
+                Some(text.text.trim().to_string())
             } else {
                 None
             }
@@ -186,7 +227,7 @@ impl NotificationIntelligence {
 
         Ok(response.0.content.iter().find_map(|c| {
             if let goose::message::MessageContent::Text(text) = c {
-                Some(text.raw.text.trim().to_string())
+                Some(text.text.trim().to_string())
             } else {
                 None
             }
@@ -198,7 +239,7 @@ impl NotificationIntelligence {
         let context_hint = if let Some(last_msg) = messages.last() {
             last_msg.content.iter().find_map(|c| {
                 if let MessageContent::Text(text) = c {
-                    text.raw.text.lines().next().map(|l| l.trim())
+                    text.text.lines().next().map(|l| l.trim())
                 } else {
                     None
                 }
@@ -225,12 +266,19 @@ impl NotificationIntelligence {
         }
     }
 
-    /// Load a prompt template
+    /// Load a prompt template (now using embedded templates for portability)
     async fn load_template(&self, filename: &str) -> Result<String> {
-        let path = self.prompts_dir.join(filename);
-        fs::read_to_string(&path)
-            .await
-            .map_err(|e| anyhow!("Failed to load template {}: {}", path.display(), e))
+        match filename {
+            "notification_summary.md" => Ok(NOTIFICATION_SUMMARY_TEMPLATE.to_string()),
+            "notification_response.md" => Ok(NOTIFICATION_RESPONSE_TEMPLATE.to_string()),
+            _ => {
+                // Fallback to filesystem if template not embedded
+                let path = self.prompts_dir.join(filename);
+                fs::read_to_string(&path)
+                    .await
+                    .map_err(|e| anyhow!("Failed to load template {}: {}", path.display(), e))
+            }
+        }
     }
 
     /// Format messages for prompt context
@@ -242,11 +290,11 @@ impl NotificationIntelligence {
                 let role = if msg.role == Role::User { "User" } else { "Assistant" };
                 msg.content.iter().find_map(|c| {
                     if let MessageContent::Text(text) = c {
-                        Some(format!("{}: {}", role, text.raw.text))
+                        Some(format!("{}: {}", role, text.text))
                     } else {
                         None
                     }
-                }).unwrap_or_else(|| format!("{}: ...", role))
+                }).unwrap_or_else(|| format!("{}: [non-text content]", role))
             })
             .collect::<Vec<_>>()
             .join("\n")
diff --git a/crates/goose-cli/src/notifier/mod.rs b/crates/goose-cli/src/notifier/mod.rs
index 841887dab7..ee9d37db31 100644
--- a/crates/goose-cli/src/notifier/mod.rs
+++ b/crates/goose-cli/src/notifier/mod.rs
@@ -81,11 +81,17 @@ pub struct NotificationConfig {
 
 impl Default for NotificationConfig {
     fn default() -> Self {
+        // Use user's home directory for optional custom prompts
+        let home_dir = std::env::var("HOME")
+            .or_else(|_| std::env::var("USERPROFILE"))
+            .unwrap_or_else(|_| ".".to_string());
+        let prompts_dir = PathBuf::from(home_dir).join(".goose-notifier-prompts");
+        
         Self {
             ping_timeout: 300, // 5 minutes
             fallback_timeout: 300, // Additional 5 minutes
             enabled: false,
-            prompts_dir: PathBuf::from("crates/goose-cli/prompts"),
+            prompts_dir,
         }
     }
 }
@@ -187,24 +193,8 @@ impl Notifier {
             }
         }
 
-        // Check prompts directory
-        let prompts_dir = std::env::var("GOOSE_PROMPTS_DIR")
-            .unwrap_or_else(|_| "crates/goose-cli/prompts".to_string());
-
-        if !std::path::Path::new(&prompts_dir).exists() {
-            issues.push(format!("Prompts directory not found: {}", prompts_dir));
-        } else {
-            // Check for required prompt files
-            let summary_prompt = std::path::Path::new(&prompts_dir).join("notification_summary.md");
-            let response_prompt = std::path::Path::new(&prompts_dir).join("notification_response.md");
-
-            if !summary_prompt.exists() {
-                issues.push(format!("Missing prompt template: {}", summary_prompt.display()));
-            }
-            if !response_prompt.exists() {
-                issues.push(format!("Missing prompt template: {}", response_prompt.display()));
-            }
-        }
+        // Prompts are now embedded in the binary, so no filesystem validation needed
+        // External prompts directory is optional and only used for custom templates
 
         if !issues.is_empty() {
             return Err(anyhow!("Notification configuration issues:\n{}",
@@ -420,9 +410,22 @@ impl Notifier {
                             if !first_notification_sent && elapsed >= Duration::from_secs(adapted_timeout) {
 
                                 // Send first notification
+                                #[cfg(feature = "notifications")]
+                                let fallback_preview = if let Some(intelligence) = &notifier.intelligence {
+                                    match intelligence.generate_fallback_response(&context).await {
+                                        Ok(response) => Some(response),
+                                        Err(_) => None,
+                                    }
+                                } else {
+                                    None
+                                };
+                                
+                                #[cfg(not(feature = "notifications"))]
+                                let fallback_preview = None;
+
                                 let notification = RichNotification {
                                     summary: context.summary.clone(),
-                                    fallback_preview: Some(context.summary.clone()),
+                                    fallback_preview,
                                     wait_type: context.wait_type.clone(),
                                 };
 
@@ -483,7 +486,7 @@ impl Notifier {
                         // Mark that we received user input via notification
                         notifier.mark_user_input_received().await;
 
-                        println!("[{}] {}", console::style(reply.provider).cyan().bold(), reply.message);
+                        println!("{} {}", console::style(format!("[{}]", &reply.provider)).cyan().bold(), &reply.message);
 
                         // Process the reply
                         if let Err(e) = notifier.process_notification_reply(reply).await {
diff --git a/crates/goose-cli/src/session/mod.rs b/crates/goose-cli/src/session/mod.rs
index 5cdb770eec..600cac7dc1 100644
--- a/crates/goose-cli/src/session/mod.rs
+++ b/crates/goose-cli/src/session/mod.rs
@@ -1799,10 +1799,16 @@ impl Session {
             .and_then(|v| v.parse::<u64>().ok())
             .unwrap_or(300); // Default 5 minutes
         
-        // Get prompts directory
+        // Get prompts directory (using embedded prompts by default)
         let prompts_dir = std::env::var("GOOSE_PROMPTS_DIR")
             .map(PathBuf::from)
-            .unwrap_or_else(|_| PathBuf::from("crates/goose-cli/prompts"));
+            .unwrap_or_else(|_| {
+                // Use user's home directory for optional custom prompts
+                let home_dir = std::env::var("HOME")
+                    .or_else(|_| std::env::var("USERPROFILE"))
+                    .unwrap_or_else(|_| ".".to_string());
+                PathBuf::from(home_dir).join(".goose-notifier-prompts")
+            });
         
         // Create notifier configuration
         let config = NotificationConfig {
-- 
2.34.1


From c9290796f5f57cc5738991cb2b2397f2a747fbb8 Mon Sep 17 00:00:00 2001
From: Angie Jones <jones.angie@gmail.com>
Date: Thu, 24 Jul 2025 10:34:46 -0500
Subject: [PATCH 02/12] grant program (#3630)

---
 documentation/docusaurus.config.ts            |  10 +-
 documentation/src/css/custom.css              |  16 +++
 documentation/src/pages/grants.md             | 114 ++++++++++++++++++
 .../static/img/goose-grant-program.png        | Bin 0 -> 182172 bytes
 4 files changed, 139 insertions(+), 1 deletion(-)
 create mode 100644 documentation/src/pages/grants.md
 create mode 100644 documentation/static/img/goose-grant-program.png

diff --git a/documentation/docusaurus.config.ts b/documentation/docusaurus.config.ts
index a0fad1a5c8..b0eeff6f78 100644
--- a/documentation/docusaurus.config.ts
+++ b/documentation/docusaurus.config.ts
@@ -14,7 +14,7 @@ const inkeepOrgId = process.env.INKEEP_ORG_ID;
 const config: Config = {
   title: "codename goose",
   tagline:
-    "Your local AI agent, automating engineering tasks seamlessly.",
+    "your local AI agent, automating engineering tasks seamlessly.",
   favicon: "img/favicon.ico",
 
   // Set the production url of your site here
@@ -448,6 +448,14 @@ const config: Config = {
         quickQuestions: ["What is Goose?"],
       },
     },
+    announcementBar: {
+      id: 'goose-grants',
+      content:
+        '✨ goose grant program now open: <a href="grants">apply now</a>! ✨',
+      backgroundColor: '#20232a',
+      textColor: '#fff',
+      isCloseable: false,
+    },
   } satisfies Preset.ThemeConfig,
 };
 
diff --git a/documentation/src/css/custom.css b/documentation/src/css/custom.css
index b43a493ecc..436711eab8 100644
--- a/documentation/src/css/custom.css
+++ b/documentation/src/css/custom.css
@@ -400,3 +400,19 @@ html[data-theme="light"] .hide-in-light {
   object-fit: cover; /* Ensure the image covers the area while maintaining aspect ratio */
   border-radius: 8px; /* Optional: rounded corners */
 }
+
+.button-grant {
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  justify-content: center;
+  padding: 16px;
+  font-weight: bold;
+  text-decoration: none;
+  cursor: default;
+}
+
+
+.button-grant h2 {
+  margin-top: 15px;
+}
diff --git a/documentation/src/pages/grants.md b/documentation/src/pages/grants.md
new file mode 100644
index 0000000000..5b4176b7f6
--- /dev/null
+++ b/documentation/src/pages/grants.md
@@ -0,0 +1,114 @@
+---
+title: goose grant program
+description: $100K grants for open source devs building the future of agentic AI.
+---
+
+import Link from "@docusaurus/Link";
+import { Button } from "@site/src/components/ui/button";
+
+![](/img/goose-grant-program.png)
+
+# goose grant program
+
+We’ve created a grant program to accelerate goose in the open source community. If you believe in a future where agentic AI is open and accessible to all, we invite you to help us shape that future.
+
+<Link to="https://forms.gle/psHBhj8xFY8q1nHP7" target="_blank" rel="noopener noreferrer">
+    ##  → apply for a goose grant
+</Link>
+
+<br/>
+  <Link className="button button--primary button-grant">
+    ## what makes a good proposal
+  </Link>
+<br/>
+
+We're looking for clear, compelling, and ambitious ideas that align with goose’s values: openness, modularity, and user empowerment.
+
+We'd love to see proposals that explore novel ways of interacting with AI agents. Here are just a few examples:
+
+- **New interaction paradigms:** interact with goose through sketches (white boarding!), camera, voice interactions that pay attention to emotions or other multi-modal interactions
+- **Self-flying:** increase autonomy by adding a long-running background mode, experimenting with new intermediate states, deep planning, and tools to support such operation
+- **Self improving agents:** efforts like absolute zero, the godel Darwin machine and alphaevolve show how agents can improve themselves. Help goose rewrite its system prompt, its MCP servers and maybe its own code
+- **Automate everything:** give goose tools to interact with the real world for home automation, robots or 3D printing.
+
+Above all, we want to fund work that aligns with these values and demonstrates an open-source-first mindset.
+
+
+<br/>
+  <Link className="button button--primary button-grant">
+    ## grant details
+  </Link>
+<br/>
+
+- **Project Length:** 12 months
+- **Funding Amount:** $100,000 USD per grant
+- **Structure:** Grants are milestone-based, with periodic check-ins, deliverables, and payouts
+
+_subject to applicable law_
+
+<br/>
+  <Link className="button button--primary button-grant">
+    ## faq
+  </Link>
+<br/>
+**When are proposals accepted?**
+
+We review proposals on a rolling basis. There is no fixed deadline, though submitting earlier increases your chances of being considered for the current review cycle.
+
+**How many proposals will you accept?**
+
+We will support as many strong, mission-aligned projects as our resources allow.
+
+**Can my grant be renewed after 12 months?**
+
+Potentially, yes. We may extend or renew grants based on progress, impact, and alignment. Renewals are not guaranteed and will be evaluated on a case-by-case basis.
+
+**Does a grant lead to a job at goose or Block?**
+
+No. Grants are not employment and do not imply future hiring. However, collaboration with goose or Block teams may emerge naturally from impactful work.
+
+**How does work get reviewed?**
+
+Each grant project will define clear deliverables and milestones. Progress will be reviewed quarterly by the goose team and selected external reviewers.
+
+**How are payouts structured?**
+
+Payouts are milestone-based and made quarterly, pending satisfactory progress updates.
+
+**Are grants available worldwide?**
+
+Yes. We accept proposals from individuals and teams globally. Payouts are made in USD, but we will work with you to accommodate your local currency and payment preferences wherever feasible.
+
+**Can I propose more than one project?**
+
+Yes. You can submit multiple applications as long as the projects are significantly different.
+
+**Who can apply?**
+
+Anyone. We welcome individuals, working on their own or in small teams, as long as the work is not already funded by an employer or client and subject to applicable law. Prior open source experience is a plus, but not required. If you're passionate about open source and have an idea - even if it's just a sketch - we encourage you to reach out.
+
+**How do I apply?**
+
+[Submit your application here](https://forms.gle/psHBhj8xFY8q1nHP7)
+
+
+<br/>
+  <Link className="button button--primary button-grant">
+    ## contact us
+  </Link>
+<br/>
+
+If you have additional questions, feel free to reach out in [Discord](https://discord.com/channels/1287729918100246654/1397943505216868444) in the #goose-grants forum.
+
+<head>
+  <meta property="og:title" content="goose grant program" />
+  <meta property="og:type" content="article" />
+  <meta property="og:url" content="https://block.github.io/goose/grants" />
+  <meta property="og:description" content="$100K grants for open source devs building the future of agentic AI." />
+  <meta property="og:image" content="https://block.github.io/goose/assets/images/goose-grant-program-3ede164a454d9f29e779108c63773416.png" />
+  <meta name="twitter:card" content="summary_large_image" />
+  <meta property="twitter:domain" content="block.github.io/goose" />
+  <meta name="twitter:title" content="goose grant program" />
+  <meta name="twitter:description" content="$100K grants for open source devs building the future of agentic AI." />
+  <meta name="twitter:image" content="https://block.github.io/goose/assets/images/goose-grant-program-3ede164a454d9f29e779108c63773416.png" />
+</head>
\ No newline at end of file
diff --git a/documentation/static/img/goose-grant-program.png b/documentation/static/img/goose-grant-program.png
new file mode 100644
index 0000000000000000000000000000000000000000..ded2e039a1d87d843087967680344f154c6a70c2
GIT binary patch
literal 182172
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
KNulx0`~L^cR_bB^

literal 0
HcmV?d00001

-- 
2.34.1


From a22850637317b15cf4892bd1d4086326ad54628c Mon Sep 17 00:00:00 2001
From: taniashiba <126204004+taniashiba@users.noreply.github.com>
Date: Thu, 24 Jul 2025 11:53:38 -0400
Subject: [PATCH 03/12] docs: June 2024 Community All-Stars Spotlight (#3631)

Co-authored-by: Tania Chakraborty <tchakraborty@block.xyz>
---
 .../src/pages/community/data/config.json      |  7 +-
 .../src/pages/community/data/june-2025.json   | 71 +++++++++++++++++++
 documentation/src/pages/community/index.tsx   |  2 +
 3 files changed, 79 insertions(+), 1 deletion(-)
 create mode 100644 documentation/src/pages/community/data/june-2025.json

diff --git a/documentation/src/pages/community/data/config.json b/documentation/src/pages/community/data/config.json
index 5fc8a6a86e..36126c2575 100644
--- a/documentation/src/pages/community/data/config.json
+++ b/documentation/src/pages/community/data/config.json
@@ -9,7 +9,12 @@
       "id": "may-2025",
       "display": "May 2025",
       "file": "may-2025.json"
+    },
+    {
+      "id": "june-2025",
+      "display": "June 2025",
+      "file": "june-2025.json"
     }
   ],
-  "defaultMonth": "may-2025"
+  "defaultMonth": "june-2025"
 }
\ No newline at end of file
diff --git a/documentation/src/pages/community/data/june-2025.json b/documentation/src/pages/community/data/june-2025.json
new file mode 100644
index 0000000000..f2d7cddb14
--- /dev/null
+++ b/documentation/src/pages/community/data/june-2025.json
@@ -0,0 +1,71 @@
+{
+  "month": "June 2025",
+  "communityStars": [
+    {
+      "name": "Audi_Guy",
+      "handle": "TBD"
+    },
+    {
+      "name": "jwoehr",
+      "handle": "jwoehr"
+    },
+    {
+      "name": "harkamals",
+      "handle": "harkamals"
+    },
+    {
+      "name": "SalvatoreT",
+      "handle": "SalvatoreT"
+    },
+    {
+      "name": "sfc-gh-twhite",
+      "handle": "sfc-gh-twhite"
+    }
+  ],
+  "teamStars": [
+    {
+      "name": "jackjackbits",
+      "handle": "jackjackbits"
+    },
+    {
+      "name": "GaryZhous",
+      "handle": "GaryZhous"
+    },
+    {
+      "name": "AaronGoldsmith",
+      "handle": "AaronGoldsmith"
+    },
+    {
+      "name": "wpfleger96",
+      "handle": "wpfleger96"
+    },
+    {
+      "name": "joahg",
+      "handle": "joahg"
+    }
+  ],
+  "leaderboard": [
+    { "handle": "jackjackbits", "rank": 1, "medal": "🥇" },
+    { "handle": "SalvatoreT", "rank": 2, "medal": "🥈" },
+    { "handle": "GaryZhous", "rank": 3, "medal": "🥉" },
+    { "handle": "AaronGoldsmith", "rank": 4 },
+    { "handle": "wpfleger96", "rank": 5 },
+    { "handle": "joahg", "rank": 6 },
+    { "handle": "The-Best-Codes", "rank": 7 },
+    { "handle": "tiensi", "rank": 8 },
+    { "handle": "sfc-gh-twhite", "rank": 9 },
+    { "handle": "dhanji", "rank": 10 },
+    { "handle": "danielcorin", "rank": 11 },
+    { "handle": "toyamagu-2021", "rank": 12 },
+    { "handle": "chaitanyarahalkar", "rank": 13 },
+    { "handle": "rsb-23", "rank": 14 },
+    { "handle": "sambradbury", "rank": 15 },
+    { "handle": "charlie-lobo", "rank": 16 },
+    { "handle": "alexrrouse", "rank": 17 },
+    { "handle": "alexgleason", "rank": 18 },
+    { "handle": "damienrj", "rank": 19 },
+    { "handle": "Jay4242", "rank": 20 },
+    { "handle": "blockbtheriault", "rank": 21 },
+    { "handle": "btdeviant", "rank": 22 }
+  ]
+}
diff --git a/documentation/src/pages/community/index.tsx b/documentation/src/pages/community/index.tsx
index cae956c59d..b11836e764 100644
--- a/documentation/src/pages/community/index.tsx
+++ b/documentation/src/pages/community/index.tsx
@@ -8,11 +8,13 @@ import Heading from "@theme/Heading";
 import communityConfig from "./data/config.json";
 import april2025Data from "./data/april-2025.json";
 import may2025Data from "./data/may-2025.json";
+import june2025Data from "./data/june-2025.json";
 
 // Create a data map for easy access
 const communityDataMap = {
   "april-2025": april2025Data,
   "may-2025": may2025Data,
+  "june-2025": june2025Data,
 };
 
 function UpcomingEventsSection() {
-- 
2.34.1


From 673e4a25198c419cfe96cfd1152eaf823925ee37 Mon Sep 17 00:00:00 2001
From: Rizel Scarlett <rizel@squareup.com>
Date: Thu, 24 Jul 2025 12:49:56 -0400
Subject: [PATCH 04/12] Fixing grants path (#3632)

---
 documentation/docusaurus.config.ts | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/documentation/docusaurus.config.ts b/documentation/docusaurus.config.ts
index b0eeff6f78..22aaf7720c 100644
--- a/documentation/docusaurus.config.ts
+++ b/documentation/docusaurus.config.ts
@@ -451,7 +451,7 @@ const config: Config = {
     announcementBar: {
       id: 'goose-grants',
       content:
-        '✨ goose grant program now open: <a href="grants">apply now</a>! ✨',
+        '✨ goose grant program now open: <a href="/goose/grants">apply now</a>! ✨',
       backgroundColor: '#20232a',
       textColor: '#fff',
       isCloseable: false,
-- 
2.34.1


From 41f2ba8f9ea911d50f883556960d0d58ab726a8a Mon Sep 17 00:00:00 2001
From: dianed-square <73617011+dianed-square@users.noreply.github.com>
Date: Thu, 24 Jul 2025 10:08:06 -0700
Subject: [PATCH 05/12] docs: update extensions library (#3612)

---
 documentation/docs/mcp/context7-mcp.mdx       |  3 +-
 documentation/docs/mcp/mongodb-mcp.md         | 10 ++---
 documentation/src/components/server-card.tsx  |  2 +-
 documentation/src/pages/extensions/detail.tsx |  4 +-
 documentation/static/servers.json             | 38 +++++++++++++++----
 5 files changed, 39 insertions(+), 18 deletions(-)

diff --git a/documentation/docs/mcp/context7-mcp.mdx b/documentation/docs/mcp/context7-mcp.mdx
index a6093fa902..b78fba2406 100644
--- a/documentation/docs/mcp/context7-mcp.mdx
+++ b/documentation/docs/mcp/context7-mcp.mdx
@@ -1,7 +1,6 @@
 ---
 title: Context7 Extension
-
-escription: Add Context7 MCP Server as a Goose Extension
+description: Add Context7 MCP Server as a Goose Extension
 ---
 
 import Tabs from '@theme/Tabs';
diff --git a/documentation/docs/mcp/mongodb-mcp.md b/documentation/docs/mcp/mongodb-mcp.md
index 2c9c430fa3..17a3534a1c 100644
--- a/documentation/docs/mcp/mongodb-mcp.md
+++ b/documentation/docs/mcp/mongodb-mcp.md
@@ -7,7 +7,7 @@ import Tabs from '@theme/Tabs';
 import TabItem from '@theme/TabItem';
 import GooseDesktopInstaller from '@site/src/components/GooseDesktopInstaller';
 
-The MongoDB MCP Server extension allows Goose to interact directly with your MongoDB databases, enabling comprehensive database operations including querying, document manipulation, collection management, and database administration. This makes it easy to work with your MongoDB databases through natural language interactions.
+The [MongoDB MCP Server](https://github.com/mongodb-js/mongodb-mcp-server) extension allows Goose to interact directly with your MongoDB databases, enabling comprehensive database operations including querying, document manipulation, collection management, and database administration. This makes it easy to work with your MongoDB databases through natural language interactions.
 
 :::tip TLDR
 <Tabs groupId="interface">
@@ -201,23 +201,23 @@ Note that you'll need [Node.js](https://nodejs.org/) installed on your system to
 
 The MongoDB extension provides comprehensive database management capabilities through natural language interactions. You can perform a wide range of operations including:
 
-### **Query Operations**
+### Query Operations
 - **Find documents** with complex filters and sorting
 - **Aggregate data** using MongoDB's powerful aggregation pipeline
 - **Count documents** in collections with optional filtering
 
-### **Document Management**
+### Document Management
 - **Insert** single or multiple documents
 - **Update** one or many documents with specified criteria
 - **Delete** specific documents or bulk deletions
 
-### **Collection & Database Administration**
+### Collection & Database Administration
 - **Create indexes** to optimize query performance
 - **Rename collections** for better organization
 - **Drop collections** when no longer needed
 - **Drop entire databases** (use with caution!)
 
-### **Schema & Analytics**
+### Schema & Analytics
 - **Analyze collection schemas** to understand document structure
 - **List databases and collections** for exploration
 - **View collection indexes** and their configurations
diff --git a/documentation/src/components/server-card.tsx b/documentation/src/components/server-card.tsx
index 684d71c0ec..f625e751bd 100644
--- a/documentation/src/components/server-card.tsx
+++ b/documentation/src/components/server-card.tsx
@@ -80,7 +80,7 @@ export function ServerCard({ server }: { server: MCPServer }) {
                     style={{ fontSize: "12px" }}
                     className="text-textSubtle leading-normal"
                   >
-                    Can be enabled in the goose settings page
+                    Can be enabled on the Extensions page in Goose
                   </span>
                   </div>
                 )}
diff --git a/documentation/src/pages/extensions/detail.tsx b/documentation/src/pages/extensions/detail.tsx
index 3efef28d4b..737e4df4fe 100644
--- a/documentation/src/pages/extensions/detail.tsx
+++ b/documentation/src/pages/extensions/detail.tsx
@@ -99,7 +99,7 @@ const getDocumentationPath = (serverId: string): string => {
                       <div className="flex items-center gap-2">
                         <Info className="h-4 w-4 text-textSubtle shrink-0" />
                         <span className="text-sm text-textSubtle">
-                          Can be enabled in the goose settings page
+                           Can be enabled on the Extensions page in Goose
                         </span>
                       </div>
                     ) : (
@@ -182,7 +182,7 @@ const getDocumentationPath = (serverId: string): string => {
                     {server.is_builtin ? (
                       <div
                         className="built-in-badge"
-                        title="This extension is built into goose and can be enabled in the settings page"
+                        title="This extension is built into Goose and can be enabled on the Extensions page"
                       >
                         Built-in
                       </div>
diff --git a/documentation/static/servers.json b/documentation/static/servers.json
index cc6eb814ae..8b0592bb71 100644
--- a/documentation/static/servers.json
+++ b/documentation/static/servers.json
@@ -5,7 +5,7 @@
     "description": "Built-in developer tools for file editing and shell command execution",
     "command": "",
     "link": "https://github.com/block/goose/tree/main/crates/goose-mcp/src/developer",
-    "installation_notes": "This is a built-in extension that comes with goose by default. No installation required.",
+    "installation_notes": "This is a built-in extension that comes with Goose by default. No installation required.",
     "is_builtin": true,
     "endorsed": true,
     "environmentVariables": []
@@ -16,7 +16,7 @@
     "description": "Built-in computer controls for webscraping, file caching, and automations",
     "command": "",
     "link": "https://github.com/block/goose/tree/main/crates/goose-mcp/src/computercontroller",
-    "installation_notes": "This is a built-in extension that comes with goose and can be enabled in the Settings page under 'Extensions'.",
+    "installation_notes": "This is a built-in extension that comes with Goose and can be enabled on the Extensions page.",
     "is_builtin": true,
     "endorsed": true,
     "environmentVariables": []
@@ -27,7 +27,7 @@
     "description": "Built-in memory system for persistent context and information storage",
     "command": "",
     "link": "https://github.com/block/goose/tree/main/crates/goose-mcp/src/memory",
-    "installation_notes": "This is a built-in extension that comes with goose and can be enabled in the Settings page under 'Extensions'.",
+    "installation_notes": "This is a built-in extension that comes with Goose and can be enabled on the Extensions page.",
     "is_builtin": true,
     "endorsed": true,
     "environmentVariables": []
@@ -38,7 +38,7 @@
     "description": "Built-in JetBrains IDE integration for development workflows",
     "command": "",
     "link": "https://github.com/block/goose/tree/main/crates/goose-mcp/src/jetbrains",
-    "installation_notes": "This is a built-in extension that comes with goose and can be enabled in the Settings page under 'Extensions'.",
+    "installation_notes": "This is a built-in extension that comes with Goose and can be enabled on the Extensions page.",
     "is_builtin": true,
     "endorsed": true,
     "environmentVariables": []
@@ -306,6 +306,17 @@
     "endorsed": false,
     "environmentVariables": []
   },
+  {
+    "id": "context7",
+    "name": "Context7",
+    "description": "Use up-to-date code and docs",
+    "command": "npx -y @upstash/context7-mcp",
+    "link": "https://github.com/upstash/context7",
+    "installation_notes": "Install using npx package manager.",
+    "is_builtin": false,
+    "endorsed": true,
+    "environmentVariables": []
+  },
   {
     "id": "elevenlabs-mcp",
     "name": "ElevenLabs",
@@ -397,6 +408,17 @@
     "endorsed": false,
     "environmentVariables": []
   },
+  {
+    "id": "mongodb",
+    "name": "MongoDB",
+    "description": "MongoDB database integration",
+    "command": "npx -y mongodb-mcp-server --connection-string mongodb://localhost:27017",
+    "link": "https://github.com/mongodb-js/mongodb-mcp-server",
+    "installation_notes": "Install using npx package manager. Update connection-string as needed to match your MongoDB environment.",
+    "is_builtin": false,
+    "endorsed": true,
+    "environmentVariables": []
+  },
   {
     "id": "netlify-mcp",
     "name": "Netlify",
@@ -522,11 +544,11 @@
   {
     "id": "tutorial-mcp",
     "name": "Tutorial",
-    "description": "Tutorial and learning management system",
-    "command": "npx -y tutorial-mcp",
+    "description": "Built-in tutorial and learning management system",
+    "command": "",
     "link": "https://github.com/tutorial/tutorial-mcp",
-    "installation_notes": "Install using npx package manager.",
-    "is_builtin": false,
+    "installation_notes": "This is a built-in extension that comes with Goose and can be enabled on the Extensions page.",
+    "is_builtin": true,
     "endorsed": false,
     "environmentVariables": []
   },
-- 
2.34.1


From a65c5476991535e87a1348f3c2608c66ba784459 Mon Sep 17 00:00:00 2001
From: Taylor Ho <taylorkmho@gmail.com>
Date: Thu, 24 Jul 2025 10:08:54 -0700
Subject: [PATCH 06/12] Adds the `WaitingForUserInput` state (#3620)

---
 ui/desktop/src/components/AnimatedIcons.tsx | 51 +++++++++++++
 ui/desktop/src/components/BaseChat.tsx      | 22 +++---
 ui/desktop/src/components/ChatInput.tsx     |  8 +-
 ui/desktop/src/components/LoadingGoose.tsx  | 29 ++++---
 ui/desktop/src/components/ThinkingIcons.tsx | 42 -----------
 ui/desktop/src/components/hub.tsx           |  3 +-
 ui/desktop/src/components/icons/Watch0.tsx  | 20 +++++
 ui/desktop/src/components/icons/Watch1.tsx  | 20 +++++
 ui/desktop/src/components/icons/Watch2.tsx  | 20 +++++
 ui/desktop/src/components/icons/Watch3.tsx  | 20 +++++
 ui/desktop/src/components/icons/Watch4.tsx  | 20 +++++
 ui/desktop/src/components/icons/Watch5.tsx  | 20 +++++
 ui/desktop/src/components/icons/Watch6.tsx  | 20 +++++
 ui/desktop/src/components/icons/index.tsx   | 14 ++++
 ui/desktop/src/hooks/useChatEngine.ts       |  8 +-
 ui/desktop/src/hooks/useMessageStream.ts    | 84 ++++++++++-----------
 ui/desktop/src/types/chatState.ts           |  6 ++
 17 files changed, 284 insertions(+), 123 deletions(-)
 create mode 100644 ui/desktop/src/components/AnimatedIcons.tsx
 delete mode 100644 ui/desktop/src/components/ThinkingIcons.tsx
 create mode 100644 ui/desktop/src/components/icons/Watch0.tsx
 create mode 100644 ui/desktop/src/components/icons/Watch1.tsx
 create mode 100644 ui/desktop/src/components/icons/Watch2.tsx
 create mode 100644 ui/desktop/src/components/icons/Watch3.tsx
 create mode 100644 ui/desktop/src/components/icons/Watch4.tsx
 create mode 100644 ui/desktop/src/components/icons/Watch5.tsx
 create mode 100644 ui/desktop/src/components/icons/Watch6.tsx
 create mode 100644 ui/desktop/src/types/chatState.ts

diff --git a/ui/desktop/src/components/AnimatedIcons.tsx b/ui/desktop/src/components/AnimatedIcons.tsx
new file mode 100644
index 0000000000..2a291f76b0
--- /dev/null
+++ b/ui/desktop/src/components/AnimatedIcons.tsx
@@ -0,0 +1,51 @@
+import { useState, useEffect } from 'react';
+import {
+  CodeXml,
+  Cog,
+  Fuel,
+  GalleryHorizontalEnd,
+  Gavel,
+  GlassWater,
+  Grape,
+  Watch0,
+  Watch1,
+  Watch2,
+  Watch3,
+  Watch4,
+  Watch5,
+  Watch6,
+} from './icons';
+
+interface AnimatedIconsProps {
+  className?: string;
+  cycleInterval?: number; // milliseconds between icon changes
+  variant?: 'thinking' | 'waiting';
+}
+
+const thinkingIcons = [CodeXml, Cog, Fuel, GalleryHorizontalEnd, Gavel, GlassWater, Grape];
+const waitingIcons = [Watch0, Watch1, Watch2, Watch3, Watch4, Watch5, Watch6];
+
+export default function AnimatedIcons({
+  className = '',
+  cycleInterval = 500,
+  variant = 'thinking',
+}: AnimatedIconsProps) {
+  const [currentIconIndex, setCurrentIconIndex] = useState(0);
+  const icons = variant === 'thinking' ? thinkingIcons : waitingIcons;
+
+  useEffect(() => {
+    const interval = setInterval(() => {
+      setCurrentIconIndex((prevIndex) => (prevIndex + 1) % icons.length);
+    }, cycleInterval);
+
+    return () => clearInterval(interval);
+  }, [cycleInterval, icons]);
+
+  const CurrentIcon = icons[currentIconIndex];
+
+  return (
+    <div className={`transition-opacity duration-200 w-4 h-4 ${className}`}>
+      <CurrentIcon className="w-full h-full" />
+    </div>
+  );
+}
diff --git a/ui/desktop/src/components/BaseChat.tsx b/ui/desktop/src/components/BaseChat.tsx
index e51e747440..9897c0f499 100644
--- a/ui/desktop/src/components/BaseChat.tsx
+++ b/ui/desktop/src/components/BaseChat.tsx
@@ -67,6 +67,7 @@ import { useSessionContinuation } from '../hooks/useSessionContinuation';
 import { useFileDrop } from '../hooks/useFileDrop';
 import { useCostTracking } from '../hooks/useCostTracking';
 import { Message } from '../types/message';
+import { ChatState } from '../types/chatState';
 
 // Context for sharing current model info
 const CurrentModelContext = createContext<{ model: string; mode: string } | null>(null);
@@ -138,9 +139,7 @@ function BaseChatContent({
     ancestorMessages,
     setAncestorMessages,
     append,
-    isLoading,
-    isWaiting,
-    isStreaming,
+    chatState,
     error,
     setMessages,
     input: _input,
@@ -226,8 +225,10 @@ function BaseChatContent({
 
   // Handle recipe auto-execution
   useEffect(() => {
-    handleAutoExecution(append, isLoading);
-  }, [handleAutoExecution, append, isLoading]);
+    const isProcessingResponse =
+      chatState !== ChatState.Idle && chatState !== ChatState.WaitingForUserInput;
+    handleAutoExecution(append, isProcessingResponse);
+  }, [handleAutoExecution, append, chatState]);
 
   // Use shared session continuation
   const { createNewSessionIfNeeded } = useSessionContinuation({
@@ -406,7 +407,7 @@ function BaseChatContent({
                       }}
                       isUserMessage={isUserMessage}
                       onScrollToBottom={handleScrollToBottom}
-                      isStreamingMessage={isLoading}
+                      isStreamingMessage={chatState !== ChatState.Idle}
                     />
                   ) : (
                     // Render messages with SearchView wrapper when search is enabled
@@ -422,7 +423,7 @@ function BaseChatContent({
                         }}
                         isUserMessage={isUserMessage}
                         onScrollToBottom={handleScrollToBottom}
-                        isStreamingMessage={isLoading}
+                        isStreamingMessage={chatState !== ChatState.Idle}
                       />
                     </SearchView>
                   )}
@@ -501,12 +502,11 @@ function BaseChatContent({
           </ScrollArea>
 
           {/* Fixed loading indicator at bottom left of chat container */}
-          {isLoading && (
+          {chatState !== ChatState.Idle && (
             <div className="absolute bottom-1 left-4 z-20 pointer-events-none">
               <LoadingGoose
                 message={isLoadingSummary ? 'summarizing conversation…' : undefined}
-                isWaiting={isWaiting}
-                isStreaming={isStreaming}
+                chatState={chatState}
               />
             </div>
           )}
@@ -517,7 +517,7 @@ function BaseChatContent({
         >
           <ChatInput
             handleSubmit={handleSubmit}
-            isLoading={isLoading}
+            chatState={chatState}
             onStop={onStopGoose}
             commandHistory={commandHistory}
             initialValue={_input || (messages.length === 0 ? initialPrompt : '')}
diff --git a/ui/desktop/src/components/ChatInput.tsx b/ui/desktop/src/components/ChatInput.tsx
index da3da8da03..92b832d0bb 100644
--- a/ui/desktop/src/components/ChatInput.tsx
+++ b/ui/desktop/src/components/ChatInput.tsx
@@ -5,6 +5,7 @@ import { Button } from './ui/button';
 import type { View } from '../App';
 import Stop from './ui/Stop';
 import { Attach, Send, Close, Microphone } from './icons';
+import { ChatState } from '../types/chatState';
 import { debounce } from 'lodash';
 import { LocalMessageStorage } from '../utils/localMessageStorage';
 import { Message } from '../types/message';
@@ -52,7 +53,7 @@ interface ModelLimit {
 
 interface ChatInputProps {
   handleSubmit: (e: React.FormEvent) => void;
-  isLoading?: boolean;
+  chatState: ChatState;
   onStop?: () => void;
   commandHistory?: string[]; // Current chat's message history
   initialValue?: string;
@@ -78,7 +79,7 @@ interface ChatInputProps {
 
 export default function ChatInput({
   handleSubmit,
-  isLoading = false,
+  chatState = ChatState.Idle,
   onStop,
   commandHistory = [],
   initialValue = '',
@@ -99,6 +100,9 @@ export default function ChatInput({
   const [displayValue, setDisplayValue] = useState(initialValue); // For immediate visual feedback
   const [isFocused, setIsFocused] = useState(false);
   const [pastedImages, setPastedImages] = useState<PastedImage[]>([]);
+
+  // Derived state - chatState != Idle means we're in some form of loading state
+  const isLoading = chatState !== ChatState.Idle;
   const { alerts, addAlert, clearAlerts } = useAlerts();
   const dropdownRef = useRef<HTMLDivElement>(null);
   const toolCount = useToolCount();
diff --git a/ui/desktop/src/components/LoadingGoose.tsx b/ui/desktop/src/components/LoadingGoose.tsx
index e84a4efc70..70e6156979 100644
--- a/ui/desktop/src/components/LoadingGoose.tsx
+++ b/ui/desktop/src/components/LoadingGoose.tsx
@@ -1,25 +1,22 @@
 import GooseLogo from './GooseLogo';
-import ThinkingIcons from './ThinkingIcons';
+import AnimatedIcons from './AnimatedIcons';
 import FlyingBird from './FlyingBird';
+import { ChatState } from '../types/chatState';
 
 interface LoadingGooseProps {
   message?: string;
-  isWaiting?: boolean;
-  isStreaming?: boolean;
+  chatState?: ChatState;
 }
 
-const LoadingGoose = ({ 
-  message, 
-  isWaiting = false, 
-  isStreaming = false 
-}: LoadingGooseProps) => {
+const LoadingGoose = ({ message, chatState = ChatState.Idle }: LoadingGooseProps) => {
   // Determine the appropriate message based on state
   const getLoadingMessage = () => {
     if (message) return message; // Custom message takes priority
-    
-    if (isWaiting) return 'goose is thinking…';
-    if (isStreaming) return 'goose is working on it…';
-    
+
+    if (chatState === ChatState.Thinking) return 'goose is thinking…';
+    if (chatState === ChatState.Streaming) return 'goose is working on it…';
+    if (chatState === ChatState.WaitingForUserInput) return 'goose is waiting…';
+
     // Default fallback
     return 'goose is working on it…';
   };
@@ -30,10 +27,12 @@ const LoadingGoose = ({
         data-testid="loading-indicator"
         className="flex items-center gap-2 text-xs text-textStandard py-2"
       >
-        {isWaiting ? (
-          <ThinkingIcons className="flex-shrink-0" cycleInterval={600} />
-        ) : isStreaming ? (
+        {chatState === ChatState.Thinking ? (
+          <AnimatedIcons className="flex-shrink-0" cycleInterval={600} />
+        ) : chatState === ChatState.Streaming ? (
           <FlyingBird className="flex-shrink-0" cycleInterval={150} />
+        ) : chatState === ChatState.WaitingForUserInput ? (
+          <AnimatedIcons className="flex-shrink-0" cycleInterval={600} variant="waiting" />
         ) : (
           <GooseLogo size="small" hover={false} />
         )}
diff --git a/ui/desktop/src/components/ThinkingIcons.tsx b/ui/desktop/src/components/ThinkingIcons.tsx
deleted file mode 100644
index c7affaaa82..0000000000
--- a/ui/desktop/src/components/ThinkingIcons.tsx
+++ /dev/null
@@ -1,42 +0,0 @@
-import { useState, useEffect } from 'react';
-import { CodeXml, Cog, Fuel, GalleryHorizontalEnd, Gavel, GlassWater, Grape } from './icons';
-
-interface ThinkingIconsProps {
-  className?: string;
-  cycleInterval?: number; // milliseconds between icon changes
-}
-
-const thinkingIcons = [
-  CodeXml,
-  Cog,
-  Fuel,
-  GalleryHorizontalEnd,
-  Gavel,
-  GlassWater,
-  Grape,
-];
-
-export default function ThinkingIcons({ 
-  className = '', 
-  cycleInterval = 500 
-}: ThinkingIconsProps) {
-  const [currentIconIndex, setCurrentIconIndex] = useState(0);
-
-  useEffect(() => {
-    const interval = setInterval(() => {
-      setCurrentIconIndex((prevIndex) => 
-        (prevIndex + 1) % thinkingIcons.length
-      );
-    }, cycleInterval);
-
-    return () => clearInterval(interval);
-  }, [cycleInterval]);
-
-  const CurrentIcon = thinkingIcons[currentIconIndex];
-
-  return (
-    <div className={`transition-opacity duration-200 ${className}`}>
-      <CurrentIcon className="w-4 h-4" />
-    </div>
-  );
-}
diff --git a/ui/desktop/src/components/hub.tsx b/ui/desktop/src/components/hub.tsx
index 2a3c9954ac..5a9a715f30 100644
--- a/ui/desktop/src/components/hub.tsx
+++ b/ui/desktop/src/components/hub.tsx
@@ -25,6 +25,7 @@ import { type View, ViewOptions } from '../App';
 import { SessionInsights } from './sessions/SessionsInsights';
 import ChatInput from './ChatInput';
 import { generateSessionId } from '../sessions';
+import { ChatState } from '../types/chatState';
 import { ChatContextManagerProvider } from './context_management/ChatContextManager';
 import 'react-toastify/dist/ReactToastify.css';
 
@@ -87,7 +88,7 @@ export default function Hub({
 
         <ChatInput
           handleSubmit={handleSubmit}
-          isLoading={false}
+          chatState={ChatState.Idle}
           onStop={() => {}}
           commandHistory={[]}
           initialValue=""
diff --git a/ui/desktop/src/components/icons/Watch0.tsx b/ui/desktop/src/components/icons/Watch0.tsx
new file mode 100644
index 0000000000..286ad8218e
--- /dev/null
+++ b/ui/desktop/src/components/icons/Watch0.tsx
@@ -0,0 +1,20 @@
+export function Watch0({ className = '' }: { className?: string }) {
+  return (
+    <svg
+      className={className}
+      width="16"
+      height="16"
+      viewBox="0 0 16 16"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        stroke="currentColor"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+        strokeWidth="1.33"
+        d="M8 6.667V8l.667.667m2.086-3.56-.54-2.7A1.333 1.333 0 0 0 8.88 1.333H7.093A1.333 1.333 0 0 0 5.76 2.407l-.52 2.7m.013 5.8.534 2.666a1.333 1.333 0 0 0 1.333 1.074h1.813a1.333 1.333 0 0 0 1.334-1.074l.54-2.7M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
+      />
+    </svg>
+  );
+}
diff --git a/ui/desktop/src/components/icons/Watch1.tsx b/ui/desktop/src/components/icons/Watch1.tsx
new file mode 100644
index 0000000000..c5a78702f9
--- /dev/null
+++ b/ui/desktop/src/components/icons/Watch1.tsx
@@ -0,0 +1,20 @@
+export function Watch1({ className = '' }: { className?: string }) {
+  return (
+    <svg
+      className={className}
+      width="16"
+      height="16"
+      viewBox="0 0 16 16"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        stroke="currentColor"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+        strokeWidth="1.33"
+        d="M9 7 8 8l.667.667m2.086-3.56-.54-2.7A1.333 1.333 0 0 0 8.88 1.333H7.093A1.333 1.333 0 0 0 5.76 2.407l-.52 2.7m.013 5.8.534 2.666a1.333 1.333 0 0 0 1.333 1.074h1.813a1.333 1.333 0 0 0 1.334-1.074l.54-2.7M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
+      />
+    </svg>
+  );
+}
diff --git a/ui/desktop/src/components/icons/Watch2.tsx b/ui/desktop/src/components/icons/Watch2.tsx
new file mode 100644
index 0000000000..ed0e50727f
--- /dev/null
+++ b/ui/desktop/src/components/icons/Watch2.tsx
@@ -0,0 +1,20 @@
+export function Watch2({ className = '' }: { className?: string }) {
+  return (
+    <svg
+      className={className}
+      width="16"
+      height="16"
+      viewBox="0 0 16 16"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        stroke="currentColor"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+        strokeWidth="1.33"
+        d="M9.742 8H8l.667.667m2.086-3.56-.54-2.7A1.333 1.333 0 0 0 8.88 1.333H7.093A1.333 1.333 0 0 0 5.76 2.407l-.52 2.7m.013 5.8.534 2.666a1.333 1.333 0 0 0 1.333 1.074h1.813a1.333 1.333 0 0 0 1.334-1.074l.54-2.7M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
+      />
+    </svg>
+  );
+}
diff --git a/ui/desktop/src/components/icons/Watch3.tsx b/ui/desktop/src/components/icons/Watch3.tsx
new file mode 100644
index 0000000000..55621670d7
--- /dev/null
+++ b/ui/desktop/src/components/icons/Watch3.tsx
@@ -0,0 +1,20 @@
+export function Watch3({ className = '' }: { className?: string }) {
+  return (
+    <svg
+      className={className}
+      width="16"
+      height="16"
+      viewBox="0 0 16 16"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        stroke="currentColor"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+        strokeWidth="1.33"
+        d="M8.667 9.816 8 8l.667.667m2.086-3.56-.54-2.7A1.333 1.333 0 0 0 8.88 1.333H7.093A1.333 1.333 0 0 0 5.76 2.407l-.52 2.7m.013 5.8.534 2.666a1.333 1.333 0 0 0 1.333 1.074h1.813a1.333 1.333 0 0 0 1.334-1.074l.54-2.7M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
+      />
+    </svg>
+  );
+}
diff --git a/ui/desktop/src/components/icons/Watch4.tsx b/ui/desktop/src/components/icons/Watch4.tsx
new file mode 100644
index 0000000000..7f39859d34
--- /dev/null
+++ b/ui/desktop/src/components/icons/Watch4.tsx
@@ -0,0 +1,20 @@
+export function Watch4({ className = '' }: { className?: string }) {
+  return (
+    <svg
+      className={className}
+      width="16"
+      height="16"
+      viewBox="0 0 16 16"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        stroke="currentColor"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+        strokeWidth="1.33"
+        d="M7 9.5 8 8l.667.667m2.086-3.56-.54-2.7A1.333 1.333 0 0 0 8.88 1.333H7.093A1.333 1.333 0 0 0 5.76 2.407l-.52 2.7m.013 5.8.534 2.666a1.333 1.333 0 0 0 1.333 1.074h1.813a1.333 1.333 0 0 0 1.334-1.074l.54-2.7M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
+      />
+    </svg>
+  );
+}
diff --git a/ui/desktop/src/components/icons/Watch5.tsx b/ui/desktop/src/components/icons/Watch5.tsx
new file mode 100644
index 0000000000..a15f9e1803
--- /dev/null
+++ b/ui/desktop/src/components/icons/Watch5.tsx
@@ -0,0 +1,20 @@
+export function Watch5({ className = '' }: { className?: string }) {
+  return (
+    <svg
+      className={className}
+      width="16"
+      height="16"
+      viewBox="0 0 16 16"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        stroke="currentColor"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+        strokeWidth="1.33"
+        d="M6.232 8.288 8 8l.667.667m2.086-3.56-.54-2.7A1.333 1.333 0 0 0 8.88 1.333H7.093A1.333 1.333 0 0 0 5.76 2.407l-.52 2.7m.013 5.8.534 2.666a1.333 1.333 0 0 0 1.333 1.074h1.813a1.333 1.333 0 0 0 1.334-1.074l.54-2.7M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
+      />
+    </svg>
+  );
+}
diff --git a/ui/desktop/src/components/icons/Watch6.tsx b/ui/desktop/src/components/icons/Watch6.tsx
new file mode 100644
index 0000000000..6a526d749f
--- /dev/null
+++ b/ui/desktop/src/components/icons/Watch6.tsx
@@ -0,0 +1,20 @@
+export function Watch6({ className = '' }: { className?: string }) {
+  return (
+    <svg
+      className={className}
+      width="16"
+      height="16"
+      viewBox="0 0 16 16"
+      fill="none"
+      xmlns="http://www.w3.org/2000/svg"
+    >
+      <path
+        stroke="currentColor"
+        strokeLinecap="round"
+        strokeLinejoin="round"
+        strokeWidth="1.33"
+        d="M6.5 7 8 8l.667.667m2.086-3.56-.54-2.7A1.333 1.333 0 0 0 8.88 1.333H7.093A1.333 1.333 0 0 0 5.76 2.407l-.52 2.7m.013 5.8.534 2.666a1.333 1.333 0 0 0 1.333 1.074h1.813a1.333 1.333 0 0 0 1.334-1.074l.54-2.7M12 8a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
+      />
+    </svg>
+  );
+}
diff --git a/ui/desktop/src/components/icons/index.tsx b/ui/desktop/src/components/icons/index.tsx
index 2760c2dc86..7e76ab55b9 100644
--- a/ui/desktop/src/components/icons/index.tsx
+++ b/ui/desktop/src/components/icons/index.tsx
@@ -38,6 +38,13 @@ import Time from './Time';
 import { Gear } from './Gear';
 import Youtube from './Youtube';
 import { Microphone } from './Microphone';
+import { Watch0 } from './Watch0';
+import { Watch1 } from './Watch1';
+import { Watch2 } from './Watch2';
+import { Watch3 } from './Watch3';
+import { Watch4 } from './Watch4';
+import { Watch5 } from './Watch5';
+import { Watch6 } from './Watch6';
 
 export {
   ArrowDown,
@@ -79,5 +86,12 @@ export {
   Send,
   Settings,
   Time,
+  Watch0,
+  Watch1,
+  Watch2,
+  Watch3,
+  Watch4,
+  Watch5,
+  Watch6,
   Youtube,
 };
diff --git a/ui/desktop/src/hooks/useChatEngine.ts b/ui/desktop/src/hooks/useChatEngine.ts
index c183688f83..512bffd091 100644
--- a/ui/desktop/src/hooks/useChatEngine.ts
+++ b/ui/desktop/src/hooks/useChatEngine.ts
@@ -67,9 +67,7 @@ export const useChatEngine = ({
     messages,
     append: originalAppend,
     stop,
-    isLoading,
-    isWaiting,
-    isStreaming,
+    chatState,
     error,
     setMessages,
     input: _input,
@@ -371,9 +369,7 @@ export const useChatEngine = ({
     // Message stream controls
     append,
     stop,
-    isLoading,
-    isWaiting,
-    isStreaming,
+    chatState,
     error,
     setMessages,
 
diff --git a/ui/desktop/src/hooks/useMessageStream.ts b/ui/desktop/src/hooks/useMessageStream.ts
index 4850e8b1a2..31ad90e7c9 100644
--- a/ui/desktop/src/hooks/useMessageStream.ts
+++ b/ui/desktop/src/hooks/useMessageStream.ts
@@ -3,6 +3,7 @@ import useSWR from 'swr';
 import { getSecretKey } from '../config';
 import { Message, createUserMessage, hasCompletedToolCalls } from '../types/message';
 import { getSessionHistory } from '../api';
+import { ChatState } from '../types/chatState';
 
 let messageIdCounter = 0;
 
@@ -151,14 +152,8 @@ export interface UseMessageStreamHelpers {
   /** Form submission handler to automatically reset input and append a user message */
   handleSubmit: (event?: { preventDefault?: () => void }) => void;
 
-  /** Whether the API request is in progress */
-  isLoading: boolean;
-
-  /** Whether we're waiting for the first response from LLM */
-  isWaiting: boolean;
-
-  /** Whether we're actively streaming response content */
-  isStreaming: boolean;
+  /** Current chat state (idle, thinking, streaming, waiting for user input) */
+  chatState: ChatState;
 
   /** Add a tool result to a tool call */
   addToolResult: ({ toolCallId, result }: { toolCallId: string; result: unknown }) => void;
@@ -223,20 +218,9 @@ export function useMessageStream({
     messagesRef.current = messages || [];
   }, [messages]);
 
-  // We store loading state in another hook to sync loading states across hook invocations
-  const { data: isLoading = false, mutate: mutateLoading } = useSWR<boolean>(
-    [chatKey, 'loading'],
-    null
-  );
-
-  // Track waiting vs streaming states
-  const { data: isWaiting = false, mutate: mutateWaiting } = useSWR<boolean>(
-    [chatKey, 'waiting'],
-    null
-  );
-
-  const { data: isStreaming = false, mutate: mutateStreaming } = useSWR<boolean>(
-    [chatKey, 'streaming'],
+  // Track chat state (idle, thinking, streaming, waiting for user input)
+  const { data: chatState = ChatState.Idle, mutate: mutateChatState } = useSWR<ChatState>(
+    [chatKey, 'chatState'],
     null
   );
 
@@ -300,8 +284,7 @@ export function useMessageStream({
                 switch (parsedEvent.type) {
                   case 'Message': {
                     // Transition from waiting to streaming on first message
-                    mutateWaiting(false);
-                    mutateStreaming(true);
+                    mutateChatState(ChatState.Streaming);
 
                     // Create a new message object with the properties preserved or defaulted
                     const newMessage = {
@@ -333,6 +316,15 @@ export function useMessageStream({
                       currentMessages = [...currentMessages, newMessage];
                     }
 
+                    // Check if this message contains tool confirmation requests
+                    const hasToolConfirmation = newMessage.content.some(
+                      (content) => content.type === 'toolConfirmationRequest'
+                    );
+
+                    if (hasToolConfirmation) {
+                      mutateChatState(ChatState.WaitingForUserInput);
+                    }
+
                     mutate(currentMessages, false);
                     break;
                   }
@@ -464,16 +456,14 @@ export function useMessageStream({
 
       return currentMessages;
     },
-    [mutate, mutateWaiting, mutateStreaming, onFinish, onError, forceUpdate, setError]
+    [mutate, mutateChatState, onFinish, onError, forceUpdate, setError]
   );
 
   // Send a request to the server
   const sendRequest = useCallback(
     async (requestMessages: Message[]) => {
       try {
-        mutateLoading(true);
-        mutateWaiting(true); // Start in waiting state
-        mutateStreaming(false);
+        mutateChatState(ChatState.Thinking); // Start in thinking state
         setError(undefined);
 
         // Create abort controller
@@ -544,23 +534,22 @@ export function useMessageStream({
 
         setError(err as Error);
       } finally {
-        mutateLoading(false);
-        mutateWaiting(false);
-        mutateStreaming(false);
+        // Check if the last message has pending tool confirmations
+        const currentMessages = messagesRef.current;
+        const lastMessage = currentMessages[currentMessages.length - 1];
+        const hasPendingToolConfirmation = lastMessage?.content.some(
+          (content) => content.type === 'toolConfirmationRequest'
+        );
+
+        if (hasPendingToolConfirmation) {
+          mutateChatState(ChatState.WaitingForUserInput);
+        } else {
+          mutateChatState(ChatState.Idle);
+        }
       }
     },
     // eslint-disable-next-line react-hooks/exhaustive-deps
-    [
-      api,
-      processMessageStream,
-      mutateLoading,
-      mutateWaiting,
-      mutateStreaming,
-      setError,
-      onResponse,
-      onError,
-      maxSteps,
-    ]
+    [api, processMessageStream, mutateChatState, setError, onResponse, onError, maxSteps]
   );
 
   // Append a new message and send request
@@ -569,11 +558,16 @@ export function useMessageStream({
       // If a string is passed, convert it to a Message object
       const messageToAppend = typeof message === 'string' ? createUserMessage(message) : message;
 
+      // If we were waiting for user input and user provides input, transition away from that state
+      if (chatState === ChatState.WaitingForUserInput) {
+        mutateChatState(ChatState.Thinking);
+      }
+
       const currentMessages = [...messagesRef.current, messageToAppend];
       mutate(currentMessages, false);
       await sendRequest(currentMessages);
     },
-    [mutate, sendRequest]
+    [mutate, sendRequest, chatState, mutateChatState]
   );
 
   // Reload the last message
@@ -704,9 +698,7 @@ export function useMessageStream({
     setInput,
     handleInputChange,
     handleSubmit,
-    isLoading: isLoading || false,
-    isWaiting: isWaiting || false,
-    isStreaming: isStreaming || false,
+    chatState,
     addToolResult,
     updateMessageStreamBody,
     notifications,
diff --git a/ui/desktop/src/types/chatState.ts b/ui/desktop/src/types/chatState.ts
new file mode 100644
index 0000000000..4adc5f0ece
--- /dev/null
+++ b/ui/desktop/src/types/chatState.ts
@@ -0,0 +1,6 @@
+export enum ChatState {
+  Idle = 'idle',
+  Thinking = 'thinking',
+  Streaming = 'streaming',
+  WaitingForUserInput = 'waitingForUserInput',
+}
-- 
2.34.1


From 7b2ca43c7756505433bfb4e933aba899db1c63b6 Mon Sep 17 00:00:00 2001
From: Wendy Tang <wendytang@squareup.com>
Date: Thu, 24 Jul 2025 10:36:08 -0700
Subject: [PATCH 07/12] fix: clean up subagent (#3565)

---
 crates/goose-cli/src/session/output.rs        |  54 +++++---
 crates/goose/src/agents/agent.rs              |  40 +-----
 .../agents/recipe_tools/dynamic_task_tools.rs |   8 --
 crates/goose/src/agents/subagent.rs           | 123 +++---------------
 .../task_execution_tracker.rs                 |  14 +-
 .../agents/subagent_execution_tool/tasks.rs   |  30 +----
 crates/goose/src/agents/subagent_handler.rs   |  74 +++++++----
 .../goose/src/agents/subagent_task_config.rs  |  11 +-
 crates/goose/src/prompts/subagent_system.md   |  85 ++++--------
 9 files changed, 131 insertions(+), 308 deletions(-)

diff --git a/crates/goose-cli/src/session/output.rs b/crates/goose-cli/src/session/output.rs
index 9ce71800d5..c6265f74ea 100644
--- a/crates/goose-cli/src/session/output.rs
+++ b/crates/goose-cli/src/session/output.rs
@@ -219,6 +219,7 @@ fn render_tool_request(req: &ToolRequest, theme: Theme, debug: bool) {
         Ok(call) => match call.name.as_str() {
             "developer__text_editor" => render_text_editor_request(call, debug),
             "developer__shell" => render_shell_request(call, debug),
+            "dynamic_task__create_task" => render_dynamic_task_request(call, debug),
             _ => render_default_request(call, debug),
         },
         Err(e) => print_markdown(&e.to_string(), theme),
@@ -392,6 +393,37 @@ fn render_shell_request(call: &ToolCall, debug: bool) {
     }
 }
 
+fn render_dynamic_task_request(call: &ToolCall, debug: bool) {
+    print_tool_header(call);
+
+    // Print task_parameters array
+    if let Some(Value::Array(task_parameters)) = call.arguments.get("task_parameters") {
+        println!("{}:", style("task_parameters").dim());
+
+        for task_param in task_parameters.iter() {
+            println!("    -");
+
+            if let Some(param_obj) = task_param.as_object() {
+                for (key, value) in param_obj {
+                    match value {
+                        Value::String(s) => {
+                            // For strings, print the full content without truncation
+                            println!("        {}: {}", style(key).dim(), style(s).green());
+                        }
+                        _ => {
+                            // For everything else, use print_params
+                            print!("        ");
+                            print_params(value, 0, debug);
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    println!();
+}
+
 fn render_default_request(call: &ToolCall, debug: bool) {
     print_tool_header(call);
     print_params(&call.arguments, 0, debug);
@@ -463,26 +495,8 @@ fn print_params(value: &Value, depth: usize, debug: bool) {
                         }
                     }
                     Value::String(s) => {
-                        // Special handling for text_instruction to show more content
-                        let max_length = if key == "text_instruction" {
-                            200 // Allow longer display for text instructions
-                        } else {
-                            get_tool_params_max_length()
-                        };
-
-                        if !debug && s.len() > max_length {
-                            // For text instructions, show a preview instead of just "..."
-                            if key == "text_instruction" {
-                                let preview = &s[..max_length.saturating_sub(3)];
-                                println!(
-                                    "{}{}: {}",
-                                    indent,
-                                    style(key).dim(),
-                                    style(format!("{}...", preview)).green()
-                                );
-                            } else {
-                                println!("{}{}: {}", indent, style(key).dim(), style("...").dim());
-                            }
+                        if !debug && s.len() > get_tool_params_max_length() {
+                            println!("{}{}: {}", indent, style(key).dim(), style("...").dim());
                         } else {
                             println!("{}{}: {}", indent, style(key).dim(), style(s).green());
                         }
diff --git a/crates/goose/src/agents/agent.rs b/crates/goose/src/agents/agent.rs
index 0742ba33fe..c67ae89e57 100644
--- a/crates/goose/src/agents/agent.rs
+++ b/crates/goose/src/agents/agent.rs
@@ -75,8 +75,6 @@ pub struct Agent {
     pub(super) tool_monitor: Arc<Mutex<Option<ToolMonitor>>>,
     pub(super) router_tool_selector: Mutex<Option<Arc<Box<dyn RouterToolSelector>>>>,
     pub(super) scheduler_service: Mutex<Option<Arc<dyn SchedulerTrait>>>,
-    pub(super) mcp_tx: Mutex<mpsc::Sender<JsonRpcMessage>>,
-    pub(super) mcp_notification_rx: Arc<Mutex<mpsc::Receiver<JsonRpcMessage>>>,
     pub(super) retry_manager: RetryManager,
 }
 
@@ -132,8 +130,6 @@ impl Agent {
         // Create channels with buffer size 32 (adjust if needed)
         let (confirm_tx, confirm_rx) = mpsc::channel(32);
         let (tool_tx, tool_rx) = mpsc::channel(32);
-        // Add MCP notification channel
-        let (mcp_tx, mcp_rx) = mpsc::channel(100);
 
         let tool_monitor = Arc::new(Mutex::new(None));
         let retry_manager = RetryManager::with_tool_monitor(tool_monitor.clone());
@@ -154,9 +150,6 @@ impl Agent {
             tool_monitor,
             router_tool_selector: Mutex::new(None),
             scheduler_service: Mutex::new(None),
-            // Initialize with MCP notification support
-            mcp_tx: Mutex::new(mcp_tx),
-            mcp_notification_rx: Arc::new(Mutex::new(mcp_rx)),
             retry_manager,
         }
     }
@@ -342,9 +335,8 @@ impl Agent {
                 .await
         } else if tool_call.name == SUBAGENT_EXECUTE_TASK_TOOL_NAME {
             let provider = self.provider().await.ok();
-            let mcp_tx = self.mcp_tx.lock().await.clone();
 
-            let task_config = TaskConfig::new(provider, mcp_tx);
+            let task_config = TaskConfig::new(provider);
             subagent_execute_task_tool::run_tasks(
                 tool_call.arguments.clone(),
                 task_config,
@@ -771,24 +763,6 @@ impl Agent {
                     break;
                 }
 
-                // Handle MCP notifications from subagents
-                let mcp_notifications = self.get_mcp_notifications().await;
-                for notification in mcp_notifications {
-                    if let JsonRpcMessage::Notification(notif) = &notification {
-                        if let Some(data) = notif.notification.params.get("data") {
-                            if let (Some(subagent_id), Some(_message)) = (
-                                data.get("subagent_id").and_then(|v| v.as_str()),
-                                data.get("message").and_then(|v| v.as_str()),
-                            ) {
-                                yield AgentEvent::McpNotification((
-                                    subagent_id.to_string(),
-                                    notification.clone(),
-                                ));
-                            }
-                        }
-                    }
-                }
-
                 let mut stream = Self::stream_response_from_provider(
                     self.provider().await?,
                     &system_prompt,
@@ -1085,18 +1059,6 @@ impl Agent {
         prompt_manager.add_system_prompt_extra(instruction);
     }
 
-    /// Get MCP notifications from subagents
-    pub async fn get_mcp_notifications(&self) -> Vec<JsonRpcMessage> {
-        let mut notifications = Vec::new();
-        let mut rx = self.mcp_notification_rx.lock().await;
-
-        while let Ok(notification) = rx.try_recv() {
-            notifications.push(notification);
-        }
-
-        notifications
-    }
-
     pub async fn update_provider(&self, provider: Arc<dyn Provider>) -> Result<()> {
         let mut current_provider = self.provider.lock().await;
         *current_provider = Some(provider.clone());
diff --git a/crates/goose/src/agents/recipe_tools/dynamic_task_tools.rs b/crates/goose/src/agents/recipe_tools/dynamic_task_tools.rs
index e4705e7627..08866258e7 100644
--- a/crates/goose/src/agents/recipe_tools/dynamic_task_tools.rs
+++ b/crates/goose/src/agents/recipe_tools/dynamic_task_tools.rs
@@ -32,11 +32,8 @@ pub fn create_dynamic_task_tool() -> Tool {
                 text_instruction: Search for the config file in the root directory.
             Examples of 'task_parameters' for multiple tasks:
                 text_instruction: Get weather for Melbourne.
-                timeout_seconds: 300
                 text_instruction: Get weather for Los Angeles.
-                timeout_seconds: 300
                 text_instruction: Get weather for San Francisco.
-                timeout_seconds: 300
             ".to_string(),
         json!({
             "type": "object",
@@ -54,11 +51,6 @@ pub fn create_dynamic_task_tool() -> Tool {
                                 "type": "string",
                                 "description": "The text instruction to execute"
                             },
-                            "timeout_seconds": {
-                                "type": "integer",
-                                "description": "Optional timeout for the task in seconds (default: 300)",
-                                "minimum": 1
-                            }
                         },
                         "required": ["text_instruction"]
                     }
diff --git a/crates/goose/src/agents/subagent.rs b/crates/goose/src/agents/subagent.rs
index 40b7d9e4f2..d07030ab42 100644
--- a/crates/goose/src/agents/subagent.rs
+++ b/crates/goose/src/agents/subagent.rs
@@ -10,8 +10,6 @@ use crate::{
 use anyhow::anyhow;
 use chrono::{DateTime, Utc};
 use mcp_core::{handler::ToolError, tool::Tool};
-use rmcp::model::{JsonRpcMessage, JsonRpcNotification, JsonRpcVersion2_0, Notification};
-use rmcp::object;
 use serde::{Deserialize, Serialize};
 // use serde_json::{self};
 use std::{collections::HashMap, sync::Arc};
@@ -52,9 +50,7 @@ pub struct SubAgent {
 impl SubAgent {
     /// Create a new subagent with the given configuration and provider
     #[instrument(skip(task_config))]
-    pub async fn new(
-        task_config: TaskConfig,
-    ) -> Result<(Arc<Self>, tokio::task::JoinHandle<()>), anyhow::Error> {
+    pub async fn new(task_config: TaskConfig) -> Result<Arc<Self>, anyhow::Error> {
         debug!("Creating new subagent with id: {}", task_config.id);
 
         // Create a new extension manager for this subagent
@@ -90,21 +86,8 @@ impl SubAgent {
             extension_manager: Arc::new(RwLock::new(extension_manager)),
         });
 
-        // Send initial MCP notification
-        let subagent_clone = Arc::clone(&subagent);
-        subagent_clone
-            .send_mcp_notification("subagent_created", "Subagent created and ready")
-            .await;
-
-        // Create a background task handle (for future use with streaming/monitoring)
-        let subagent_clone = Arc::clone(&subagent);
-        let handle = tokio::spawn(async move {
-            // This could be used for background monitoring, cleanup, etc.
-            debug!("Subagent {} background task started", subagent_clone.id);
-        });
-
         debug!("Subagent {} created successfully", subagent.id);
-        Ok((subagent, handle))
+        Ok(subagent)
     }
 
     /// Get the current status of the subagent
@@ -119,51 +102,6 @@ impl SubAgent {
             let mut current_status = self.status.write().await;
             *current_status = status.clone();
         } // Write lock is released here!
-
-        // Send MCP notifications based on status
-        match &status {
-            SubAgentStatus::Processing => {
-                self.send_mcp_notification("status_changed", "Processing request")
-                    .await;
-            }
-            SubAgentStatus::Completed(msg) => {
-                self.send_mcp_notification("completed", &format!("Completed: {}", msg))
-                    .await;
-            }
-            SubAgentStatus::Terminated => {
-                self.send_mcp_notification("terminated", "Subagent terminated")
-                    .await;
-            }
-            _ => {}
-        }
-    }
-
-    /// Send an MCP notification about the subagent's activity
-    pub async fn send_mcp_notification(&self, notification_type: &str, message: &str) {
-        let notification = JsonRpcMessage::Notification(JsonRpcNotification {
-            jsonrpc: JsonRpcVersion2_0,
-            notification: Notification {
-                method: "notifications/message".to_string(),
-                params: object!({
-                    "level": "info",
-                    "logger": format!("subagent_{}", self.id),
-                    "data": {
-                        "subagent_id": self.id,
-                        "type": notification_type,
-                        "message": message,
-                        "timestamp": Utc::now().to_rfc3339()
-                    }
-                }),
-                extensions: Default::default(),
-            },
-        });
-
-        if let Err(e) = self.config.mcp_tx.send(notification).await {
-            error!(
-                "Failed to send MCP notification from subagent {}: {}",
-                self.id, e
-            );
-        }
     }
 
     /// Get current progress information
@@ -192,10 +130,8 @@ impl SubAgent {
         &self,
         message: String,
         task_config: TaskConfig,
-    ) -> Result<Message, anyhow::Error> {
+    ) -> Result<Vec<Message>, anyhow::Error> {
         debug!("Processing message for subagent {}", self.id);
-        self.send_mcp_notification("message_processing", &format!("Processing: {}", message))
-            .await;
 
         // Get provider from task config
         let provider = self
@@ -234,6 +170,7 @@ impl SubAgent {
         // Generate response from provider with loop for tool processing (max_turns iterations)
         let mut loop_count = 0;
         let max_turns = self.config.max_turns.unwrap_or(DEFAULT_SUBAGENT_MAX_TURNS);
+        let mut last_error: Option<anyhow::Error> = None;
 
         // Generate response from provider
         loop {
@@ -265,18 +202,12 @@ impl SubAgent {
                     // If there are no tool requests, we're done
                     if tool_requests.is_empty() || loop_count >= max_turns {
                         self.add_message(response.clone()).await;
+                        messages.push(response.clone());
 
-                        // Send notification about response
-                        self.send_mcp_notification(
-                            "response_generated",
-                            &format!("Responded: {}", response.as_concat_text()),
-                        )
-                        .await;
-
-                        // Set status back to ready and return the final response
+                        // Set status back to ready
                         self.set_status(SubAgentStatus::Completed("Completed!".to_string()))
                             .await;
-                        break Ok(response);
+                        break;
                     }
 
                     // Add the assistant message with tool calls to the conversation
@@ -285,13 +216,6 @@ impl SubAgent {
                     // Process each tool request and create user response messages
                     for request in &tool_requests {
                         if let Ok(tool_call) = &request.tool_call {
-                            // Send notification about tool usage
-                            self.send_mcp_notification(
-                                "tool_usage",
-                                &format!("Using tool: {}", tool_call.name),
-                            )
-                            .await;
-
                             // Handle platform tools or dispatch to extension manager
                             let tool_result = match self
                                 .extension_manager
@@ -310,13 +234,6 @@ impl SubAgent {
                                     let tool_response_message = Message::user()
                                         .with_tool_response(request.id.clone(), Ok(result.clone()));
                                     messages.push(tool_response_message);
-
-                                    // Send notification about tool completion
-                                    self.send_mcp_notification(
-                                        "tool_completed",
-                                        &format!("Tool {} completed successfully", tool_call.name),
-                                    )
-                                    .await;
                                 }
                                 Err(e) => {
                                     // Create a user message with the tool error
@@ -325,13 +242,6 @@ impl SubAgent {
                                         Err(ToolError::ExecutionError(e.to_string())),
                                     );
                                     messages.push(tool_error_message);
-
-                                    // Send notification about tool error
-                                    self.send_mcp_notification(
-                                        "tool_error",
-                                        &format!("Tool {} error: {}", tool_call.name, e),
-                                    )
-                                    .await;
                                 }
                             }
                         }
@@ -344,24 +254,31 @@ impl SubAgent {
                         "Context length exceeded".to_string(),
                     ))
                     .await;
-                    break Ok(Message::assistant().with_context_length_exceeded(
-                        "The context length of the model has been exceeded. Please start a new session and try again.",
-                    ));
+                    last_error = Some(anyhow::anyhow!("Context length exceeded"));
+                    break;
                 }
                 Err(ProviderError::RateLimitExceeded(_)) => {
                     self.set_status(SubAgentStatus::Completed("Rate limit exceeded".to_string()))
                         .await;
-                    break Ok(Message::assistant()
-                        .with_text("Rate limit exceeded. Please try again later."));
+                    last_error = Some(anyhow::anyhow!("Rate limit exceeded"));
+                    break;
                 }
                 Err(e) => {
                     self.set_status(SubAgentStatus::Completed(format!("Error: {}", e)))
                         .await;
                     error!("Error: {}", e);
-                    break Ok(Message::assistant().with_text(format!("Ran into this error: {e}.\n\nPlease retry if you think this is a transient or recoverable error.")));
+                    last_error = Some(anyhow::anyhow!("Provider error: {}", e));
+                    break;
                 }
             }
         }
+
+        // Handle error cases or return the last message
+        if let Some(error) = last_error {
+            Err(error)
+        } else {
+            Ok(messages)
+        }
     }
 
     /// Add a message to the conversation (for tracking agent responses)
diff --git a/crates/goose/src/agents/subagent_execution_tool/task_execution_tracker.rs b/crates/goose/src/agents/subagent_execution_tool/task_execution_tracker.rs
index 7d6854b3e2..3610ea78c4 100644
--- a/crates/goose/src/agents/subagent_execution_tool/task_execution_tracker.rs
+++ b/crates/goose/src/agents/subagent_execution_tool/task_execution_tracker.rs
@@ -40,18 +40,8 @@ fn format_task_metadata(task_info: &TaskInfo) -> String {
             })
             .collect::<Vec<_>>()
             .join(",")
-    } else if task_info.task.task_type == "text_instruction" {
-        // For text_instruction tasks, extract and display the instruction
-        if let Some(text_instruction) = task_info.task.get_text_instruction() {
-            // Truncate long instructions to keep the display clean
-            if text_instruction.len() > 80 {
-                format!("instruction={}...", &text_instruction[..77])
-            } else {
-                format!("instruction={}", text_instruction)
-            }
-        } else {
-            String::new()
-        }
+    } else if let Some(text_instruction) = task_info.task.get_text_instruction() {
+        format!("instruction={}", text_instruction)
     } else {
         String::new()
     }
diff --git a/crates/goose/src/agents/subagent_execution_tool/tasks.rs b/crates/goose/src/agents/subagent_execution_tool/tasks.rs
index 64ee4ff246..a363f6d30c 100644
--- a/crates/goose/src/agents/subagent_execution_tool/tasks.rs
+++ b/crates/goose/src/agents/subagent_execution_tool/tasks.rs
@@ -1,5 +1,4 @@
 use serde_json::Value;
-use std::ops::Deref;
 use std::process::Stdio;
 use std::sync::Arc;
 use tokio::io::{AsyncBufReadExt, BufReader};
@@ -89,37 +88,16 @@ async fn handle_text_instruction_task(
     // Start tracking the task
     task_execution_tracker.start_task(&task.id).await;
 
-    // Create arguments for the subagent task
-    let task_arguments = serde_json::json!({
-        "text_instruction": text_instruction,
-        // "instructions": "You are a helpful assistant. Execute the given task and provide a clear, concise response.",
-    });
-
     let result = tokio::select! {
-        result = run_complete_subagent_task(task_arguments, task_config) => result,
+        result = run_complete_subagent_task(text_instruction.to_string(), task_config) => result,
         _ = cancellation_token.cancelled() => {
             return Err("Task cancelled".to_string());
         }
     };
-
     match result {
-        Ok(contents) => {
-            // Extract the text content from the result
-            let result_text = contents
-                .into_iter()
-                .filter_map(|content| match content.deref() {
-                    rmcp::model::RawContent::Text(raw_text_content) => {
-                        Some(raw_text_content.text.clone())
-                    }
-                    _ => None,
-                })
-                .collect::<Vec<_>>()
-                .join("\n");
-
-            Ok(serde_json::json!({
-                "result": result_text
-            }))
-        }
+        Ok(result_text) => Ok(serde_json::json!({
+            "result": result_text
+        })),
         Err(e) => {
             let error_msg = format!("Subagent execution failed: {}", e);
             Err(error_msg)
diff --git a/crates/goose/src/agents/subagent_handler.rs b/crates/goose/src/agents/subagent_handler.rs
index 6fadd24760..bf3b66cc40 100644
--- a/crates/goose/src/agents/subagent_handler.rs
+++ b/crates/goose/src/agents/subagent_handler.rs
@@ -2,43 +2,63 @@ use crate::agents::subagent::SubAgent;
 use crate::agents::subagent_task_config::TaskConfig;
 use anyhow::Result;
 use mcp_core::ToolError;
-use rmcp::model::Content;
-use serde_json::Value;
 
 /// Standalone function to run a complete subagent task
 pub async fn run_complete_subagent_task(
-    task_arguments: Value,
+    text_instruction: String,
     task_config: TaskConfig,
-) -> Result<Vec<Content>, ToolError> {
-    // Parse arguments - using "task" as the main message parameter
-    let text_instruction = task_arguments
-        .get("text_instruction")
-        .and_then(|v| v.as_str())
-        .ok_or_else(|| ToolError::ExecutionError("Missing text_instruction parameter".to_string()))?
-        .to_string();
-
+) -> Result<String, anyhow::Error> {
     // Create the subagent with the parent agent's provider
-    let (subagent, handle) = SubAgent::new(task_config.clone())
+    let subagent = SubAgent::new(task_config.clone())
         .await
         .map_err(|e| ToolError::ExecutionError(format!("Failed to create subagent: {}", e)))?;
 
     // Execute the subagent task
-    let result = match subagent.reply_subagent(text_instruction, task_config).await {
-        Ok(response) => {
-            let response_text = response.as_concat_text();
-            Ok(vec![Content::text(response_text)])
-        }
-        Err(e) => Err(ToolError::ExecutionError(format!(
-            "Subagent execution failed: {}",
-            e
-        ))),
-    };
+    let messages = subagent
+        .reply_subagent(text_instruction, task_config)
+        .await?;
+
+    // Extract all text content from all messages
+    let all_text_content: Vec<String> = messages
+        .iter()
+        .flat_map(|message| {
+            message.content.iter().filter_map(|content| {
+                match content {
+                    crate::message::MessageContent::Text(text_content) => {
+                        Some(text_content.text.clone())
+                    }
+                    crate::message::MessageContent::ToolResponse(tool_response) => {
+                        // Extract text from tool response
+                        if let Ok(contents) = &tool_response.tool_result {
+                            let texts: Vec<String> = contents
+                                .iter()
+                                .filter_map(|content| {
+                                    if let rmcp::model::RawContent::Text(raw_text_content) =
+                                        &content.raw
+                                    {
+                                        Some(raw_text_content.text.clone())
+                                    } else {
+                                        None
+                                    }
+                                })
+                                .collect();
+                            if !texts.is_empty() {
+                                Some(format!("Tool result: {}", texts.join("\n")))
+                            } else {
+                                None
+                            }
+                        } else {
+                            None
+                        }
+                    }
+                    _ => None,
+                }
+            })
+        })
+        .collect();
 
-    // Clean up the subagent handle
-    if let Err(e) = handle.await {
-        tracing::debug!("Subagent handle cleanup error: {}", e);
-    }
+    let response_text = all_text_content.join("\n");
 
     // Return the result
-    result
+    Ok(response_text)
 }
diff --git a/crates/goose/src/agents/subagent_task_config.rs b/crates/goose/src/agents/subagent_task_config.rs
index cbbc782167..5a00462929 100644
--- a/crates/goose/src/agents/subagent_task_config.rs
+++ b/crates/goose/src/agents/subagent_task_config.rs
@@ -1,9 +1,7 @@
 use crate::providers::base::Provider;
-use rmcp::model::JsonRpcMessage;
 use std::env;
 use std::fmt;
 use std::sync::Arc;
-use tokio::sync::mpsc;
 use uuid::Uuid;
 
 /// Default maximum number of turns for task execution
@@ -17,7 +15,6 @@ pub const GOOSE_SUBAGENT_MAX_TURNS_ENV_VAR: &str = "GOOSE_SUBAGENT_MAX_TURNS";
 pub struct TaskConfig {
     pub id: String,
     pub provider: Option<Arc<dyn Provider>>,
-    pub mcp_tx: mpsc::Sender<JsonRpcMessage>,
     pub max_turns: Option<usize>,
 }
 
@@ -33,11 +30,10 @@ impl fmt::Debug for TaskConfig {
 
 impl TaskConfig {
     /// Create a new TaskConfig with all required dependencies
-    pub fn new(provider: Option<Arc<dyn Provider>>, mcp_tx: mpsc::Sender<JsonRpcMessage>) -> Self {
+    pub fn new(provider: Option<Arc<dyn Provider>>) -> Self {
         Self {
             id: Uuid::new_v4().to_string(),
             provider,
-            mcp_tx,
             max_turns: Some(
                 env::var(GOOSE_SUBAGENT_MAX_TURNS_ENV_VAR)
                     .ok()
@@ -51,9 +47,4 @@ impl TaskConfig {
     pub fn provider(&self) -> Option<&Arc<dyn Provider>> {
         self.provider.as_ref()
     }
-
-    /// Get a clone of the MCP sender
-    pub fn mcp_tx(&self) -> mpsc::Sender<JsonRpcMessage> {
-        self.mcp_tx.clone()
-    }
 }
diff --git a/crates/goose/src/prompts/subagent_system.md b/crates/goose/src/prompts/subagent_system.md
index 1cb4794472..2dd1983fdb 100644
--- a/crates/goose/src/prompts/subagent_system.md
+++ b/crates/goose/src/prompts/subagent_system.md
@@ -1,76 +1,35 @@
-You are a specialized subagent within the Goose AI framework, created by Block, the parent company of Square, CashApp, and Tidal. Goose is being developed as an open-source software project. You were spawned by the main Goose agent to handle a specific task or set of operations.
+You are a specialized subagent within the Goose AI framework, created by Block. You were spawned by the main Goose agent to handle a specific task efficiently. The current date is {{current_date_time}}.
 
-The current date is {{current_date_time}}.
-
-You use LLM providers with tool calling capability. You can be used with different language models (gpt-4o, claude-3.5-sonnet, o1, llama-3.2, deepseek-r1, etc). These models have varying knowledge cut-off dates depending on when they were trained, but typically it's between 5-10 months prior to the current date.
-
-# Your Role as a Subagent
-
-You are an autonomous subagent with the following characteristics:
-- **Independence**: You can make decisions and execute tools within your scope
-- **Specialization**: You focus on specific tasks assigned by the main Goose agent
-- **Collaboration**: You report progress and results back to the main Goose agent
-- **Bounded Operation**: You operate within defined limits (turn count, timeout, specific instructions)
-- **Security**: You cannot spawn additional subagents to prevent infinite recursion and maintain system stability
+# Your Role
+You are an autonomous subagent with these characteristics:
+- **Independence**: Make decisions and execute tools within your scope
+- **Specialization**: Focus on specific tasks assigned by the main agent
+- **Efficiency**: Use tools sparingly and only when necessary
+- **Bounded Operation**: Operate within defined limits (turn count, timeout)
+- **Security**: Cannot spawn additional subagents
+The maximum number of turns to respond is {{max_turns}}.
 
 {% if subagent_id is defined %}
 **Subagent ID**: {{subagent_id}}
 {% endif %}
-{% if recipe_title is defined %}
-**Recipe**: {{recipe_title}}
-{% endif %}
-{% if max_turns is defined %}
-**Maximum Turns**: {{max_turns}}
-{% endif %}
 
 # Task Instructions
-
 {{task_instructions}}
 
-# Extensions and Tools
-
-Extensions allow other applications to provide context to you. Extensions connect you to different data sources and tools. You are capable of using tools from these extensions to solve higher level problems and can interact with multiple at once.
-
-{% if recipe_title is defined %}
-**Recipe Mode**: You are operating with a specific recipe that defines which extensions and tools you can use. This focused approach helps you stay on task and work efficiently within your defined scope.
-
-{% if (extensions is defined) and extensions %}
-You have access to the following recipe-specific extensions ({{extensions|length}} extension{% if extensions|length > 1 %}s{% endif %}). Each of these extensions provides tools that are in your tool specification:
+# Tool Usage Guidelines
+**CRITICAL**: Be efficient with tool usage. Use tools only when absolutely necessary to complete your task. Here are the available tools you have access to:
+You have access to {{tool_count}} tools: {{available_tools}}
 
-{% for extension in extensions %}
-- {{extension}}
-{% endfor %}
-
-You have {{tool_count}} tool{% if tool_count > 1 %}s{% endif %} available: {{available_tools}}
-{% else %}
-Your recipe doesn't specify any extensions, so you have access to the basic tool set.
-
-You have {{tool_count}} tool{% if tool_count > 1 %}s{% endif %} available: {{available_tools}}
-{% endif %}
-{% else %}
-**Inheritance Mode**: You inherit all available extensions and tools from the parent Goose agent. You can use all the tools that were available to the parent agent when you were created.
-
-You have {{tool_count}} tool{% if tool_count > 1 %}s{% endif %} available: {{available_tools}}
-{% endif %}
+**Tool Efficiency Rules**:
+- Use the minimum number of tools needed to complete your task
+- Avoid exploratory tool usage unless explicitly required
+- Stop using tools once you have sufficient information
+- Provide clear, concise responses without excessive tool calls
 
 # Communication Guidelines
+- **Progress Updates**: Report progress clearly and concisely
+- **Completion**: Clearly indicate when your task is complete
+- **Scope**: Stay focused on your assigned task
+- **Format**: Use Markdown formatting for responses
 
-- **Progress Updates**: Regularly communicate your progress on the assigned task
-- **Completion Reporting**: Clearly indicate when your task is complete and provide results
-- **Error Handling**: Report any issues or limitations you encounter
-- **Scope Awareness**: Stay focused on your assigned task and don't exceed your defined boundaries
-
-# Response Guidelines
-
-- Use Markdown formatting for all responses.
-- Follow best practices for Markdown, including:
-  - Using headers for organization.
-  - Bullet points for lists.
-  - Links formatted correctly, either as linked text (e.g., [this is linked text](https://example.com)) or automatic links using angle brackets (e.g., <http://example.com/>).
-- For code examples, use fenced code blocks by placing triple backticks (` ``` `) before and after the code. Include the language identifier after the opening backticks (e.g., ` ```python `) to enable syntax highlighting.
-- Ensure clarity, conciseness, and proper formatting to enhance readability and usability.
-- Be task-focused in your communications and provide clear status updates about your progress.
-- When completing tasks, summarize what was accomplished.
-- If you encounter limitations or need clarification, communicate this clearly.
-
-Remember: You are part of a larger Goose system working collaboratively to solve complex problems. Your specialized focus helps the main agent handle multiple concerns efficiently. 
\ No newline at end of file
+Remember: You are part of a larger system. Your specialized focus helps the main agent handle multiple concerns efficiently. Complete your task efficiently with less tool usage.
\ No newline at end of file
-- 
2.34.1


From b4fc6f7cc87d275a215ed482aed885c686731693 Mon Sep 17 00:00:00 2001
From: Alex Hancock <alexhancock@block.xyz>
Date: Thu, 24 Jul 2025 14:58:14 -0400
Subject: [PATCH 08/12] alexhancock/rmcp-tools-annotations (#3617)

---
 crates/goose-cli/src/commands/configure.rs    |  34 +--
 .../goose-mcp/src/computercontroller/mod.rs   |  59 ++---
 crates/goose-mcp/src/developer/mod.rs         | 130 ++++-----
 crates/goose-mcp/src/google_drive/mod.rs      | 250 +++++++++---------
 crates/goose-mcp/src/memory/mod.rs            |  80 +++---
 crates/goose-mcp/src/tutorial/mod.rs          |  25 +-
 crates/goose-server/src/routes/agent.rs       |   5 +-
 crates/goose-server/src/routes/extension.rs   |   3 +-
 crates/goose-server/src/routes/reply.rs       |   3 +-
 crates/goose/examples/image_tool.rs           |   9 +-
 crates/goose/src/agents/agent.rs              |  12 +-
 crates/goose/src/agents/extension.rs          |   2 +-
 crates/goose/src/agents/extension_manager.rs  |  23 +-
 crates/goose/src/agents/final_output_tool.rs  |  29 +-
 crates/goose/src/agents/platform_tools.rs     |  92 +++----
 .../agents/recipe_tools/dynamic_task_tools.rs |  24 +-
 .../agents/recipe_tools/sub_recipe_tools.rs   |  24 +-
 crates/goose/src/agents/reply_parts.rs        |   8 +-
 .../goose/src/agents/router_tool_selector.rs  |  25 +-
 crates/goose/src/agents/router_tools.rs       |  42 ++-
 crates/goose/src/agents/sub_recipe_manager.rs |   3 +-
 crates/goose/src/agents/subagent.rs           |   9 +-
 .../subagent_execute_task_tool.rs             |  48 ++--
 crates/goose/src/agents/types.rs              |   4 +-
 crates/goose/src/context_mgmt/common.rs       |   2 +-
 crates/goose/src/context_mgmt/summarize.rs    |   2 +-
 .../goose/src/permission/permission_judge.rs  |  35 +--
 crates/goose/src/providers/anthropic.rs       |   2 +-
 crates/goose/src/providers/azure.rs           |   2 +-
 crates/goose/src/providers/base.rs            |   2 +-
 crates/goose/src/providers/bedrock.rs         |   2 +-
 crates/goose/src/providers/claude_code.rs     |   2 +-
 crates/goose/src/providers/databricks.rs      |   2 +-
 crates/goose/src/providers/factory.rs         |   2 +-
 .../goose/src/providers/formats/anthropic.rs  |  11 +-
 crates/goose/src/providers/formats/bedrock.rs |  13 +-
 .../goose/src/providers/formats/databricks.rs |  16 +-
 .../src/providers/formats/gcpvertexai.rs      |   2 +-
 crates/goose/src/providers/formats/google.rs  | 248 ++++++++---------
 crates/goose/src/providers/formats/openai.rs  |  16 +-
 .../goose/src/providers/formats/snowflake.rs  |  17 +-
 crates/goose/src/providers/gcpvertexai.rs     |   2 +-
 crates/goose/src/providers/gemini_cli.rs      |   2 +-
 crates/goose/src/providers/githubcopilot.rs   |   2 +-
 crates/goose/src/providers/google.rs          |   2 +-
 crates/goose/src/providers/groq.rs            |   2 +-
 crates/goose/src/providers/lead_worker.rs     |   2 +-
 crates/goose/src/providers/litellm.rs         |   2 +-
 crates/goose/src/providers/ollama.rs          |   2 +-
 crates/goose/src/providers/openai.rs          |   2 +-
 crates/goose/src/providers/openrouter.rs      |   2 +-
 crates/goose/src/providers/sagemaker_tgi.rs   |   2 +-
 crates/goose/src/providers/snowflake.rs       |   2 +-
 crates/goose/src/providers/testprovider.rs    |   2 +-
 crates/goose/src/providers/toolshim.rs        |   6 +-
 crates/goose/src/providers/venice.rs          |   4 +-
 crates/goose/src/providers/xai.rs             |   2 +-
 crates/goose/src/scheduler.rs                 |   2 +-
 crates/goose/src/session/info.rs              |   1 -
 crates/goose/src/token_counter.rs             |  43 +--
 crates/goose/tests/agent.rs                   |  13 +-
 crates/goose/tests/providers.rs               |   9 +-
 crates/mcp-core/src/protocol.rs               |   2 +-
 crates/mcp-server/src/main.rs                 |  62 ++---
 crates/mcp-server/src/router.rs               |   2 +-
 65 files changed, 765 insertions(+), 726 deletions(-)

diff --git a/crates/goose-cli/src/commands/configure.rs b/crates/goose-cli/src/commands/configure.rs
index 5c8d6c6068..3a8e792ee5 100644
--- a/crates/goose-cli/src/commands/configure.rs
+++ b/crates/goose-cli/src/commands/configure.rs
@@ -15,9 +15,9 @@ use goose::config::{
 };
 use goose::message::Message;
 use goose::providers::{create, providers};
-use mcp_core::tool::ToolAnnotations;
-use mcp_core::Tool;
-use serde_json::{json, Value};
+use rmcp::model::{Tool, ToolAnnotations};
+use rmcp::object;
+use serde_json::Value;
 use std::collections::HashMap;
 use std::error::Error;
 
@@ -387,21 +387,21 @@ pub async fn configure_provider_dialog() -> Result<bool, Box<dyn Error>> {
         let sample_tool = Tool::new(
             "get_weather".to_string(),
             "Get current temperature for a given location.".to_string(),
-            json!({
+            object!({
                 "type": "object",
                 "required": ["location"],
                 "properties": {
                     "location": {"type": "string"}
                 }
             }),
-            Some(ToolAnnotations {
-                title: Some("Get weather".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("Get weather".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
         vec![sample_tool]
     } else {
         vec![]
@@ -411,9 +411,8 @@ pub async fn configure_provider_dialog() -> Result<bool, Box<dyn Error>> {
         .complete(
             "You are an AI agent called Goose. You use tools of connected extensions to solve problems.",
             &messages,
-            &tools
-        )
-        .await;
+            &tools.into_iter().collect::<Vec<_>>()
+        ).await;
 
     match result {
         Ok((_message, _usage)) => {
@@ -1270,7 +1269,10 @@ pub async fn configure_tool_permissions_dialog() -> Result<(), Box<dyn Error>> {
         .map(|tool| {
             ToolInfo::new(
                 &tool.name,
-                &tool.description,
+                tool.description
+                    .as_ref()
+                    .map(|d| d.as_ref())
+                    .unwrap_or_default(),
                 get_parameter_names(&tool),
                 permission_manager.get_user_permission(&tool.name),
             )
diff --git a/crates/goose-mcp/src/computercontroller/mod.rs b/crates/goose-mcp/src/computercontroller/mod.rs
index 6090f6d587..d6d281adc4 100644
--- a/crates/goose-mcp/src/computercontroller/mod.rs
+++ b/crates/goose-mcp/src/computercontroller/mod.rs
@@ -2,7 +2,7 @@ use base64::Engine;
 use etcetera::{choose_app_strategy, AppStrategy};
 use indoc::{formatdoc, indoc};
 use reqwest::{Client, Url};
-use serde_json::{json, Value};
+use serde_json::Value;
 use std::{
     collections::HashMap, fs, future::Future, path::PathBuf, pin::Pin, sync::Arc, sync::Mutex,
 };
@@ -14,11 +14,13 @@ use std::os::unix::fs::PermissionsExt;
 use mcp_core::{
     handler::{PromptError, ResourceError, ToolError},
     protocol::ServerCapabilities,
-    tool::{Tool, ToolAnnotations},
 };
 use mcp_server::router::CapabilitiesBuilder;
 use mcp_server::Router;
-use rmcp::model::{AnnotateAble, Content, JsonRpcMessage, Prompt, RawResource, Resource};
+use rmcp::model::{
+    AnnotateAble, Content, JsonRpcMessage, Prompt, RawResource, Resource, Tool, ToolAnnotations,
+};
+use rmcp::object;
 
 mod docx_tool;
 mod pdf_tool;
@@ -58,7 +60,7 @@ impl ComputerControllerRouter {
                 The content is cached locally and can be accessed later using the cache_path
                 returned in the response.
             "#},
-            json!({
+            object!({
                 "type": "object",
                 "required": ["url"],
                 "properties": {
@@ -74,14 +76,14 @@ impl ComputerControllerRouter {
                     }
                 }
             }),
-            Some(ToolAnnotations {
-                title: Some("Web Scrape".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: true,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("Web Scrape".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(true),
+        });
 
         let computer_control_desc = match std::env::consts::OS {
             "windows" => indoc! {r#"
@@ -131,7 +133,7 @@ impl ComputerControllerRouter {
         let computer_control_tool = Tool::new(
             "computer_control",
             computer_control_desc.to_string(),
-            json!({
+            object!({
                 "type": "object",
                 "required": ["script"],
                 "properties": {
@@ -146,7 +148,6 @@ impl ComputerControllerRouter {
                     }
                 }
             }),
-            None,
         );
 
         let quick_script_desc = match std::env::consts::OS {
@@ -177,7 +178,7 @@ impl ComputerControllerRouter {
         let quick_script_tool = Tool::new(
             "automation_script",
             quick_script_desc.to_string(),
-            json!({
+            object!({
                 "type": "object",
                 "required": ["language", "script"],
                 "properties": {
@@ -197,7 +198,6 @@ impl ComputerControllerRouter {
                     }
                 }
             }),
-            None,
         );
 
         let cache_tool = Tool::new(
@@ -209,7 +209,7 @@ impl ComputerControllerRouter {
                 - delete: Delete a cached file
                 - clear: Clear all cached files
             "#},
-            json!({
+            object!({
                 "type": "object",
                 "required": ["command"],
                 "properties": {
@@ -224,7 +224,6 @@ impl ComputerControllerRouter {
                     }
                 }
             }),
-            None,
         );
 
         let pdf_tool = Tool::new(
@@ -237,7 +236,7 @@ impl ComputerControllerRouter {
 
                 Use this when there is a .pdf file or files that need to be processed.
             "#},
-            json!({
+            object!({
                 "type": "object",
                 "required": ["path", "operation"],
                 "properties": {
@@ -252,14 +251,14 @@ impl ComputerControllerRouter {
                     }
                 }
             }),
-            Some(ToolAnnotations {
-                title: Some("PDF process".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: true,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("PDF process".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(true),
+            open_world_hint: Some(false),
+        });
 
         let docx_tool = Tool::new(
             "docx_tool",
@@ -276,7 +275,7 @@ impl ComputerControllerRouter {
 
                 Use this when there is a .docx file that needs to be processed or created.
             "#},
-            json!({
+            object!({
                 "type": "object",
                 "required": ["path", "operation"],
                 "properties": {
@@ -357,7 +356,6 @@ impl ComputerControllerRouter {
                     }
                 }
             }),
-            None,
         );
 
         let xlsx_tool = Tool::new(
@@ -375,7 +373,7 @@ impl ComputerControllerRouter {
 
                 Use this when working with Excel spreadsheets to analyze or modify data.
             "#},
-            json!({
+            object!({
                 "type": "object",
                 "required": ["path", "operation"],
                 "properties": {
@@ -419,7 +417,6 @@ impl ComputerControllerRouter {
                     }
                 }
             }),
-            None,
         );
 
         // choose_app_strategy().cache_dir()
diff --git a/crates/goose-mcp/src/developer/mod.rs b/crates/goose-mcp/src/developer/mod.rs
index 3344905d9a..814a16b97d 100644
--- a/crates/goose-mcp/src/developer/mod.rs
+++ b/crates/goose-mcp/src/developer/mod.rs
@@ -6,7 +6,7 @@ use anyhow::Result;
 use base64::Engine;
 use etcetera::{choose_app_strategy, AppStrategy};
 use indoc::formatdoc;
-use serde_json::{json, Value};
+use serde_json::Value;
 use std::{
     collections::HashMap,
     future::Future,
@@ -25,7 +25,6 @@ use include_dir::{include_dir, Dir};
 use mcp_core::{
     handler::{PromptError, ResourceError, ToolError},
     protocol::ServerCapabilities,
-    tool::{Tool, ToolAnnotations},
 };
 
 use mcp_server::router::CapabilitiesBuilder;
@@ -33,7 +32,7 @@ use mcp_server::Router;
 
 use rmcp::model::{
     Content, JsonRpcMessage, JsonRpcNotification, JsonRpcVersion2_0, Notification, Prompt,
-    PromptArgument, PromptTemplate, Resource, Role,
+    PromptArgument, PromptTemplate, Resource, Role, Tool, ToolAnnotations,
 };
 use rmcp::object;
 
@@ -166,14 +165,13 @@ impl DeveloperRouter {
         let bash_tool = Tool::new(
             "shell".to_string(),
             shell_tool_desc.to_string(),
-            json!({
+            object!({
                 "type": "object",
                 "required": ["command"],
                 "properties": {
                     "command": {"type": "string"}
                 }
             }),
-            None,
         );
 
         let glob_tool = Tool::new(
@@ -193,22 +191,21 @@ impl DeveloperRouter {
                 
                 Use this tool when you need to locate files by name patterns rather than content.
             "#}.to_string(),
-            json!({
+            object!({
                 "type": "object",
                 "required": ["pattern"],
                 "properties": {
                     "pattern": {"type": "string", "description": "The glob pattern to search for"},
                     "path": {"type": "string", "description": "The directory to search in (defaults to current directory)"}
                 }
-            }),
-            Some(ToolAnnotations {
-                title: Some("Search files by pattern".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: true,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Search files by pattern".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(true),
+            open_world_hint: Some(false),
+        });
 
         let grep_tool = Tool::new(
             "grep".to_string(),
@@ -242,21 +239,20 @@ impl DeveloperRouter {
                 properly filters results to respect ignored files.
             "#}
             .to_string(),
-            json!({
+            object!({
                 "type": "object",
                 "required": ["command"],
                 "properties": {
                     "command": {"type": "string", "description": "The search command to execute (rg, grep, find, etc.)"}
                 }
-            }),
-            Some(ToolAnnotations {
-                title: Some("Search file contents".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: true,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Search file contents".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(true),
+            open_world_hint: Some(false),
+        });
 
         // Create text editor tool with different descriptions based on editor API configuration
         let (text_editor_desc, str_replace_command) = if let Some(ref editor) = editor_model {
@@ -307,7 +303,7 @@ impl DeveloperRouter {
         let text_editor_tool = Tool::new(
             "text_editor".to_string(),
             text_editor_desc.to_string(),
-            json!({
+            object!({
                 "type": "object",
                 "required": ["command", "path"],
                 "properties": {
@@ -336,7 +332,6 @@ impl DeveloperRouter {
                     "file_text": {"type": "string"}
                 }
             }),
-            None,
         );
 
         let list_windows_tool = Tool::new(
@@ -346,19 +341,19 @@ impl DeveloperRouter {
                 Returns a list of window titles that can be used with the window_title parameter
                 of the screen_capture tool.
             "#},
-            json!({
+            object!({
                 "type": "object",
                 "required": [],
                 "properties": {}
             }),
-            Some(ToolAnnotations {
-                title: Some("List available windows".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("List available windows".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let screen_capture_tool = Tool::new(
             "screen_capture",
@@ -370,7 +365,7 @@ impl DeveloperRouter {
 
                 Only one of display or window_title should be specified.
             "#},
-            json!({
+            object!({
                 "type": "object",
                 "required": [],
                 "properties": {
@@ -385,15 +380,14 @@ impl DeveloperRouter {
                         "description": "Optional: the exact title of the window to capture. use the list_windows tool to find the available windows."
                     }
                 }
-            }),
-            Some(ToolAnnotations {
-                title: Some("Capture a full screen".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Capture a full screen".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let image_processor_tool = Tool::new(
             "image_processor",
@@ -405,7 +399,7 @@ impl DeveloperRouter {
 
                 This allows processing image files for use in the conversation.
             "#},
-            json!({
+            object!({
                 "type": "object",
                 "required": ["path"],
                 "properties": {
@@ -415,14 +409,14 @@ impl DeveloperRouter {
                     }
                 }
             }),
-            Some(ToolAnnotations {
-                title: Some("Process Image".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: true,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("Process Image".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(true),
+            open_world_hint: Some(false),
+        });
 
         // Get base instructions and working directory
         let cwd = std::env::current_dir().expect("should have a current working dir");
@@ -2342,20 +2336,34 @@ mod tests {
         // Should use traditional description with str_replace command
         assert!(text_editor_tool
             .description
-            .contains("Replace a string in a file with a new string"));
+            .as_ref()
+            .map_or(false, |desc| desc
+                .contains("Replace a string in a file with a new string")));
+        assert!(text_editor_tool
+            .description
+            .as_ref()
+            .map_or(false, |desc| desc
+                .contains("the `old_str` needs to exactly match one")));
         assert!(text_editor_tool
             .description
-            .contains("the `old_str` needs to exactly match one"));
-        assert!(text_editor_tool.description.contains("str_replace"));
+            .as_ref()
+            .map_or(false, |desc| desc.contains("str_replace")));
 
         // Should not contain editor API description or edit_file command
         assert!(!text_editor_tool
             .description
-            .contains("Edit the file with the new content"));
-        assert!(!text_editor_tool.description.contains("edit_file"));
+            .as_ref()
+            .map_or(false, |desc| desc
+                .contains("Edit the file with the new content")));
+        assert!(!text_editor_tool
+            .description
+            .as_ref()
+            .map_or(false, |desc| desc.contains("edit_file")));
         assert!(!text_editor_tool
             .description
-            .contains("work out how to place old_str with it intelligently"));
+            .as_ref()
+            .map_or(false, |desc| desc
+                .contains("work out how to place old_str with it intelligently")));
 
         temp_dir.close().unwrap();
     }
diff --git a/crates/goose-mcp/src/google_drive/mod.rs b/crates/goose-mcp/src/google_drive/mod.rs
index 4ad8aeb27c..b3f235dd6a 100644
--- a/crates/goose-mcp/src/google_drive/mod.rs
+++ b/crates/goose-mcp/src/google_drive/mod.rs
@@ -7,17 +7,18 @@ use base64::Engine;
 use chrono::NaiveDate;
 use indoc::indoc;
 use lazy_static::lazy_static;
-use mcp_core::tool::ToolAnnotations;
 use mcp_core::{
     handler::{PromptError, ResourceError, ToolError},
     protocol::ServerCapabilities,
-    tool::Tool,
 };
 use mcp_server::router::CapabilitiesBuilder;
 use mcp_server::Router;
 use oauth_pkce::PkceOAuth2Client;
 use regex::Regex;
-use rmcp::model::{AnnotateAble, Content, JsonRpcMessage, Prompt, RawResource, Resource};
+use rmcp::model::{
+    AnnotateAble, Content, JsonRpcMessage, Prompt, RawResource, Resource, Tool, ToolAnnotations,
+};
+use rmcp::object;
 use serde_json::{json, Value};
 use std::io::Cursor;
 use std::{env, fs, future::Future, path::Path, pin::Pin, sync::Arc};
@@ -219,8 +220,8 @@ impl GoogleDriveRouter {
             indoc! {r#"
                 List or search for files or labels in google drive by name, given an input search query. At least one of ('name', 'mimeType', or 'parent') are required for file searches.
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                 "driveType": {
@@ -257,15 +258,14 @@ impl GoogleDriveRouter {
                 }
               },
               "required": ["driveType"],
-            }),
-            Some(ToolAnnotations {
-                    title: Some("Search GDrive".to_string()),
-                    read_only_hint: true,
-                    destructive_hint: false,
-                    idempotent_hint: false,
-                    open_world_hint: false,
-                }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Search GDrive".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let read_tool = Tool::new(
             "read".to_string(),
@@ -280,8 +280,8 @@ impl GoogleDriveRouter {
                 Pass in "gdrive:///1QG8d8wtWe7ZfmG93sW-1h2WXDJDUkOi-9hDnvJLmWrc"
                 Do not include any other path parameters when using URI.
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                   "uri": {
@@ -297,23 +297,22 @@ impl GoogleDriveRouter {
                       "description": "Whether or not to include images as base64 encoded strings, defaults to false",
                   }
               },
-            }),
-            Some(ToolAnnotations {
-                title: Some("Read GDrive".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Read GDrive".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false)
+        });
 
         let create_file_tool = Tool::new(
             "create_file".to_string(),
             indoc! {r#"
                 Create a new file, including Document, Spreadsheet, Slides, folder, or shortcut, in Google Drive.
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                   "name": {
@@ -346,23 +345,22 @@ impl GoogleDriveRouter {
                   }
               },
               "required": ["name", "mimeType"],
-            }),
-            Some(ToolAnnotations {
-                title: Some("Create new file in GDrive".to_string()),
-                read_only_hint: false,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Create new file in GDrive".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let move_file_tool = Tool::new(
             "move_file".to_string(),
             indoc! {r#"
                 Move a Google Drive file, folder, or shortcut to a new parent folder. You cannot move a folder to a different drive.
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                   "fileId": {
@@ -379,23 +377,22 @@ impl GoogleDriveRouter {
                   },
               },
               "required": ["fileId", "currentFolderId", "newFolderId"],
-            }),
-            Some(ToolAnnotations {
-                title: Some("Move file".to_string()),
-                read_only_hint: false,
-                destructive_hint: true,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Move file".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(true),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let update_file_tool = Tool::new(
             "update_file".to_string(),
             indoc! {r#"
                 Update an existing file in Google Drive with new content or edit the file's labels.
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                   "fileId": {
@@ -486,15 +483,14 @@ impl GoogleDriveRouter {
                   "body": ["mimeType"],
                   "path": ["mimeType"]
               }
-            }),
-            Some(ToolAnnotations {
-                title: Some("Update a file's contents or labels".to_string()),
-                read_only_hint: false,
-                destructive_hint: true,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Update a file's contents or labels".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(true),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let sheets_tool = Tool::new(
             "sheets_tool".to_string(),
@@ -509,8 +505,8 @@ impl GoogleDriveRouter {
                 - add_sheet: Add a new sheet (tab) to a spreadsheet
                 - clear_values: Clear values from a range
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                   "spreadsheetId": {
@@ -553,15 +549,14 @@ impl GoogleDriveRouter {
                   }
               },
               "required": ["spreadsheetId", "operation"],
-            }),
-            Some(ToolAnnotations {
-                title: Some("Work with Google Sheets data using various operations.".to_string()),
-                read_only_hint: false,
-                destructive_hint: true,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Work with Google Sheets data using various operations.".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(true),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let docs_tool = Tool::new(
             "docs_tool".to_string(),
@@ -575,8 +570,8 @@ impl GoogleDriveRouter {
                 - create_paragraph: Create a new paragraph
                 - delete_content: Delete content between positions
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                   "documentId": {
@@ -610,15 +605,14 @@ impl GoogleDriveRouter {
                   }
               },
               "required": ["documentId", "operation"],
-            }),
-            Some(ToolAnnotations {
-                title: Some("Work with Google Docs data using various operations.".to_string()),
-                read_only_hint: false,
-                destructive_hint: true,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Work with Google Docs data using various operations.".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(true),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let get_comments_tool = Tool::new(
             "get_comments".to_string(),
@@ -626,7 +620,7 @@ impl GoogleDriveRouter {
                 List comments for a file in google drive.
             "#}
             .to_string(),
-            json!({
+            object!({
               "type": "object",
               "properties": {
                 "fileId": {
@@ -636,14 +630,14 @@ impl GoogleDriveRouter {
               },
               "required": ["fileId"],
             }),
-            Some(ToolAnnotations {
-                title: Some("List file comments".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("List file comments".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let manage_comment_tool = Tool::new(
             "manage_comment".to_string(),
@@ -654,8 +648,8 @@ impl GoogleDriveRouter {
                 - create: Create a comment for the latest revision of a Google Drive file. The Google Drive API only supports unanchored comments (they don't refer to a specific location in the file).
                 - reply: Add a reply to a comment thread, or resolve a comment.
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                 "fileId": {
@@ -681,15 +675,14 @@ impl GoogleDriveRouter {
                 }
               },
               "required": ["fileId", "operation", "content"],
-            }),
-            Some(ToolAnnotations {
-                title: Some("Manage file comment".to_string()),
-                read_only_hint: false,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Manage file comment".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let list_drives_tool = Tool::new(
             "list_drives".to_string(),
@@ -697,7 +690,7 @@ impl GoogleDriveRouter {
                 List shared Google drives.
             "#}
             .to_string(),
-            json!({
+            object!({
               "type": "object",
               "properties": {
                 "name_contains": {
@@ -706,14 +699,14 @@ impl GoogleDriveRouter {
                 }
               },
             }),
-            Some(ToolAnnotations {
-                title: Some("List shared google drives".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("List shared google drives".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let get_permissions_tool = Tool::new(
             "get_permissions".to_string(),
@@ -721,7 +714,7 @@ impl GoogleDriveRouter {
                 List sharing permissions for a file, folder, or shared drive.
             "#}
             .to_string(),
-            json!({
+            object!({
               "type": "object",
               "properties": {
                 "fileId": {
@@ -731,14 +724,14 @@ impl GoogleDriveRouter {
               },
               "required": ["fileId"],
             }),
-            Some(ToolAnnotations {
-                title: Some("List sharing permissions".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("List sharing permissions".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let sharing_tool = Tool::new(
             "sharing".to_string(),
@@ -750,8 +743,8 @@ impl GoogleDriveRouter {
                 - update: Update an existing permission to a different role. (You cannot change the type or to whom it is targeted).
                 - delete: Delete an existing permission.
             "#}
-            .to_string(),
-            json!({
+                .to_string(),
+            object!({
               "type": "object",
               "properties": {
                 "fileId": {
@@ -787,15 +780,14 @@ impl GoogleDriveRouter {
                 },
               },
               "required": ["fileId", "operation"],
-            }),
-            Some(ToolAnnotations {
-                title: Some("Manage file sharing".to_string()),
-                read_only_hint: false,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Manage file sharing".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let instructions = indoc::formatdoc! {r#"
             Google Drive MCP Server Instructions
diff --git a/crates/goose-mcp/src/memory/mod.rs b/crates/goose-mcp/src/memory/mod.rs
index 102e21a5b4..fee7b117b0 100644
--- a/crates/goose-mcp/src/memory/mod.rs
+++ b/crates/goose-mcp/src/memory/mod.rs
@@ -4,13 +4,13 @@ use indoc::formatdoc;
 use mcp_core::{
     handler::{PromptError, ResourceError, ToolError},
     protocol::ServerCapabilities,
-    tool::{Tool, ToolAnnotations, ToolCall},
+    tool::ToolCall,
 };
 use mcp_server::router::CapabilitiesBuilder;
 use mcp_server::Router;
-use rmcp::model::JsonRpcMessage;
-use rmcp::model::{Content, Prompt, Resource};
-use serde_json::{json, Value};
+use rmcp::model::{Content, JsonRpcMessage, Prompt, Resource, Tool, ToolAnnotations};
+use rmcp::object;
+use serde_json::Value;
 use std::{
     collections::HashMap,
     fs,
@@ -41,7 +41,7 @@ impl MemoryRouter {
         let remember_memory = Tool::new(
             "remember_memory",
             "Stores a memory with optional tags in a specified category",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "category": {"type": "string"},
@@ -51,19 +51,19 @@ impl MemoryRouter {
                 },
                 "required": ["category", "data", "is_global"]
             }),
-            Some(ToolAnnotations {
-                title: Some("Remember Memory".to_string()),
-                read_only_hint: false,
-                destructive_hint: false,
-                idempotent_hint: true,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("Remember Memory".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(true),
+            open_world_hint: Some(false),
+        });
 
         let retrieve_memories = Tool::new(
             "retrieve_memories",
             "Retrieves all memories from a specified category",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "category": {"type": "string"},
@@ -71,19 +71,19 @@ impl MemoryRouter {
                 },
                 "required": ["category", "is_global"]
             }),
-            Some(ToolAnnotations {
-                title: Some("Retrieve Memory".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("Retrieve Memory".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let remove_memory_category = Tool::new(
             "remove_memory_category",
             "Removes all memories within a specified category",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "category": {"type": "string"},
@@ -91,19 +91,19 @@ impl MemoryRouter {
                 },
                 "required": ["category", "is_global"]
             }),
-            Some(ToolAnnotations {
-                title: Some("Remove Memory Category".to_string()),
-                read_only_hint: false,
-                destructive_hint: true,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("Remove Memory Category".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(true),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let remove_specific_memory = Tool::new(
             "remove_specific_memory",
             "Removes a specific memory within a specified category",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "category": {"type": "string"},
@@ -112,14 +112,14 @@ impl MemoryRouter {
                 },
                 "required": ["category", "memory_content", "is_global"]
             }),
-            Some(ToolAnnotations {
-                title: Some("Remove Specific Memory".to_string()),
-                read_only_hint: false,
-                destructive_hint: true,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-        );
+        )
+        .annotate(ToolAnnotations {
+            title: Some("Remove Specific Memory".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(true),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         let instructions = formatdoc! {r#"
              This extension allows storage and retrieval of categorized information with tagging support. It's designed to help
diff --git a/crates/goose-mcp/src/tutorial/mod.rs b/crates/goose-mcp/src/tutorial/mod.rs
index 588242bd30..b15e3dca8a 100644
--- a/crates/goose-mcp/src/tutorial/mod.rs
+++ b/crates/goose-mcp/src/tutorial/mod.rs
@@ -4,12 +4,12 @@ use indoc::formatdoc;
 use mcp_core::{
     handler::{PromptError, ResourceError, ToolError},
     protocol::ServerCapabilities,
-    tool::{Tool, ToolAnnotations},
 };
 use mcp_server::router::CapabilitiesBuilder;
 use mcp_server::Router;
-use rmcp::model::{Content, JsonRpcMessage, Prompt, Resource, Role};
-use serde_json::{json, Value};
+use rmcp::model::{Content, JsonRpcMessage, Prompt, Resource, Role, Tool, ToolAnnotations};
+use rmcp::object;
+use serde_json::Value;
 use std::{future::Future, pin::Pin};
 use tokio::sync::mpsc;
 
@@ -31,7 +31,7 @@ impl TutorialRouter {
         let load_tutorial = Tool::new(
             "load_tutorial".to_string(),
             "Load a specific tutorial by name. The tutorial will be returned as markdown content that provides step by step instructions.".to_string(),
-            json!({
+            object!({
                 "type": "object",
                 "required": ["name"],
                 "properties": {
@@ -40,15 +40,14 @@ impl TutorialRouter {
                         "description": "Name of the tutorial to load, e.g. 'getting-started' or 'developer-mcp'"
                     }
                 }
-            }),
-            Some(ToolAnnotations {
-                    title: Some("Load Tutorial".to_string()),
-                    read_only_hint: true,
-                    destructive_hint: false,
-                    idempotent_hint: false,
-                    open_world_hint: false,
-                }),
-        );
+            })
+        ).annotate(ToolAnnotations {
+            title: Some("Load Tutorial".to_string()),
+            read_only_hint: Some(true),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(false),
+            open_world_hint: Some(false),
+        });
 
         // Get base instructions and available tutorials
         let available_tutorials = Self::get_available_tutorials();
diff --git a/crates/goose-server/src/routes/agent.rs b/crates/goose-server/src/routes/agent.rs
index a896cdb2e6..1023b22dbb 100644
--- a/crates/goose-server/src/routes/agent.rs
+++ b/crates/goose-server/src/routes/agent.rs
@@ -207,7 +207,10 @@ async fn get_tools(
 
             ToolInfo::new(
                 &tool.name,
-                &tool.description,
+                tool.description
+                    .as_ref()
+                    .map(|d| d.as_ref())
+                    .unwrap_or_default(),
                 get_parameter_names(&tool),
                 permission,
             )
diff --git a/crates/goose-server/src/routes/extension.rs b/crates/goose-server/src/routes/extension.rs
index d0ddb7ccf3..17e006754a 100644
--- a/crates/goose-server/src/routes/extension.rs
+++ b/crates/goose-server/src/routes/extension.rs
@@ -8,6 +8,7 @@ use crate::state::AppState;
 use axum::{extract::State, routing::post, Json, Router};
 use goose::agents::{extension::Envs, ExtensionConfig};
 use http::{HeaderMap, StatusCode};
+use rmcp::model::Tool;
 use serde::{Deserialize, Serialize};
 use tracing;
 
@@ -80,7 +81,7 @@ enum ExtensionConfigRequest {
         /// The name to identify this extension
         name: String,
         /// The tools provided by this extension
-        tools: Vec<mcp_core::tool::Tool>,
+        tools: Vec<Tool>,
         /// Optional instructions for using the tools
         instructions: Option<String>,
     },
diff --git a/crates/goose-server/src/routes/reply.rs b/crates/goose-server/src/routes/reply.rs
index 24a1f7eb10..5e17331439 100644
--- a/crates/goose-server/src/routes/reply.rs
+++ b/crates/goose-server/src/routes/reply.rs
@@ -404,7 +404,6 @@ mod tests {
             errors::ProviderError,
         },
     };
-    use mcp_core::tool::Tool;
 
     #[derive(Clone)]
     struct MockProvider {
@@ -421,7 +420,7 @@ mod tests {
             &self,
             _system: &str,
             _messages: &[Message],
-            _tools: &[Tool],
+            _tools: &[rmcp::model::Tool],
         ) -> anyhow::Result<(Message, ProviderUsage), ProviderError> {
             Ok((
                 Message::assistant().with_text("Mock response"),
diff --git a/crates/goose/examples/image_tool.rs b/crates/goose/examples/image_tool.rs
index 49fc083c73..a021c7349f 100644
--- a/crates/goose/examples/image_tool.rs
+++ b/crates/goose/examples/image_tool.rs
@@ -5,8 +5,9 @@ use goose::{
     message::Message,
     providers::{bedrock::BedrockProvider, databricks::DatabricksProvider, openai::OpenAiProvider},
 };
-use mcp_core::tool::{Tool, ToolCall};
-use rmcp::model::Content;
+use mcp_core::tool::ToolCall;
+use rmcp::model::{Content, Tool};
+use rmcp::object;
 use serde_json::json;
 use std::fs;
 
@@ -42,7 +43,7 @@ async fn main() -> Result<()> {
         ];
 
         // Get a response from the model about the image
-        let input_schema = json!({
+        let input_schema = object!({
             "type": "object",
             "required": ["path"],
             "properties": {
@@ -57,7 +58,7 @@ async fn main() -> Result<()> {
             .complete(
                 "You are a helpful assistant. Please describe any text you see in the image.",
                 &messages,
-                &[Tool::new("view_image", "View an image", input_schema, None)],
+                &[Tool::new("view_image", "View an image", input_schema)],
             )
             .await?;
 
diff --git a/crates/goose/src/agents/agent.rs b/crates/goose/src/agents/agent.rs
index c67ae89e57..270fd58043 100644
--- a/crates/goose/src/agents/agent.rs
+++ b/crates/goose/src/agents/agent.rs
@@ -42,8 +42,9 @@ use crate::providers::errors::ProviderError;
 use crate::recipe::{Author, Recipe, Response, Settings, SubRecipe};
 use crate::scheduler_trait::SchedulerTrait;
 use crate::tool_monitor::{ToolCall, ToolMonitor};
-use mcp_core::{protocol::GetPromptResult, tool::Tool, ToolError, ToolResult};
+use mcp_core::{protocol::GetPromptResult, ToolError, ToolResult};
 use regex::Regex;
+use rmcp::model::Tool;
 use rmcp::model::{Content, JsonRpcMessage, Prompt};
 use serde_json::Value;
 use tokio::sync::{mpsc, Mutex, RwLock};
@@ -538,10 +539,10 @@ impl Agent {
                 let mut frontend_tools = self.frontend_tools.lock().await;
                 for tool in tools {
                     let frontend_tool = FrontendTool {
-                        name: tool.name.clone(),
+                        name: tool.name.to_string(),
                         tool: tool.clone(),
                     };
-                    frontend_tools.insert(tool.name.clone(), frontend_tool);
+                    frontend_tools.insert(tool.name.to_string(), frontend_tool);
                 }
                 // Store instructions if provided, using "frontend" as the key
                 let mut frontend_instructions = self.frontend_instructions.lock().await;
@@ -1181,7 +1182,10 @@ impl Agent {
             .map(|tool| {
                 ToolInfo::new(
                     &tool.name,
-                    &tool.description,
+                    tool.description
+                        .as_ref()
+                        .map(|d| d.as_ref())
+                        .unwrap_or_default(),
                     get_parameter_names(&tool),
                     None,
                 )
diff --git a/crates/goose/src/agents/extension.rs b/crates/goose/src/agents/extension.rs
index 93d9ff99fe..37dc585489 100644
--- a/crates/goose/src/agents/extension.rs
+++ b/crates/goose/src/agents/extension.rs
@@ -1,7 +1,7 @@
 use std::collections::HashMap;
 
 use mcp_client::client::Error as ClientError;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 use serde::{Deserialize, Serialize};
 use thiserror::Error;
 use tracing::warn;
diff --git a/crates/goose/src/agents/extension_manager.rs b/crates/goose/src/agents/extension_manager.rs
index 732401a021..2ee529148b 100644
--- a/crates/goose/src/agents/extension_manager.rs
+++ b/crates/goose/src/agents/extension_manager.rs
@@ -19,8 +19,8 @@ use crate::config::{Config, ExtensionConfigManager};
 use crate::prompt_template;
 use mcp_client::client::{ClientCapabilities, ClientInfo, McpClient, McpClientTrait};
 use mcp_client::transport::{SseTransport, StdioTransport, StreamableHttpTransport, Transport};
-use mcp_core::{Tool, ToolCall, ToolError};
-use rmcp::model::{Content, Prompt, Resource, ResourceContents};
+use mcp_core::{ToolCall, ToolError};
+use rmcp::model::{Content, Prompt, Resource, ResourceContents, Tool};
 use serde_json::Value;
 
 // By default, we set it to Jan 1, 2020 if the resource does not have a timestamp
@@ -380,13 +380,18 @@ impl ExtensionManager {
                 let mut client_tools = client_guard.list_tools(None).await?;
 
                 loop {
-                    for tool in client_tools.tools {
-                        tools.push(Tool::new(
-                            format!("{}__{}", name, tool.name),
-                            &tool.description,
-                            tool.input_schema,
-                            tool.annotations,
-                        ));
+                    for client_tool in client_tools.tools {
+                        let mut tool = Tool::new(
+                            format!("{}__{}", name, client_tool.name),
+                            client_tool.description.unwrap_or_default(),
+                            client_tool.input_schema,
+                        );
+
+                        if tool.annotations.is_some() {
+                            tool = tool.annotate(client_tool.annotations.unwrap())
+                        }
+
+                        tools.push(tool);
                     }
 
                     // Exit loop when there are no more pages
diff --git a/crates/goose/src/agents/final_output_tool.rs b/crates/goose/src/agents/final_output_tool.rs
index 0c2e779b15..8c2f2b969d 100644
--- a/crates/goose/src/agents/final_output_tool.rs
+++ b/crates/goose/src/agents/final_output_tool.rs
@@ -1,11 +1,8 @@
 use crate::agents::tool_execution::ToolCallResult;
 use crate::recipe::Response;
 use indoc::formatdoc;
-use mcp_core::{
-    tool::{Tool, ToolAnnotations},
-    ToolCall, ToolError,
-};
-use rmcp::model::Content;
+use mcp_core::{ToolCall, ToolError};
+use rmcp::model::{Content, Tool, ToolAnnotations};
 use serde_json::Value;
 
 pub const FINAL_OUTPUT_TOOL_NAME: &str = "recipe__final_output";
@@ -64,15 +61,21 @@ impl FinalOutputTool {
         Tool::new(
             FINAL_OUTPUT_TOOL_NAME.to_string(),
             instructions,
-            self.response.json_schema.as_ref().unwrap().clone(),
-            Some(ToolAnnotations {
-                title: Some("Final Output".to_string()),
-                read_only_hint: false,
-                destructive_hint: false,
-                idempotent_hint: true,
-                open_world_hint: false,
-            }),
+            self.response
+                .json_schema
+                .as_ref()
+                .unwrap()
+                .as_object()
+                .unwrap()
+                .clone(),
         )
+        .annotate(ToolAnnotations {
+            title: Some("Final Output".to_string()),
+            read_only_hint: Some(false),
+            destructive_hint: Some(false),
+            idempotent_hint: Some(true),
+            open_world_hint: Some(false),
+        })
     }
 
     pub fn system_prompt(&self) -> String {
diff --git a/crates/goose/src/agents/platform_tools.rs b/crates/goose/src/agents/platform_tools.rs
index 841c18d43f..777b054d97 100644
--- a/crates/goose/src/agents/platform_tools.rs
+++ b/crates/goose/src/agents/platform_tools.rs
@@ -1,6 +1,6 @@
 use indoc::indoc;
-use mcp_core::tool::{Tool, ToolAnnotations};
-use serde_json::json;
+use rmcp::model::{Tool, ToolAnnotations};
+use rmcp::object;
 
 pub const PLATFORM_READ_RESOURCE_TOOL_NAME: &str = "platform__read_resource";
 pub const PLATFORM_LIST_RESOURCES_TOOL_NAME: &str = "platform__list_resources";
@@ -20,22 +20,21 @@ pub fn read_resource_tool() -> Tool {
             resource URI in the provided extension, and reads in the resource content. If no extension
             is provided, the tool will search all extensions for the resource.
         "#}.to_string(),
-        json!({
+        object!({
             "type": "object",
             "required": ["uri"],
             "properties": {
                 "uri": {"type": "string", "description": "Resource URI"},
                 "extension_name": {"type": "string", "description": "Optional extension name"}
             }
-        }),
-        Some(ToolAnnotations {
-            title: Some("Read a resource".to_string()),
-            read_only_hint: true,
-            destructive_hint: false,
-            idempotent_hint: false,
-            open_world_hint: false,
-        }),
-    )
+        })
+    ).annotate(ToolAnnotations {
+        title: Some("Read a resource".to_string()),
+        read_only_hint: Some(true),
+        destructive_hint: Some(false),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(false),
+    })
 }
 
 pub fn list_resources_tool() -> Tool {
@@ -50,20 +49,20 @@ pub fn list_resources_tool() -> Tool {
             is provided, the tool will search all extensions for the resource.
         "#}
         .to_string(),
-        json!({
+        object!({
             "type": "object",
             "properties": {
                 "extension_name": {"type": "string", "description": "Optional extension name"}
             }
         }),
-        Some(ToolAnnotations {
-            title: Some("List resources".to_string()),
-            read_only_hint: true,
-            destructive_hint: false,
-            idempotent_hint: false,
-            open_world_hint: false,
-        }),
     )
+    .annotate(ToolAnnotations {
+        title: Some("List resources".to_string()),
+        read_only_hint: Some(true),
+        destructive_hint: Some(false),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(false),
+    })
 }
 
 pub fn search_available_extensions_tool() -> Tool {
@@ -73,19 +72,18 @@ pub fn search_available_extensions_tool() -> Tool {
         Use this tool when you're unable to find a specific feature or functionality you need to complete your task, or when standard approaches aren't working.
         These extensions might provide the exact tools needed to solve your problem.
         If you find a relevant one, consider using your tools to enable it.".to_string(),
-        json!({
+        object!({
             "type": "object",
             "required": [],
             "properties": {}
-        }),
-        Some(ToolAnnotations {
-            title: Some("Discover extensions".to_string()),
-            read_only_hint: true,
-            destructive_hint: false,
-            idempotent_hint: false,
-            open_world_hint: false,
-        }),
-    )
+        })
+    ).annotate(ToolAnnotations {
+        title: Some("Discover extensions".to_string()),
+        read_only_hint: Some(true),
+        destructive_hint: Some(false),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(false),
+    })
 }
 
 pub fn manage_extensions_tool() -> Tool {
@@ -96,7 +94,7 @@ pub fn manage_extensions_tool() -> Tool {
             Enable or disable an extension by providing the extension name.
             "
         .to_string(),
-        json!({
+        object!({
             "type": "object",
             "required": ["action", "extension_name"],
             "properties": {
@@ -104,14 +102,13 @@ pub fn manage_extensions_tool() -> Tool {
                 "extension_name": {"type": "string", "description": "The name of the extension to enable"}
             }
         }),
-        Some(ToolAnnotations {
-            title: Some("Enable or disable an extension".to_string()),
-            read_only_hint: false,
-            destructive_hint: false,
-            idempotent_hint: false,
-            open_world_hint: false,
-        }),
-    )
+    ).annotate(ToolAnnotations {
+        title: Some("Enable or disable an extension".to_string()),
+        read_only_hint: Some(false),
+        destructive_hint: Some(false),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(false),
+    })
 }
 
 pub fn manage_schedule_tool() -> Tool {
@@ -133,7 +130,7 @@ pub fn manage_schedule_tool() -> Tool {
             - "session_content": Get the full content (messages) of a specific session
         "#}
         .to_string(),
-        json!({
+        object!({
             "type": "object",
             "required": ["action"],
             "properties": {
@@ -149,12 +146,11 @@ pub fn manage_schedule_tool() -> Tool {
                 "session_id": {"type": "string", "description": "Session identifier for session_content action"}
             }
         }),
-        Some(ToolAnnotations {
-            title: Some("Manage scheduled recipes".to_string()),
-            read_only_hint: false,
-            destructive_hint: true, // Can kill jobs
-            idempotent_hint: false,
-            open_world_hint: false,
-        }),
-    )
+    ).annotate(ToolAnnotations {
+        title: Some("Manage scheduled recipes".to_string()),
+        read_only_hint: Some(false),
+        destructive_hint: Some(true), // Can kill jobs
+        idempotent_hint: Some(false),
+        open_world_hint: Some(false),
+    })
 }
diff --git a/crates/goose/src/agents/recipe_tools/dynamic_task_tools.rs b/crates/goose/src/agents/recipe_tools/dynamic_task_tools.rs
index 08866258e7..55e11b6fe1 100644
--- a/crates/goose/src/agents/recipe_tools/dynamic_task_tools.rs
+++ b/crates/goose/src/agents/recipe_tools/dynamic_task_tools.rs
@@ -5,8 +5,9 @@
 use crate::agents::subagent_execution_tool::tasks_manager::TasksManager;
 use crate::agents::subagent_execution_tool::{lib::ExecutionMode, task_types::Task};
 use crate::agents::tool_execution::ToolCallResult;
-use mcp_core::{tool::ToolAnnotations, Tool, ToolError};
-use rmcp::model::Content;
+use mcp_core::ToolError;
+use rmcp::model::{Content, Tool, ToolAnnotations};
+use rmcp::object;
 use serde_json::{json, Value};
 
 pub const DYNAMIC_TASK_TOOL_NAME_PREFIX: &str = "dynamic_task__create_task";
@@ -35,7 +36,7 @@ pub fn create_dynamic_task_tool() -> Tool {
                 text_instruction: Get weather for Los Angeles.
                 text_instruction: Get weather for San Francisco.
             ".to_string(),
-        json!({
+        object!({
             "type": "object",
             "properties": {
                 "task_parameters": {
@@ -56,15 +57,14 @@ pub fn create_dynamic_task_tool() -> Tool {
                     }
                 }
             }
-        }),
-        Some(ToolAnnotations {
-            title: Some("Dynamic Task Creation".to_string()),
-            read_only_hint: false,
-            destructive_hint: true,
-            idempotent_hint: false,
-            open_world_hint: true,
-        }),
-    )
+        })
+    ).annotate(ToolAnnotations {
+        title: Some("Dynamic Task Creation".to_string()),
+        read_only_hint: Some(false),
+        destructive_hint: Some(true),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(true),
+    })
 }
 
 fn extract_task_parameters(params: &Value) -> Vec<Value> {
diff --git a/crates/goose/src/agents/recipe_tools/sub_recipe_tools.rs b/crates/goose/src/agents/recipe_tools/sub_recipe_tools.rs
index a283ab2bf7..66da9ca22d 100644
--- a/crates/goose/src/agents/recipe_tools/sub_recipe_tools.rs
+++ b/crates/goose/src/agents/recipe_tools/sub_recipe_tools.rs
@@ -1,8 +1,9 @@
 use std::collections::HashSet;
 use std::fs;
+use std::sync::Arc;
 
 use anyhow::Result;
-use mcp_core::tool::{Tool, ToolAnnotations};
+use rmcp::model::{Tool, ToolAnnotations};
 use serde_json::{json, Map, Value};
 
 use crate::agents::subagent_execution_tool::lib::{ExecutionMode, Task};
@@ -15,6 +16,7 @@ pub const SUB_RECIPE_TASK_TOOL_NAME_PREFIX: &str = "subrecipe__create_task";
 
 pub fn create_sub_recipe_task_tool(sub_recipe: &SubRecipe) -> Tool {
     let input_schema = get_input_schema(sub_recipe).unwrap();
+
     Tool::new(
         format!("{}_{}", SUB_RECIPE_TASK_TOOL_NAME_PREFIX, sub_recipe.name),
         format!(
@@ -27,15 +29,17 @@ pub fn create_sub_recipe_task_tool(sub_recipe: &SubRecipe) -> Tool {
             After creating the tasks and execution_mode is provided, pass them to the task executor to run these tasks",
             sub_recipe.name
         ),
-        input_schema,
-        Some(ToolAnnotations {
-            title: Some(format!("create multiple sub recipe tasks for {}", sub_recipe.name)),
-            read_only_hint: false,
-            destructive_hint: true,
-            idempotent_hint: false,
-            open_world_hint: true,
-        }),
-    )
+        Arc::new(input_schema.as_object().unwrap().clone())
+    ).annotate(ToolAnnotations {
+        title: Some(format!(
+            "create multiple sub recipe tasks for {}",
+            sub_recipe.name
+        )),
+        read_only_hint: Some(false),
+        destructive_hint: Some(true),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(true),
+    })
 }
 
 fn extract_task_parameters(params: &Value) -> Vec<Value> {
diff --git a/crates/goose/src/agents/reply_parts.rs b/crates/goose/src/agents/reply_parts.rs
index 64bd196d40..cd5f217d3c 100644
--- a/crates/goose/src/agents/reply_parts.rs
+++ b/crates/goose/src/agents/reply_parts.rs
@@ -15,7 +15,7 @@ use crate::providers::toolshim::{
     modify_system_prompt_for_tool_json, OllamaInterpreter,
 };
 use crate::session;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 use super::super::agents::Agent;
 
@@ -110,11 +110,11 @@ impl Agent {
             .iter()
             .fold((HashSet::new(), HashSet::new()), |mut acc, tool| {
                 match &tool.annotations {
-                    Some(annotations) if annotations.read_only_hint => {
-                        acc.0.insert(tool.name.clone());
+                    Some(annotations) if annotations.read_only_hint.unwrap_or(false) => {
+                        acc.0.insert(tool.name.to_string());
                     }
                     _ => {
-                        acc.1.insert(tool.name.clone());
+                        acc.1.insert(tool.name.to_string());
                     }
                 }
                 acc
diff --git a/crates/goose/src/agents/router_tool_selector.rs b/crates/goose/src/agents/router_tool_selector.rs
index 52da661a95..a75c648d84 100644
--- a/crates/goose/src/agents/router_tool_selector.rs
+++ b/crates/goose/src/agents/router_tool_selector.rs
@@ -1,6 +1,6 @@
-use mcp_core::tool::Tool;
 use mcp_core::ToolError;
 use rmcp::model::Content;
+use rmcp::model::Tool;
 
 use anyhow::{Context, Result};
 use async_trait::async_trait;
@@ -128,7 +128,15 @@ impl RouterToolSelector for VectorToolSelector {
             .map(|tool| {
                 let schema_str = serde_json::to_string_pretty(&tool.input_schema)
                     .unwrap_or_else(|_| "{}".to_string());
-                format!("{} {} {}", tool.name, tool.description, schema_str)
+                format!(
+                    "{} {} {}",
+                    tool.name,
+                    tool.description
+                        .as_ref()
+                        .map(|d| d.as_ref())
+                        .unwrap_or_default(),
+                    schema_str
+                )
             })
             .collect();
 
@@ -154,8 +162,12 @@ impl RouterToolSelector for VectorToolSelector {
                 let schema_str = serde_json::to_string_pretty(&tool.input_schema)
                     .unwrap_or_else(|_| "{}".to_string());
                 crate::agents::tool_vectordb::ToolRecord {
-                    tool_name: tool.name.clone(),
-                    description: tool.description.clone(),
+                    tool_name: tool.name.to_string(),
+                    description: tool
+                        .description
+                        .as_ref()
+                        .map(|d| d.to_string())
+                        .unwrap_or_default(),
                     schema: schema_str,
                     vector,
                     extension_name: extension_name.to_string(),
@@ -305,7 +317,10 @@ impl RouterToolSelector for LLMToolSelector {
             let tool_string = format!(
                 "Tool: {}\nDescription: {}\nSchema: {}",
                 tool.name,
-                tool.description,
+                tool.description
+                    .as_ref()
+                    .map(|d| d.as_ref())
+                    .unwrap_or_default(),
                 serde_json::to_string_pretty(&tool.input_schema)
                     .unwrap_or_else(|_| "{}".to_string())
             );
diff --git a/crates/goose/src/agents/router_tools.rs b/crates/goose/src/agents/router_tools.rs
index bb3b2ad0e0..a4440f66bf 100644
--- a/crates/goose/src/agents/router_tools.rs
+++ b/crates/goose/src/agents/router_tools.rs
@@ -3,8 +3,8 @@ use super::platform_tools::{
     PLATFORM_READ_RESOURCE_TOOL_NAME, PLATFORM_SEARCH_AVAILABLE_EXTENSIONS_TOOL_NAME,
 };
 use indoc::indoc;
-use mcp_core::tool::{Tool, ToolAnnotations};
-use serde_json::json;
+use rmcp::model::{Tool, ToolAnnotations};
+use rmcp::object;
 
 pub const ROUTER_VECTOR_SEARCH_TOOL_NAME: &str = "router__vector_search";
 pub const ROUTER_LLM_SEARCH_TOOL_NAME: &str = "router__llm_search";
@@ -24,7 +24,7 @@ pub fn vector_search_tool() -> Tool {
             Extension name is not optional, it is required.
         "#}
         .to_string(),
-        json!({
+        object!({
             "type": "object",
             "required": ["query", "extension_name"],
             "properties": {
@@ -32,15 +32,14 @@ pub fn vector_search_tool() -> Tool {
                 "k": {"type": "integer", "description": "The number of tools to retrieve (defaults to 5)", "default": 5},
                 "extension_name": {"type": "string", "description": "Name of the extension to filter tools by"}
             }
-        }),
-        Some(ToolAnnotations {
-            title: Some("Vector search for relevant tools".to_string()),
-            read_only_hint: true,
-            destructive_hint: false,
-            idempotent_hint: false,
-            open_world_hint: false,
-        }),
-    )
+        })
+    ).annotate(ToolAnnotations {
+        title: Some("Vector search for relevant tools".to_string()),
+        read_only_hint: Some(true),
+        destructive_hint: Some(false),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(false),
+    })
 }
 
 pub fn vector_search_tool_prompt() -> String {
@@ -81,7 +80,7 @@ pub fn llm_search_tool() -> Tool {
             The returned result will be a list of tool names, descriptions, and schemas from which you, the agent can select the most relevant tool to invoke.
         "#}
         .to_string(),
-        json!({
+        object!({
             "type": "object",
             "required": ["query", "extension_name"],
             "properties": {
@@ -89,15 +88,14 @@ pub fn llm_search_tool() -> Tool {
                 "query": {"type": "string", "description": "The query to search for the most relevant tools based on the user's messages"},
                 "k": {"type": "integer", "description": "The number of tools to retrieve (defaults to 5)", "default": 5}
             }
-        }),
-        Some(ToolAnnotations {
-            title: Some("LLM search for relevant tools".to_string()),
-            read_only_hint: true,
-            destructive_hint: false,
-            idempotent_hint: false,
-            open_world_hint: false,
-        }),
-    )
+        })
+    ).annotate(ToolAnnotations {
+        title: Some("LLM search for relevant tools".to_string()),
+        read_only_hint: Some(true),
+        destructive_hint: Some(false),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(false),
+    })
 }
 
 pub fn llm_search_tool_prompt() -> String {
diff --git a/crates/goose/src/agents/sub_recipe_manager.rs b/crates/goose/src/agents/sub_recipe_manager.rs
index 98431f5bb1..314c3c41b6 100644
--- a/crates/goose/src/agents/sub_recipe_manager.rs
+++ b/crates/goose/src/agents/sub_recipe_manager.rs
@@ -1,5 +1,6 @@
-use mcp_core::{Tool, ToolError};
+use mcp_core::ToolError;
 use rmcp::model::Content;
+use rmcp::model::Tool;
 use serde_json::Value;
 use std::collections::HashMap;
 
diff --git a/crates/goose/src/agents/subagent.rs b/crates/goose/src/agents/subagent.rs
index d07030ab42..f9cf85d64e 100644
--- a/crates/goose/src/agents/subagent.rs
+++ b/crates/goose/src/agents/subagent.rs
@@ -9,7 +9,8 @@ use crate::{
 };
 use anyhow::anyhow;
 use chrono::{DateTime, Utc};
-use mcp_core::{handler::ToolError, tool::Tool};
+use mcp_core::handler::ToolError;
+use rmcp::model::Tool;
 use serde::{Deserialize, Serialize};
 // use serde_json::{self};
 use std::{collections::HashMap, sync::Arc};
@@ -336,10 +337,10 @@ impl SubAgent {
         let tools_with_descriptions: Vec<String> = available_tools
             .iter()
             .map(|t| {
-                if t.description.is_empty() {
-                    t.name.clone()
+                if let Some(description) = &t.description {
+                    format!("{}: {}", t.name, description)
                 } else {
-                    format!("{}: {}", t.name, t.description)
+                    t.name.to_string()
                 }
             })
             .collect();
diff --git a/crates/goose/src/agents/subagent_execution_tool/subagent_execute_task_tool.rs b/crates/goose/src/agents/subagent_execution_tool/subagent_execute_task_tool.rs
index e06da40615..2527d558b8 100644
--- a/crates/goose/src/agents/subagent_execution_tool/subagent_execute_task_tool.rs
+++ b/crates/goose/src/agents/subagent_execution_tool/subagent_execute_task_tool.rs
@@ -1,5 +1,5 @@
-use mcp_core::{tool::ToolAnnotations, Tool, ToolError};
-use rmcp::model::Content;
+use mcp_core::ToolError;
+use rmcp::model::{Content, Tool, ToolAnnotations};
 use serde_json::Value;
 
 use crate::agents::subagent_task_config::TaskConfig;
@@ -9,6 +9,7 @@ use crate::agents::{
     subagent_execution_tool::tasks_manager::TasksManager, tool_execution::ToolCallResult,
 };
 use rmcp::model::JsonRpcMessage;
+use rmcp::object;
 use tokio::sync::mpsc;
 use tokio_stream;
 use tokio_util::sync::CancellationToken;
@@ -18,21 +19,21 @@ pub fn create_subagent_execute_task_tool() -> Tool {
     Tool::new(
         SUBAGENT_EXECUTE_TASK_TOOL_NAME,
         "Only use the subagent__execute_task tool when you execute sub recipe task or dynamic task.
-EXECUTION STRATEGY DECISION:
-1. If the tasks are created with execution_mode, use the execution_mode.
-2. Execute tasks sequentially unless user explicitly requests parallel execution. PARALLEL: User uses keywords like 'parallel', 'simultaneously', 'at the same time', 'concurrently'
+        EXECUTION STRATEGY DECISION:
+        1. If the tasks are created with execution_mode, use the execution_mode.
+        2. Execute tasks sequentially unless user explicitly requests parallel execution. PARALLEL: User uses keywords like 'parallel', 'simultaneously', 'at the same time', 'concurrently'
 
-IMPLEMENTATION:
-- Sequential execution: Call this tool multiple times, passing exactly ONE task per call
-- Parallel execution: Call this tool once, passing an ARRAY of all tasks
+        IMPLEMENTATION:
+        - Sequential execution: Call this tool multiple times, passing exactly ONE task per call
+        - Parallel execution: Call this tool once, passing an ARRAY of all tasks
 
-EXAMPLES:
-User Intent Based:
-- User: 'get weather and tell me a joke' → Sequential (2 separate tool calls, 1 task each)
-- User: 'get weather and joke in parallel' → Parallel (1 tool call with array of 2 tasks)
-- User: 'run these simultaneously' → Parallel (1 tool call with task array)
-- User: 'do task A then task B' → Sequential (2 separate tool calls)",
-        serde_json::json!({
+        EXAMPLES:
+        User Intent Based:
+        - User: 'get weather and tell me a joke' → Sequential (2 separate tool calls, 1 task each)
+        - User: 'get weather and joke in parallel' → Parallel (1 tool call with array of 2 tasks)
+        - User: 'run these simultaneously' → Parallel (1 tool call with task array)
+        - User: 'do task A then task B' → Sequential (2 separate tool calls)",
+        object!({
             "type": "object",
             "properties": {
                 "execution_mode": {
@@ -50,15 +51,14 @@ User Intent Based:
                 }
             },
             "required": ["task_ids"]
-        }),
-        Some(ToolAnnotations {
-            title: Some("Run tasks in parallel".to_string()),
-            read_only_hint: false,
-            destructive_hint: true,
-            idempotent_hint: false,
-            open_world_hint: true,
-        }),
-    )
+        })
+    ).annotate(ToolAnnotations {
+        title: Some("Run tasks in parallel".to_string()),
+        read_only_hint: Some(false),
+        destructive_hint: Some(true),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(true),
+    })
 }
 
 pub async fn run_tasks(
diff --git a/crates/goose/src/agents/types.rs b/crates/goose/src/agents/types.rs
index 10054d1672..8cb2c8fbad 100644
--- a/crates/goose/src/agents/types.rs
+++ b/crates/goose/src/agents/types.rs
@@ -1,6 +1,6 @@
 use crate::session;
-use mcp_core::{Tool, ToolResult};
-use rmcp::model::Content;
+use mcp_core::ToolResult;
+use rmcp::model::{Content, Tool};
 use serde::{Deserialize, Serialize};
 use std::path::PathBuf;
 use std::sync::Arc;
diff --git a/crates/goose/src/context_mgmt/common.rs b/crates/goose/src/context_mgmt/common.rs
index cd12e09f96..3f9054361b 100644
--- a/crates/goose/src/context_mgmt/common.rs
+++ b/crates/goose/src/context_mgmt/common.rs
@@ -1,6 +1,6 @@
 use std::sync::Arc;
 
-use mcp_core::Tool;
+use rmcp::model::Tool;
 
 use crate::{
     message::Message,
diff --git a/crates/goose/src/context_mgmt/summarize.rs b/crates/goose/src/context_mgmt/summarize.rs
index 5b7d049df1..cd09f4fcf7 100644
--- a/crates/goose/src/context_mgmt/summarize.rs
+++ b/crates/goose/src/context_mgmt/summarize.rs
@@ -220,9 +220,9 @@ mod tests {
     use crate::providers::base::{Provider, ProviderMetadata, ProviderUsage, Usage};
     use crate::providers::errors::ProviderError;
     use chrono::Utc;
-    use mcp_core::tool::Tool;
     use mcp_core::ToolCall;
     use rmcp::model::Role;
+    use rmcp::model::Tool;
     use rmcp::model::{AnnotateAble, Content, RawTextContent};
     use serde_json::json;
     use std::sync::Arc;
diff --git a/crates/goose/src/permission/permission_judge.rs b/crates/goose/src/permission/permission_judge.rs
index 6a452e24a5..cb1b4d7483 100644
--- a/crates/goose/src/permission/permission_judge.rs
+++ b/crates/goose/src/permission/permission_judge.rs
@@ -5,10 +5,10 @@ use crate::message::{Message, MessageContent, ToolRequest};
 use crate::providers::base::Provider;
 use chrono::Utc;
 use indoc::indoc;
-use mcp_core::tool::Tool;
-use mcp_core::tool::ToolAnnotations;
+use rmcp::model::{Tool, ToolAnnotations};
+use rmcp::object;
 use serde::{Deserialize, Serialize};
-use serde_json::{json, Value};
+use serde_json::Value;
 use std::collections::HashSet;
 use std::sync::Arc;
 
@@ -45,7 +45,7 @@ fn create_read_only_tool() -> Tool {
             Use this analysis to generate the list of tools performing read-only operations from the provided tool requests.
         "#}
         .to_string(),
-        json!({
+        object!({
             "type": "object",
             "properties": {
                 "read_only_tools": {
@@ -57,15 +57,14 @@ fn create_read_only_tool() -> Tool {
                 }
             },
             "required": []
-        }),
-        Some(ToolAnnotations {
-                title: Some("Check tool operation".to_string()),
-                read_only_hint: true,
-                destructive_hint: false,
-                idempotent_hint: false,
-                open_world_hint: false,
-            }),
-    )
+        })
+    ).annotate(ToolAnnotations {
+        title: Some("Check tool operation".to_string()),
+        read_only_hint: Some(true),
+        destructive_hint: Some(false),
+        idempotent_hint: Some(false),
+        open_world_hint: Some(false),
+    })
 }
 
 /// Builds the message to be sent to the LLM for detecting read-only operations.
@@ -266,9 +265,8 @@ mod tests {
     use crate::providers::base::{Provider, ProviderMetadata, ProviderUsage, Usage};
     use crate::providers::errors::ProviderError;
     use chrono::Utc;
-    use mcp_core::ToolCall;
-    use mcp_core::{tool::Tool, ToolResult};
-    use rmcp::model::Role;
+    use mcp_core::{ToolCall, ToolResult};
+    use rmcp::model::{Role, Tool};
     use serde_json::json;
     use tempfile::NamedTempFile;
 
@@ -324,7 +322,10 @@ mod tests {
     async fn test_create_read_only_tool() {
         let tool = create_read_only_tool();
         assert_eq!(tool.name, "platform__tool_by_tool_permission");
-        assert!(tool.description.contains("read-only operation"));
+        assert!(tool
+            .description
+            .as_ref()
+            .map_or(false, |desc| desc.contains("read-only operation")));
     }
 
     #[test]
diff --git a/crates/goose/src/providers/anthropic.rs b/crates/goose/src/providers/anthropic.rs
index 58b4c299b7..508fdd3cb9 100644
--- a/crates/goose/src/providers/anthropic.rs
+++ b/crates/goose/src/providers/anthropic.rs
@@ -19,7 +19,7 @@ use super::formats::anthropic::{
 use super::utils::{emit_debug_trace, get_model};
 use crate::message::Message;
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 pub const ANTHROPIC_DEFAULT_MODEL: &str = "claude-3-5-sonnet-latest";
 pub const ANTHROPIC_KNOWN_MODELS: &[&str] = &[
diff --git a/crates/goose/src/providers/azure.rs b/crates/goose/src/providers/azure.rs
index 1ffdf4ed54..916215ddf3 100644
--- a/crates/goose/src/providers/azure.rs
+++ b/crates/goose/src/providers/azure.rs
@@ -13,7 +13,7 @@ use super::formats::openai::{create_request, get_usage, response_to_message};
 use super::utils::{emit_debug_trace, get_model, handle_response_openai_compat, ImageFormat};
 use crate::message::Message;
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 pub const AZURE_DEFAULT_MODEL: &str = "gpt-4o";
 pub const AZURE_DOC_URL: &str =
diff --git a/crates/goose/src/providers/base.rs b/crates/goose/src/providers/base.rs
index 260e1f22f5..9525486821 100644
--- a/crates/goose/src/providers/base.rs
+++ b/crates/goose/src/providers/base.rs
@@ -5,7 +5,7 @@ use serde::{Deserialize, Serialize};
 use super::errors::ProviderError;
 use crate::message::Message;
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 use utoipa::ToSchema;
 
 use once_cell::sync::Lazy;
diff --git a/crates/goose/src/providers/bedrock.rs b/crates/goose/src/providers/bedrock.rs
index 31e6cf8b43..22d05fd6a1 100644
--- a/crates/goose/src/providers/bedrock.rs
+++ b/crates/goose/src/providers/bedrock.rs
@@ -6,7 +6,7 @@ use async_trait::async_trait;
 use aws_sdk_bedrockruntime::config::ProvideCredentials;
 use aws_sdk_bedrockruntime::operation::converse::ConverseError;
 use aws_sdk_bedrockruntime::{types as bedrock, Client};
-use mcp_core::Tool;
+use rmcp::model::Tool;
 use serde_json::Value;
 use tokio::time::sleep;
 
diff --git a/crates/goose/src/providers/claude_code.rs b/crates/goose/src/providers/claude_code.rs
index 380979459f..c98862c11c 100644
--- a/crates/goose/src/providers/claude_code.rs
+++ b/crates/goose/src/providers/claude_code.rs
@@ -13,7 +13,7 @@ use super::utils::emit_debug_trace;
 use crate::config::Config;
 use crate::message::{Message, MessageContent};
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 pub const CLAUDE_CODE_DEFAULT_MODEL: &str = "claude-3-5-sonnet-latest";
 pub const CLAUDE_CODE_KNOWN_MODELS: &[&str] = &["sonnet", "opus", "claude-3-5-sonnet-latest"];
diff --git a/crates/goose/src/providers/databricks.rs b/crates/goose/src/providers/databricks.rs
index 77adf55699..4b88cf5f6c 100644
--- a/crates/goose/src/providers/databricks.rs
+++ b/crates/goose/src/providers/databricks.rs
@@ -20,7 +20,7 @@ use crate::config::ConfigError;
 use crate::message::Message;
 use crate::model::ModelConfig;
 use crate::providers::formats::openai::{get_usage, response_to_streaming_message};
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 use serde_json::json;
 use tokio::time::sleep;
 use tokio_stream::StreamExt;
diff --git a/crates/goose/src/providers/factory.rs b/crates/goose/src/providers/factory.rs
index 091425530d..27545c3a21 100644
--- a/crates/goose/src/providers/factory.rs
+++ b/crates/goose/src/providers/factory.rs
@@ -27,7 +27,7 @@ use anyhow::Result;
 #[cfg(test)]
 use super::errors::ProviderError;
 #[cfg(test)]
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 fn default_lead_turns() -> usize {
     3
diff --git a/crates/goose/src/providers/formats/anthropic.rs b/crates/goose/src/providers/formats/anthropic.rs
index 17f5257538..bc0f715ec1 100644
--- a/crates/goose/src/providers/formats/anthropic.rs
+++ b/crates/goose/src/providers/formats/anthropic.rs
@@ -3,8 +3,8 @@ use crate::model::ModelConfig;
 use crate::providers::base::Usage;
 use crate::providers::errors::ProviderError;
 use anyhow::{anyhow, Result};
-use mcp_core::tool::{Tool, ToolCall};
-use rmcp::model::Role;
+use mcp_core::tool::ToolCall;
+use rmcp::model::{Role, Tool};
 use serde_json::{json, Value};
 use std::collections::HashSet;
 
@@ -676,6 +676,7 @@ where
 #[cfg(test)]
 mod tests {
     use super::*;
+    use rmcp::object;
     use serde_json::json;
 
     #[test]
@@ -858,7 +859,7 @@ mod tests {
             Tool::new(
                 "calculator",
                 "Calculate mathematical expressions",
-                json!({
+                object!({
                     "type": "object",
                     "properties": {
                         "expression": {
@@ -867,12 +868,11 @@ mod tests {
                         }
                     }
                 }),
-                None,
             ),
             Tool::new(
                 "weather",
                 "Get weather information",
-                json!({
+                object!({
                     "type": "object",
                     "properties": {
                         "location": {
@@ -881,7 +881,6 @@ mod tests {
                         }
                     }
                 }),
-                None,
             ),
         ];
 
diff --git a/crates/goose/src/providers/formats/bedrock.rs b/crates/goose/src/providers/formats/bedrock.rs
index ae8840f27f..e947f347ba 100644
--- a/crates/goose/src/providers/formats/bedrock.rs
+++ b/crates/goose/src/providers/formats/bedrock.rs
@@ -6,8 +6,8 @@ use aws_sdk_bedrockruntime::types as bedrock;
 use aws_smithy_types::{Document, Number};
 use base64::Engine;
 use chrono::Utc;
-use mcp_core::{Tool, ToolCall, ToolError, ToolResult};
-use rmcp::model::{Content, RawContent, ResourceContents, Role};
+use mcp_core::{ToolCall, ToolError, ToolResult};
+use rmcp::model::{Content, RawContent, ResourceContents, Role, Tool};
 use serde_json::Value;
 
 use super::super::base::Usage;
@@ -184,9 +184,14 @@ pub fn to_bedrock_tool(tool: &Tool) -> Result<bedrock::Tool> {
     Ok(bedrock::Tool::ToolSpec(
         bedrock::ToolSpecification::builder()
             .name(tool.name.to_string())
-            .description(tool.description.to_string())
+            .description(
+                tool.description
+                    .as_ref()
+                    .map(|d| d.to_string())
+                    .unwrap_or_default(),
+            )
             .input_schema(bedrock::ToolInputSchema::Json(to_bedrock_json(
-                &tool.input_schema,
+                &Value::Object(tool.input_schema.as_ref().clone()),
             )))
             .build()?,
     ))
diff --git a/crates/goose/src/providers/formats/databricks.rs b/crates/goose/src/providers/formats/databricks.rs
index 91992eaa98..0d19f83464 100644
--- a/crates/goose/src/providers/formats/databricks.rs
+++ b/crates/goose/src/providers/formats/databricks.rs
@@ -5,10 +5,8 @@ use crate::providers::utils::{
     sanitize_function_name, ImageFormat,
 };
 use anyhow::{anyhow, Error};
-use mcp_core::ToolError;
-use mcp_core::{Tool, ToolCall};
-use rmcp::model::Role;
-use rmcp::model::{AnnotateAble, Content, RawContent, ResourceContents};
+use mcp_core::{ToolCall, ToolError};
+use rmcp::model::{AnnotateAble, Content, RawContent, ResourceContents, Role, Tool};
 use serde::{Deserialize, Serialize};
 use serde_json::{json, Value};
 
@@ -589,6 +587,7 @@ pub fn create_request(
 #[cfg(test)]
 mod tests {
     use super::*;
+    use rmcp::object;
     use serde_json::json;
 
     #[test]
@@ -703,7 +702,7 @@ mod tests {
         let tool = Tool::new(
             "test_tool",
             "A test tool",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "input": {
@@ -713,7 +712,6 @@ mod tests {
                 },
                 "required": ["input"]
             }),
-            None,
         );
 
         let spec = format_tools(&[tool])?;
@@ -795,7 +793,7 @@ mod tests {
         let tool1 = Tool::new(
             "test_tool",
             "Test tool",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "input": {
@@ -805,13 +803,12 @@ mod tests {
                 },
                 "required": ["input"]
             }),
-            None,
         );
 
         let tool2 = Tool::new(
             "test_tool",
             "Test tool",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "input": {
@@ -821,7 +818,6 @@ mod tests {
                 },
                 "required": ["input"]
             }),
-            None,
         );
 
         let result = format_tools(&[tool1, tool2]);
diff --git a/crates/goose/src/providers/formats/gcpvertexai.rs b/crates/goose/src/providers/formats/gcpvertexai.rs
index ab3399651d..e96a693b67 100644
--- a/crates/goose/src/providers/formats/gcpvertexai.rs
+++ b/crates/goose/src/providers/formats/gcpvertexai.rs
@@ -3,7 +3,7 @@ use crate::message::Message;
 use crate::model::ModelConfig;
 use crate::providers::base::Usage;
 use anyhow::{Context, Result};
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 use serde_json::Value;
 
 use std::fmt;
diff --git a/crates/goose/src/providers/formats/google.rs b/crates/goose/src/providers/formats/google.rs
index 5a4f0b8452..50c45ac3c5 100644
--- a/crates/goose/src/providers/formats/google.rs
+++ b/crates/goose/src/providers/formats/google.rs
@@ -4,9 +4,10 @@ use crate::providers::base::Usage;
 use crate::providers::errors::ProviderError;
 use crate::providers::utils::{is_valid_function_name, sanitize_function_name};
 use anyhow::Result;
-use mcp_core::tool::{Tool, ToolCall};
+use mcp_core::tool::ToolCall;
 use rand::{distributions::Alphanumeric, Rng};
-use rmcp::model::{AnnotateAble, RawContent, Role};
+use rmcp::model::{AnnotateAble, RawContent, Role, Tool};
+
 use serde_json::{json, Map, Value};
 use std::ops::Deref;
 
@@ -132,18 +133,17 @@ pub fn format_tools(tools: &[Tool]) -> Vec<Value> {
             let mut parameters = Map::new();
             parameters.insert("name".to_string(), json!(tool.name));
             parameters.insert("description".to_string(), json!(tool.description));
-            if let Some(tool_input_schema) = tool.input_schema.as_object() {
-                // Only add the parameters key if the tool schema has non-empty properties.
-                if tool_input_schema
-                    .get("properties")
-                    .and_then(|v| v.as_object())
-                    .is_some_and(|p| !p.is_empty())
-                {
-                    parameters.insert(
-                        "parameters".to_string(),
-                        process_map(tool_input_schema, None),
-                    );
-                }
+            let tool_input_schema = &tool.input_schema;
+            // Only add the parameters key if the tool schema has non-empty properties.
+            if tool_input_schema
+                .get("properties")
+                .and_then(|v| v.as_object())
+                .is_some_and(|p| !p.is_empty())
+            {
+                parameters.insert(
+                    "parameters".to_string(),
+                    process_map(tool_input_schema, None),
+                );
             }
             json!(parameters)
         })
@@ -320,7 +320,7 @@ pub fn create_request(
     }
     let mut generation_config = Map::new();
     if let Some(temp) = model_config.temperature {
-        generation_config.insert("temperature".to_string(), json!(temp));
+        generation_config.insert("temperature".to_string(), json!(temp as f64));
     }
     if let Some(tokens) = model_config.max_tokens {
         generation_config.insert("maxOutputTokens".to_string(), json!(tokens));
@@ -329,13 +329,14 @@ pub fn create_request(
         payload.insert("generationConfig".to_string(), json!(generation_config));
     }
 
-    Ok(Value::Object(payload))
+    Ok(json!(payload))
 }
 
 #[cfg(test)]
 mod tests {
     use super::*;
     use rmcp::model::Content;
+    use rmcp::object;
     use serde_json::json;
 
     fn set_up_text_message(text: &str, role: Role) -> Message {
@@ -374,17 +375,6 @@ mod tests {
         )
     }
 
-    fn set_up_tool(name: &str, description: &str, params: Value) -> Tool {
-        Tool {
-            name: name.to_string(),
-            description: description.to_string(),
-            input_schema: json!({
-                "properties": params
-            }),
-            annotations: None,
-        }
-    }
-
     #[test]
     fn test_get_usage() {
         let data = json!({
@@ -420,8 +410,11 @@ mod tests {
             "param1": "value1"
         });
         let messages = vec![
-            set_up_tool_request_message("id", ToolCall::new("tool_name", json!(arguments))),
-            set_up_tool_confirmation_message("id2", ToolCall::new("tool_name_2", json!(arguments))),
+            set_up_tool_request_message("id", ToolCall::new("tool_name", arguments.clone())),
+            set_up_tool_confirmation_message(
+                "id2",
+                ToolCall::new("tool_name_2", arguments.clone()),
+            ),
         ];
         let payload = format_messages(&messages);
         assert_eq!(payload.len(), 1);
@@ -478,100 +471,106 @@ mod tests {
 
     #[test]
     fn test_tools_to_google_spec_with_valid_tools() {
-        let params1 = json!({
-            "param1": {
-                "type": "string",
-                "description": "A parameter",
-                "field_does_not_accept": ["value1", "value2"]
+        let params1 = object!({
+            "properties": {
+                "param1": {
+                    "type": "string",
+                    "description": "A parameter",
+                    "field_does_not_accept": ["value1", "value2"]
+                }
             }
         });
-        let params2 = json!({
-            "param2": {
-                "type": "string",
-                "description": "B parameter",
+        let params2 = object!({
+            "properties": {
+                "param2": {
+                    "type": "string",
+                    "description": "B parameter",
+                }
             }
         });
-        let params3 = json!({
-            "body": {
-                "description": "Review comment text",
-                "type": "string"
-            },
-            "comments": {
-                "description": "Line-specific comments array of objects to place comments on pull request changes. Requires path and body. For line comments use line or position. For multi-line comments use start_line and line with optional side parameters.",
-                "type": "array",
-                "items": {
-                    "additionalProperties": false,
-                    "properties": {
-                        "body": {
-                            "description": "comment body",
-                            "type": "string"
-                        },
-                        "line": {
-                            "anyOf": [
-                                { "type": "number" },
-                                { "type": "null" }
-                            ],
-                            "description": "line number in the file to comment on. For multi-line comments, the end of the line range"
-                        },
-                        "path": {
-                            "description": "path to the file",
-                            "type": "string"
-                        },
-                        "position": {
-                            "anyOf": [
-                                { "type": "number" },
-                                { "type": "null" }
-                            ],
-                            "description": "position of the comment in the diff"
-                        },
-                        "side": {
-                            "anyOf": [
-                                { "type": "string" },
-                                { "type": "null" }
-                            ],
-                            "description": "The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. (LEFT or RIGHT)"
-                        },
-                        "start_line": {
-                            "anyOf": [
-                                { "type": "number" },
-                                { "type": "null" }
-                            ],
-                            "description": "The first line of the range to which the comment refers. Required for multi-line comments."
+        let params3 = object!({
+            "properties": {
+                "body": {
+                    "description": "Review comment text",
+                    "type": "string"
+                },
+                "comments": {
+                    "description": "Line-specific comments array of objects to place comments on pull request changes. Requires path and body. For line comments use line or position. For multi-line comments use start_line and line with optional side parameters.",
+                    "type": "array",
+                    "items": {
+                        "additionalProperties": false,
+                        "properties": {
+                            "body": {
+                                "description": "comment body",
+                                "type": "string"
+                            },
+                            "line": {
+                                "anyOf": [
+                                    { "type": "number" },
+                                    { "type": "null" }
+                                ],
+                                "description": "line number in the file to comment on. For multi-line comments, the end of the line range"
+                            },
+                            "path": {
+                                "description": "path to the file",
+                                "type": "string"
+                            },
+                            "position": {
+                                "anyOf": [
+                                    { "type": "number" },
+                                    { "type": "null" }
+                                ],
+                                "description": "position of the comment in the diff"
+                            },
+                            "side": {
+                                "anyOf": [
+                                    { "type": "string" },
+                                    { "type": "null" }
+                                ],
+                                "description": "The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. (LEFT or RIGHT)"
+                            },
+                            "start_line": {
+                                "anyOf": [
+                                    { "type": "number" },
+                                    { "type": "null" }
+                                ],
+                                "description": "The first line of the range to which the comment refers. Required for multi-line comments."
+                            },
+                            "start_side": {
+                                "anyOf": [
+                                    { "type": "string" },
+                                    { "type": "null" }
+                                ],
+                                "description": "The side of the diff on which the start line resides for multi-line comments. (LEFT or RIGHT)"
+                            }
                         },
-                        "start_side": {
-                            "anyOf": [
-                                { "type": "string" },
-                                { "type": "null" }
-                            ],
-                            "description": "The side of the diff on which the start line resides for multi-line comments. (LEFT or RIGHT)"
-                        }
-                    },
-                    "required": ["path", "body", "position", "line", "side", "start_line", "start_side"],
-                    "type": "object"
+                        "required": ["path", "body", "position", "line", "side", "start_line", "start_side"],
+                        "type": "object"
+                    }
+                },
+                "commitId": {
+                    "description": "SHA of commit to review",
+                    "type": "string"
+                },
+                "event": {
+                    "description": "Review action to perform",
+                    "enum": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
+                    "type": "string"
+                },
+                "owner": {
+                    "description": "Repository owner",
+                    "type": "string"
+                },
+                "pullNumber": {
+                    "description": "Pull request number",
+                    "type": "number"
                 }
-            },
-            "commitId": {
-                "description": "SHA of commit to review",
-                "type": "string"
-            },
-            "event": {
-                "description": "Review action to perform",
-                "enum": ["APPROVE", "REQUEST_CHANGES", "COMMENT"],
-                "type": "string"
-            },
-            "owner": {
-                "description": "Repository owner",
-                "type": "string"
-            },
-            "pullNumber": {
-                "description": "Pull request number",
-                "type": "number"
             }
         });
         let tools = vec![
-            set_up_tool("tool1", "description1", params1),
-            set_up_tool("tool2", "description2", params2),
-            set_up_tool("tool3", "description3", params3),
+            Tool::new("tool1", "description1", params1),
+            Tool::new("tool2", "description2", params2),
+            Tool::new("tool3", "description3", params3),
         ];
         let result = format_tools(&tools);
         assert_eq!(result.len(), 3);
@@ -681,14 +680,19 @@ mod tests {
 
     #[test]
     fn test_tools_to_google_spec_with_empty_properties() {
-        let tools = vec![Tool {
-            name: "tool1".to_string(),
-            description: "description1".to_string(),
-            input_schema: json!({
-                "properties": {}
-            }),
-            annotations: None,
-        }];
+        use rmcp::model::object;
+        use std::borrow::Cow;
+        use std::sync::Arc;
+
+        let schema = json!({
+            "properties": {}
+        });
+
+        let tools = vec![Tool::new(
+            Cow::Borrowed("tool1"),
+            Cow::Borrowed("description1"),
+            Arc::new(object(schema)),
+        )];
         let result = format_tools(&tools);
         assert_eq!(result.len(), 1);
         assert_eq!(result[0]["name"], "tool1");
diff --git a/crates/goose/src/providers/formats/openai.rs b/crates/goose/src/providers/formats/openai.rs
index 4e32706bfc..2a02ae6e4a 100644
--- a/crates/goose/src/providers/formats/openai.rs
+++ b/crates/goose/src/providers/formats/openai.rs
@@ -8,10 +8,8 @@ use crate::providers::utils::{
 use anyhow::{anyhow, Error};
 use async_stream::try_stream;
 use futures::Stream;
-use mcp_core::ToolError;
-use mcp_core::{Tool, ToolCall};
-use rmcp::model::Role;
-use rmcp::model::{AnnotateAble, Content, RawContent, ResourceContents};
+use mcp_core::{ToolCall, ToolError};
+use rmcp::model::{AnnotateAble, Content, RawContent, ResourceContents, Role, Tool};
 use serde::{Deserialize, Serialize};
 use serde_json::{json, Value};
 use std::ops::Deref;
@@ -635,6 +633,7 @@ pub fn create_request(
 #[cfg(test)]
 mod tests {
     use super::*;
+    use rmcp::object;
     use serde_json::json;
     use tokio::pin;
     use tokio_stream::{self, StreamExt};
@@ -751,7 +750,7 @@ mod tests {
         let tool = Tool::new(
             "test_tool",
             "A test tool",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "input": {
@@ -761,7 +760,6 @@ mod tests {
                 },
                 "required": ["input"]
             }),
-            None,
         );
 
         let spec = format_tools(&[tool])?;
@@ -843,7 +841,7 @@ mod tests {
         let tool1 = Tool::new(
             "test_tool",
             "Test tool",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "input": {
@@ -853,13 +851,12 @@ mod tests {
                 },
                 "required": ["input"]
             }),
-            None,
         );
 
         let tool2 = Tool::new(
             "test_tool",
             "Test tool",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "input": {
@@ -869,7 +866,6 @@ mod tests {
                 },
                 "required": ["input"]
             }),
-            None,
         );
 
         let result = format_tools(&[tool1, tool2]);
diff --git a/crates/goose/src/providers/formats/snowflake.rs b/crates/goose/src/providers/formats/snowflake.rs
index 7592d93c2a..270973024b 100644
--- a/crates/goose/src/providers/formats/snowflake.rs
+++ b/crates/goose/src/providers/formats/snowflake.rs
@@ -3,8 +3,8 @@ use crate::model::ModelConfig;
 use crate::providers::base::Usage;
 use crate::providers::errors::ProviderError;
 use anyhow::{anyhow, Result};
-use mcp_core::tool::{Tool, ToolCall};
-use rmcp::model::Role;
+use mcp_core::tool::ToolCall;
+use rmcp::model::{Role, Tool};
 use serde_json::{json, Value};
 use std::collections::HashSet;
 
@@ -359,6 +359,7 @@ pub fn create_request(
 #[cfg(test)]
 mod tests {
     use super::*;
+    use rmcp::object;
     use serde_json::json;
 
     #[test]
@@ -460,7 +461,7 @@ mod tests {
             Tool::new(
                 "calculator",
                 "Calculate mathematical expressions",
-                json!({
+                object!({
                     "type": "object",
                     "properties": {
                         "expression": {
@@ -469,12 +470,11 @@ mod tests {
                         }
                     }
                 }),
-                None,
             ),
             Tool::new(
                 "weather",
                 "Get weather information",
-                json!({
+                object!({
                     "type": "object",
                     "properties": {
                         "location": {
@@ -483,7 +483,6 @@ mod tests {
                         }
                     }
                 }),
-                None,
             ),
         ];
 
@@ -557,7 +556,7 @@ data: {"id":"a9537c2c-2017-4906-9817-2456168d89fa","model":"claude-3-5-sonnet","
         let tools = vec![Tool::new(
             "get_stock_price",
             "Get stock price information",
-            json!({
+            object!({
                 "type": "object",
                 "properties": {
                     "symbol": {
@@ -567,7 +566,6 @@ data: {"id":"a9537c2c-2017-4906-9817-2456168d89fa","model":"claude-3-5-sonnet","
                 },
                 "required": ["symbol"]
             }),
-            None,
         )];
 
         let request = create_request(&model_config, system, &messages, &tools)?;
@@ -664,8 +662,7 @@ data: {"id":"a9537c2c-2017-4906-9817-2456168d89fa","model":"claude-3-5-sonnet","
         let tools = vec![Tool::new(
             "test_tool",
             "Test tool",
-            json!({"type": "object", "properties": {}}),
-            None,
+            object!({"type": "object", "properties": {}}),
         )];
 
         let request = create_request(&model_config, system, &messages, &tools)?;
diff --git a/crates/goose/src/providers/gcpvertexai.rs b/crates/goose/src/providers/gcpvertexai.rs
index 82463fa284..2544a13569 100644
--- a/crates/goose/src/providers/gcpvertexai.rs
+++ b/crates/goose/src/providers/gcpvertexai.rs
@@ -21,7 +21,7 @@ use crate::providers::formats::gcpvertexai::{
 use crate::providers::formats::gcpvertexai::GcpLocation::Iowa;
 use crate::providers::gcpauth::GcpAuth;
 use crate::providers::utils::emit_debug_trace;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 /// Base URL for GCP Vertex AI documentation
 const GCP_VERTEX_AI_DOC_URL: &str = "https://cloud.google.com/vertex-ai";
diff --git a/crates/goose/src/providers/gemini_cli.rs b/crates/goose/src/providers/gemini_cli.rs
index 8f1f123a08..d1c60517ae 100644
--- a/crates/goose/src/providers/gemini_cli.rs
+++ b/crates/goose/src/providers/gemini_cli.rs
@@ -11,8 +11,8 @@ use super::errors::ProviderError;
 use super::utils::emit_debug_trace;
 use crate::message::{Message, MessageContent};
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
 use rmcp::model::Role;
+use rmcp::model::Tool;
 
 pub const GEMINI_CLI_DEFAULT_MODEL: &str = "gemini-2.5-pro";
 pub const GEMINI_CLI_KNOWN_MODELS: &[&str] = &["gemini-2.5-pro"];
diff --git a/crates/goose/src/providers/githubcopilot.rs b/crates/goose/src/providers/githubcopilot.rs
index 245b14801a..096cec5892 100644
--- a/crates/goose/src/providers/githubcopilot.rs
+++ b/crates/goose/src/providers/githubcopilot.rs
@@ -20,7 +20,7 @@ use crate::config::{Config, ConfigError};
 use crate::message::Message;
 use crate::model::ModelConfig;
 use crate::providers::base::ConfigKey;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 pub const GITHUB_COPILOT_DEFAULT_MODEL: &str = "gpt-4o";
 pub const GITHUB_COPILOT_KNOWN_MODELS: &[&str] = &[
diff --git a/crates/goose/src/providers/google.rs b/crates/goose/src/providers/google.rs
index 2e807bc684..6967128af7 100644
--- a/crates/goose/src/providers/google.rs
+++ b/crates/goose/src/providers/google.rs
@@ -9,8 +9,8 @@ use crate::providers::utils::{
 use anyhow::Result;
 use async_trait::async_trait;
 use axum::http::HeaderMap;
-use mcp_core::tool::Tool;
 use reqwest::Client;
+use rmcp::model::Tool;
 use serde_json::Value;
 use std::time::Duration;
 use url::Url;
diff --git a/crates/goose/src/providers/groq.rs b/crates/goose/src/providers/groq.rs
index c508d290df..5e3019f8cf 100644
--- a/crates/goose/src/providers/groq.rs
+++ b/crates/goose/src/providers/groq.rs
@@ -6,8 +6,8 @@ use crate::providers::formats::openai::{create_request, get_usage, response_to_m
 use crate::providers::utils::get_model;
 use anyhow::Result;
 use async_trait::async_trait;
-use mcp_core::Tool;
 use reqwest::{Client, StatusCode};
+use rmcp::model::Tool;
 use serde_json::Value;
 use std::time::Duration;
 use url::Url;
diff --git a/crates/goose/src/providers/lead_worker.rs b/crates/goose/src/providers/lead_worker.rs
index 5d993b525b..7909d5059e 100644
--- a/crates/goose/src/providers/lead_worker.rs
+++ b/crates/goose/src/providers/lead_worker.rs
@@ -8,7 +8,7 @@ use super::base::{LeadWorkerProviderTrait, Provider, ProviderMetadata, ProviderU
 use super::errors::ProviderError;
 use crate::message::{Message, MessageContent};
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 use rmcp::model::{Content, RawContent};
 
 /// A provider that switches between a lead model and a worker model based on turn count
diff --git a/crates/goose/src/providers/litellm.rs b/crates/goose/src/providers/litellm.rs
index 028731a4a2..303e3aaeb5 100644
--- a/crates/goose/src/providers/litellm.rs
+++ b/crates/goose/src/providers/litellm.rs
@@ -12,7 +12,7 @@ use super::errors::ProviderError;
 use super::utils::{emit_debug_trace, get_model, handle_response_openai_compat, ImageFormat};
 use crate::message::Message;
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 pub const LITELLM_DEFAULT_MODEL: &str = "gpt-4o-mini";
 pub const LITELLM_DOC_URL: &str = "https://docs.litellm.ai/docs/";
diff --git a/crates/goose/src/providers/ollama.rs b/crates/goose/src/providers/ollama.rs
index 46754a91a3..4001ee8573 100644
--- a/crates/goose/src/providers/ollama.rs
+++ b/crates/goose/src/providers/ollama.rs
@@ -6,8 +6,8 @@ use crate::model::ModelConfig;
 use crate::providers::formats::openai::{create_request, get_usage, response_to_message};
 use anyhow::Result;
 use async_trait::async_trait;
-use mcp_core::tool::Tool;
 use reqwest::Client;
+use rmcp::model::Tool;
 use serde_json::Value;
 use std::time::Duration;
 use url::Url;
diff --git a/crates/goose/src/providers/openai.rs b/crates/goose/src/providers/openai.rs
index 2ff225cd1c..ff6b65253c 100644
--- a/crates/goose/src/providers/openai.rs
+++ b/crates/goose/src/providers/openai.rs
@@ -22,7 +22,7 @@ use crate::model::ModelConfig;
 use crate::providers::base::MessageStream;
 use crate::providers::formats::openai::response_to_streaming_message;
 use crate::providers::utils::handle_status_openai_compat;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 pub const OPEN_AI_DEFAULT_MODEL: &str = "gpt-4o";
 pub const OPEN_AI_KNOWN_MODELS: &[&str] = &[
diff --git a/crates/goose/src/providers/openrouter.rs b/crates/goose/src/providers/openrouter.rs
index 21fd1e5e3b..e36f3f4069 100644
--- a/crates/goose/src/providers/openrouter.rs
+++ b/crates/goose/src/providers/openrouter.rs
@@ -13,7 +13,7 @@ use super::utils::{
 use crate::message::Message;
 use crate::model::ModelConfig;
 use crate::providers::formats::openai::{create_request, get_usage, response_to_message};
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 use url::Url;
 
 pub const OPENROUTER_DEFAULT_MODEL: &str = "anthropic/claude-3.5-sonnet";
diff --git a/crates/goose/src/providers/sagemaker_tgi.rs b/crates/goose/src/providers/sagemaker_tgi.rs
index d5da10583e..9421d75b2e 100644
--- a/crates/goose/src/providers/sagemaker_tgi.rs
+++ b/crates/goose/src/providers/sagemaker_tgi.rs
@@ -6,7 +6,7 @@ use async_trait::async_trait;
 use aws_config;
 use aws_sdk_bedrockruntime::config::ProvideCredentials;
 use aws_sdk_sagemakerruntime::Client as SageMakerClient;
-use mcp_core::Tool;
+use rmcp::model::Tool;
 use serde_json::{json, Value};
 use tokio::time::sleep;
 
diff --git a/crates/goose/src/providers/snowflake.rs b/crates/goose/src/providers/snowflake.rs
index 0ab6be5858..a19bbd1144 100644
--- a/crates/goose/src/providers/snowflake.rs
+++ b/crates/goose/src/providers/snowflake.rs
@@ -12,7 +12,7 @@ use super::utils::{get_model, ImageFormat};
 use crate::config::ConfigError;
 use crate::message::Message;
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 use url::Url;
 
 pub const SNOWFLAKE_DEFAULT_MODEL: &str = "claude-3-7-sonnet";
diff --git a/crates/goose/src/providers/testprovider.rs b/crates/goose/src/providers/testprovider.rs
index 9016bdcf96..7667109f41 100644
--- a/crates/goose/src/providers/testprovider.rs
+++ b/crates/goose/src/providers/testprovider.rs
@@ -11,7 +11,7 @@ use super::base::{Provider, ProviderMetadata, ProviderUsage};
 use super::errors::ProviderError;
 use crate::message::Message;
 use crate::model::ModelConfig;
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 
 #[derive(Debug, Clone, Serialize, Deserialize)]
 struct TestInput {
diff --git a/crates/goose/src/providers/toolshim.rs b/crates/goose/src/providers/toolshim.rs
index e1bec2239f..1eb43db2d2 100644
--- a/crates/goose/src/providers/toolshim.rs
+++ b/crates/goose/src/providers/toolshim.rs
@@ -37,9 +37,9 @@ use crate::message::{Message, MessageContent};
 use crate::model::ModelConfig;
 use crate::providers::formats::openai::create_request;
 use anyhow::Result;
-use mcp_core::tool::{Tool, ToolCall};
+use mcp_core::tool::ToolCall;
 use reqwest::Client;
-use rmcp::model::RawContent;
+use rmcp::model::{RawContent, Tool};
 use serde_json::{json, Value};
 use std::ops::Deref;
 use std::time::Duration;
@@ -297,7 +297,7 @@ pub fn format_tool_info(tools: &[Tool]) -> String {
     let mut tool_info = String::new();
     for tool in tools {
         tool_info.push_str(&format!(
-            "Tool Name: {}\nSchema: {}\nDescription: {}\n\n",
+            "Tool Name: {}\nSchema: {}\nDescription: {:?}\n\n",
             tool.name,
             serde_json::to_string_pretty(&tool.input_schema).unwrap_or_default(),
             tool.description
diff --git a/crates/goose/src/providers/venice.rs b/crates/goose/src/providers/venice.rs
index 5d1eab5eb8..75cb31145b 100644
--- a/crates/goose/src/providers/venice.rs
+++ b/crates/goose/src/providers/venice.rs
@@ -10,8 +10,8 @@ use super::base::{ConfigKey, Provider, ProviderMetadata, ProviderUsage, Usage};
 use super::errors::ProviderError;
 use crate::message::{Message, MessageContent};
 use crate::model::ModelConfig;
-use mcp_core::{tool::Tool, ToolCall, ToolResult};
-use rmcp::model::Role;
+use mcp_core::{ToolCall, ToolResult};
+use rmcp::model::{Role, Tool};
 
 // ---------- Capability Flags ----------
 #[derive(Debug)]
diff --git a/crates/goose/src/providers/xai.rs b/crates/goose/src/providers/xai.rs
index 9904531a3e..6d24e087b3 100644
--- a/crates/goose/src/providers/xai.rs
+++ b/crates/goose/src/providers/xai.rs
@@ -6,8 +6,8 @@ use crate::providers::formats::openai::{create_request, get_usage, response_to_m
 use crate::providers::utils::get_model;
 use anyhow::Result;
 use async_trait::async_trait;
-use mcp_core::Tool;
 use reqwest::{Client, StatusCode};
+use rmcp::model::Tool;
 use serde_json::Value;
 use std::time::Duration;
 use url::Url;
diff --git a/crates/goose/src/scheduler.rs b/crates/goose/src/scheduler.rs
index 50e06c24bb..9d879ac58f 100644
--- a/crates/goose/src/scheduler.rs
+++ b/crates/goose/src/scheduler.rs
@@ -1332,7 +1332,7 @@ mod tests {
         providers::base::{ProviderMetadata, ProviderUsage, Usage},
         providers::errors::ProviderError,
     };
-    use mcp_core::tool::Tool;
+    use rmcp::model::Tool;
     use rmcp::model::{AnnotateAble, RawTextContent, Role};
     // Removed: use crate::session::storage::{get_most_recent_session, read_metadata};
     // `read_metadata` is still used by the test itself, so keep it or its module.
diff --git a/crates/goose/src/session/info.rs b/crates/goose/src/session/info.rs
index 6c60d3310d..b5fc56bca1 100644
--- a/crates/goose/src/session/info.rs
+++ b/crates/goose/src/session/info.rs
@@ -100,7 +100,6 @@ pub fn get_valid_sorted_sessions(sort_order: SortOrder) -> Result<Vec<SessionInf
 
 #[cfg(test)]
 mod tests {
-    use super::*;
     use crate::session::SessionMetadata;
     use std::fs;
     use tempfile::tempdir;
diff --git a/crates/goose/src/token_counter.rs b/crates/goose/src/token_counter.rs
index 6f519beb98..daa6dca5fd 100644
--- a/crates/goose/src/token_counter.rs
+++ b/crates/goose/src/token_counter.rs
@@ -1,6 +1,6 @@
 use ahash::AHasher;
 use dashmap::DashMap;
-use mcp_core::Tool;
+use rmcp::model::Tool;
 use std::hash::{Hash, Hasher};
 use std::sync::Arc;
 use tiktoken_rs::CoreBPE;
@@ -79,7 +79,12 @@ impl AsyncTokenCounter {
             for tool in tools {
                 func_token_count += func_init;
                 let name = &tool.name;
-                let description = &tool.description.trim_end_matches('.');
+                let description = &tool
+                    .description
+                    .as_ref()
+                    .map(|d| d.as_ref())
+                    .unwrap_or_default()
+                    .trim_end_matches('.');
 
                 // Note: the separator (:) is likely tokenized with adjacent tokens, so we use original approach for accuracy
                 let line = format!("{}:{}", name, description);
@@ -225,7 +230,12 @@ impl TokenCounter {
             for tool in tools {
                 func_token_count += func_init; // Add tokens for start of each function
                 let name = &tool.name;
-                let description = &tool.description.trim_end_matches('.');
+                let description = &tool
+                    .description
+                    .as_ref()
+                    .map(|d| d.as_ref())
+                    .unwrap_or_default()
+                    .trim_end_matches('.');
                 let line = format!("{}:{}", name, description);
                 func_token_count += self.count_tokens(&line); // Add tokens for name and description
 
@@ -371,9 +381,8 @@ pub async fn create_async_token_counter() -> Result<AsyncTokenCounter, String> {
 mod tests {
     use super::*;
     use crate::message::{Message, MessageContent};
-    use mcp_core::tool::Tool;
-    use rmcp::model::Role;
-    use serde_json::json;
+    use rmcp::model::{Role, Tool};
+    use rmcp::object;
 
     #[test]
     fn test_token_counter_basic() {
@@ -428,10 +437,10 @@ mod tests {
             ),
         ];
 
-        let tools = vec![Tool {
-            name: "get_current_weather".to_string(),
-            description: "Get the current weather in a given location".to_string(),
-            input_schema: json!({
+        let tools = vec![Tool::new(
+            "get_current_weather",
+            "Get the current weather in a given location",
+            object!({
                 "properties": {
                     "location": {
                         "type": "string",
@@ -445,8 +454,7 @@ mod tests {
                 },
                 "required": ["location"]
             }),
-            annotations: None,
-        }];
+        )];
 
         let token_count_without_tools = counter.count_chat_tokens(system_prompt, &messages, &[]);
         println!("Total tokens without tools: {}", token_count_without_tools);
@@ -526,10 +534,10 @@ mod tests {
             ),
         ];
 
-        let tools = vec![Tool {
-            name: "get_current_weather".to_string(),
-            description: "Get the current weather in a given location".to_string(),
-            input_schema: json!({
+        let tools = vec![Tool::new(
+            "get_current_weather",
+            "Get the current weather in a given location",
+            object!({
                 "properties": {
                     "location": {
                         "type": "string",
@@ -543,8 +551,7 @@ mod tests {
                 },
                 "required": ["location"]
             }),
-            annotations: None,
-        }];
+        )];
 
         let token_count_without_tools = counter.count_chat_tokens(system_prompt, &messages, &[]);
         println!(
diff --git a/crates/goose/tests/agent.rs b/crates/goose/tests/agent.rs
index 497ebcaab7..016e9576eb 100644
--- a/crates/goose/tests/agent.rs
+++ b/crates/goose/tests/agent.rs
@@ -448,6 +448,8 @@ mod schedule_tool_tests {
         let tool = schedule_tool.unwrap();
         assert!(tool
             .description
+            .clone()
+            .unwrap_or_default()
             .contains("Manage scheduled recipe execution"));
     }
 
@@ -478,6 +480,8 @@ mod schedule_tool_tests {
         let tool = schedule_tool.unwrap();
         assert!(tool
             .description
+            .clone()
+            .unwrap_or_default()
             .contains("Manage scheduled recipe execution"));
 
         // Verify the tool has the expected actions in its schema
@@ -548,7 +552,7 @@ mod final_output_tool_tests {
         use goose::model::ModelConfig;
         use goose::providers::base::{Provider, ProviderUsage, Usage};
         use goose::providers::errors::ProviderError;
-        use mcp_core::tool::Tool;
+        use rmcp::model::Tool;
 
         #[derive(Clone)]
         struct MockProvider {
@@ -648,7 +652,7 @@ mod final_output_tool_tests {
         use goose::model::ModelConfig;
         use goose::providers::base::{Provider, ProviderUsage};
         use goose::providers::errors::ProviderError;
-        use mcp_core::tool::Tool;
+        use rmcp::model::Tool;
 
         #[derive(Clone)]
         struct MockProvider {
@@ -769,7 +773,7 @@ mod retry_tests {
     use goose::model::ModelConfig;
     use goose::providers::base::{Provider, ProviderUsage, Usage};
     use goose::providers::errors::ProviderError;
-    use mcp_core::tool::Tool;
+    use rmcp::model::Tool;
     use std::sync::atomic::{AtomicUsize, Ordering};
     use std::sync::Arc;
 
@@ -950,7 +954,8 @@ mod max_turns_tests {
     use goose::providers::base::{Provider, ProviderMetadata, ProviderUsage, Usage};
     use goose::providers::errors::ProviderError;
     use goose::session::storage::Identifier;
-    use mcp_core::tool::{Tool, ToolCall};
+    use mcp_core::tool::ToolCall;
+    use rmcp::model::Tool;
     use std::path::PathBuf;
 
     struct MockToolProvider {}
diff --git a/crates/goose/tests/providers.rs b/crates/goose/tests/providers.rs
index 0225c88a73..f0ac979edc 100644
--- a/crates/goose/tests/providers.rs
+++ b/crates/goose/tests/providers.rs
@@ -7,8 +7,9 @@ use goose::providers::{
     anthropic, azure, bedrock, databricks, google, groq, litellm, ollama, openai, openrouter,
     snowflake, xai,
 };
-use mcp_core::tool::Tool;
+use rmcp::model::Tool;
 use rmcp::model::{AnnotateAble, Content, RawImageContent};
+use rmcp::object;
 use std::collections::HashMap;
 use std::sync::Arc;
 use std::sync::Mutex;
@@ -118,7 +119,7 @@ impl ProviderTester {
         let weather_tool = Tool::new(
             "get_weather",
             "Get the weather for a location",
-            serde_json::json!({
+            object!({
                 "type": "object",
                 "required": ["location"],
                 "properties": {
@@ -128,7 +129,6 @@ impl ProviderTester {
                     }
                 }
             }),
-            None,
         );
 
         let message = Message::user().with_text("What's the weather like in San Francisco?");
@@ -309,11 +309,10 @@ impl ProviderTester {
         let screenshot_tool = Tool::new(
             "get_screenshot",
             "Get a screenshot of the current screen",
-            serde_json::json!({
+            object!({
                 "type": "object",
                 "properties": {}
             }),
-            None,
         );
 
         let user_message = Message::user().with_text("Take a screenshot please");
diff --git a/crates/mcp-core/src/protocol.rs b/crates/mcp-core/src/protocol.rs
index ea0f326690..031a880f22 100644
--- a/crates/mcp-core/src/protocol.rs
+++ b/crates/mcp-core/src/protocol.rs
@@ -1,5 +1,5 @@
 /// The protocol messages exchanged between client and server
-use crate::tool::Tool;
+use rmcp::model::Tool;
 use rmcp::model::{Content, ErrorData, Prompt, PromptMessage, Resource, ResourceContents};
 use serde::{Deserialize, Serialize};
 use serde_json::Value;
diff --git a/crates/mcp-server/src/main.rs b/crates/mcp-server/src/main.rs
index a9757c7e8d..78f712b14e 100644
--- a/crates/mcp-server/src/main.rs
+++ b/crates/mcp-server/src/main.rs
@@ -1,10 +1,12 @@
 use anyhow::Result;
 use mcp_core::handler::{PromptError, ResourceError};
-use mcp_core::tool::ToolAnnotations;
-use mcp_core::{handler::ToolError, protocol::ServerCapabilities, tool::Tool};
+use mcp_core::{handler::ToolError, protocol::ServerCapabilities};
 use mcp_server::router::{CapabilitiesBuilder, RouterService};
 use mcp_server::{ByteTransport, Router, Server};
-use rmcp::model::{Content, JsonRpcMessage, Prompt, PromptArgument, RawResource, Resource};
+use rmcp::model::{
+    Content, JsonRpcMessage, Prompt, PromptArgument, RawResource, Resource, Tool, ToolAnnotations,
+};
+use rmcp::object;
 use serde_json::Value;
 use std::{future::Future, pin::Pin, sync::Arc};
 use tokio::sync::mpsc;
@@ -72,51 +74,51 @@ impl Router for CounterRouter {
             Tool::new(
                 "increment".to_string(),
                 "Increment the counter by 1".to_string(),
-                serde_json::json!({
+                object!({
                     "type": "object",
                     "properties": {},
                     "required": []
                 }),
-                Some(ToolAnnotations {
-                    title: Some("Increment Tool".to_string()),
-                    read_only_hint: false,
-                    destructive_hint: false,
-                    idempotent_hint: false,
-                    open_world_hint: false,
-                }),
-            ),
+            )
+            .annotate(ToolAnnotations {
+                title: Some("Increment Tool".to_string()),
+                read_only_hint: Some(false),
+                destructive_hint: Some(false),
+                idempotent_hint: Some(false),
+                open_world_hint: Some(false),
+            }),
             Tool::new(
                 "decrement".to_string(),
                 "Decrement the counter by 1".to_string(),
-                serde_json::json!({
+                object!({
                     "type": "object",
                     "properties": {},
                     "required": []
                 }),
-                Some(ToolAnnotations {
-                    title: Some("Decrement Tool".to_string()),
-                    read_only_hint: false,
-                    destructive_hint: false,
-                    idempotent_hint: false,
-                    open_world_hint: false,
-                }),
-            ),
+            )
+            .annotate(ToolAnnotations {
+                title: Some("Decrement Tool".to_string()),
+                read_only_hint: Some(false),
+                destructive_hint: Some(false),
+                idempotent_hint: Some(false),
+                open_world_hint: Some(false),
+            }),
             Tool::new(
                 "get_value".to_string(),
                 "Get the current counter value".to_string(),
-                serde_json::json!({
+                object!({
                     "type": "object",
                     "properties": {},
                     "required": []
                 }),
-                Some(ToolAnnotations {
-                    title: Some("Get Value Tool".to_string()),
-                    read_only_hint: true,
-                    destructive_hint: false,
-                    idempotent_hint: false,
-                    open_world_hint: false,
-                }),
-            ),
+            )
+            .annotate(ToolAnnotations {
+                title: Some("Get Value Tool".to_string()),
+                read_only_hint: Some(true),
+                destructive_hint: Some(false),
+                idempotent_hint: Some(false),
+                open_world_hint: Some(false),
+            }),
         ]
     }
 
diff --git a/crates/mcp-server/src/router.rs b/crates/mcp-server/src/router.rs
index 4d6186f3ea..aeea7bf1b7 100644
--- a/crates/mcp-server/src/router.rs
+++ b/crates/mcp-server/src/router.rs
@@ -86,7 +86,7 @@ pub trait Router: Send + Sync + 'static {
     // in the protocol, instructions are optional but we make it required
     fn instructions(&self) -> String;
     fn capabilities(&self) -> ServerCapabilities;
-    fn list_tools(&self) -> Vec<mcp_core::tool::Tool>;
+    fn list_tools(&self) -> Vec<rmcp::model::Tool>;
     fn call_tool(
         &self,
         tool_name: &str,
-- 
2.34.1


From 177999c4ef5a5efb8f8bb54fc9bb67645484cbf8 Mon Sep 17 00:00:00 2001
From: d0rbu <hacperu2010@gmail.com>
Date: Thu, 24 Jul 2025 15:33:42 -0500
Subject: [PATCH 09/12] fix response

---
 crates/goose-cli/src/notifier/mod.rs | 90 ++++++++++++++++++++++++++--
 crates/goose-cli/src/session/mod.rs  | 38 +++++++++---
 2 files changed, 114 insertions(+), 14 deletions(-)

diff --git a/crates/goose-cli/src/notifier/mod.rs b/crates/goose-cli/src/notifier/mod.rs
index ee9d37db31..34937826b7 100644
--- a/crates/goose-cli/src/notifier/mod.rs
+++ b/crates/goose-cli/src/notifier/mod.rs
@@ -111,6 +111,8 @@ pub struct Notifier {
     current_context: Arc<Mutex<Option<NotificationContext>>>,
     current_messages: Arc<Mutex<Vec<Message>>>,
     message_injection_callback: Option<MessageInjectionCallback>,
+    // Store the suggested response to reuse for fallback injection
+    suggested_response: Arc<Mutex<Option<String>>>,
 }
 
 #[derive(Debug, Clone)]
@@ -148,6 +150,7 @@ impl Notifier {
             current_context: Arc::new(Mutex::new(None)),
             current_messages: Arc::new(Mutex::new(Vec::new())),
             message_injection_callback: None,
+            suggested_response: Arc::new(Mutex::new(None)),
         }
     }
 
@@ -299,6 +302,13 @@ impl Notifier {
         let mut waiting = self.waiting_for_input.lock().await;
         *waiting = false;
 
+        // Clear any stored suggested response since user responded
+        let mut stored_response = self.suggested_response.lock().await;
+        if stored_response.is_some() {
+            *stored_response = None;
+            println!("[DEBUG] Notifier: Cleared stored suggested response due to user input");
+        }
+
         // Mark last notification as answered
         let mut history = self.history.lock().await;
         history.mark_last_answered();
@@ -356,12 +366,26 @@ impl Notifier {
 
     /// Process a reply from a notification provider
     async fn process_notification_reply(&self, reply: NotificationReply) -> Result<()> {
+        println!("[DEBUG] Notifier: Processing reply from {}: '{}'", reply.provider, reply.message);
+        
         // Create a user message from the reply
         let user_message = Message::user().with_text(&reply.message);
+        println!("[DEBUG] Notifier: Created user message with text: '{}'", reply.message);
 
         // Inject into session if callback is set
         if let Some(callback) = &self.message_injection_callback {
-            callback(user_message).await?;
+            println!("[DEBUG] Notifier: Message injection callback is available, calling it...");
+            match callback(user_message).await {
+                Ok(()) => {
+                    println!("[DEBUG] Notifier: Message injection callback completed successfully");
+                }
+                Err(e) => {
+                    println!("[DEBUG] Notifier: Message injection callback failed: {}", e);
+                    return Err(e);
+                }
+            }
+        } else {
+            println!("[DEBUG] Notifier: No message injection callback set!");
         }
 
         Ok(())
@@ -408,15 +432,26 @@ impl Notifier {
                             let elapsed = response_time.elapsed();
 
                             if !first_notification_sent && elapsed >= Duration::from_secs(adapted_timeout) {
+                                println!("[DEBUG] Notifier: First timeout reached after {}s (adapted: {}s)", elapsed.as_secs(), adapted_timeout);
 
                                 // Send first notification
                                 #[cfg(feature = "notifications")]
                                 let fallback_preview = if let Some(intelligence) = &notifier.intelligence {
                                     match intelligence.generate_fallback_response(&context).await {
-                                        Ok(response) => Some(response),
-                                        Err(_) => None,
+                                        Ok(response) => {
+                                            println!("[DEBUG] Notifier: Generated suggested response for notification: '{}'", response);
+                                            // Store this response for later fallback injection
+                                            let mut stored_response = notifier.suggested_response.lock().await;
+                                            *stored_response = Some(response.clone());
+                                            Some(response)
+                                        },
+                                        Err(e) => {
+                                            println!("[DEBUG] Notifier: Failed to generate suggested response: {}", e);
+                                            None
+                                        }
                                     }
                                 } else {
+                                    println!("[DEBUG] Notifier: No intelligence available for suggested response");
                                     None
                                 };
                                 
@@ -440,6 +475,9 @@ impl Notifier {
                                 first_notification_sent = true;
                             } else if first_notification_sent &&
                                       elapsed >= Duration::from_secs(adapted_timeout + notifier.config.fallback_timeout) {
+                                
+                                println!("[DEBUG] Notifier: Fallback timeout reached after {}s (adapted: {}s + fallback: {}s)", 
+                                    elapsed.as_secs(), adapted_timeout, notifier.config.fallback_timeout);
 
                                 if should_follow_up {
 
@@ -457,16 +495,58 @@ impl Notifier {
                                 }
 
                                 // Execute fallback action
-                                let response = &context.summary;
+                                println!("[DEBUG] Notifier: Timeout reached, using stored suggested response for injection...");
+                                
+                                // Use the previously stored suggested response
+                                let stored_response = notifier.suggested_response.lock().await;
+                                let fallback_response = if let Some(stored) = &*stored_response {
+                                    println!("[DEBUG] Notifier: Using stored suggested response: '{}'", stored);
+                                    stored.clone()
+                                } else {
+                                    println!("[DEBUG] Notifier: No stored suggested response, generating new fallback...");
+                                    
+                                    #[cfg(feature = "notifications")]
+                                    let generated = if let Some(intelligence) = &notifier.intelligence {
+                                        match intelligence.generate_fallback_response(&context).await {
+                                            Ok(response) => {
+                                                println!("[DEBUG] Notifier: Generated new fallback response: '{}'", response);
+                                                response
+                                            },
+                                            Err(e) => {
+                                                println!("[DEBUG] Notifier: Failed to generate fallback response: {}, using default", e);
+                                                "I'll continue when you're ready. Please let me know when you can provide the needed input.".to_string()
+                                            }
+                                        }
+                                    } else {
+                                        println!("[DEBUG] Notifier: No intelligence available, using default fallback");
+                                        "I'll continue when you're ready. Please let me know when you can provide the needed input.".to_string()
+                                    };
+                                    
+                                    #[cfg(not(feature = "notifications"))]
+                                    let generated = "I'll continue when you're ready. Please let me know when you can provide the needed input.".to_string();
+                                    
+                                    generated
+                                };
+                                drop(stored_response); // Release the lock
+                                
+                                println!("[DEBUG] Notifier: Injecting fallback response into chat: '{}'", fallback_response);
+                                
                                 if let Err(e) = notifier.process_notification_reply(NotificationReply {
                                     provider: "Fallback".to_string(),
                                     user_id: "system".to_string(),
-                                    message: response.clone(),
+                                    message: fallback_response,
                                     timestamp: Instant::now(),
                                 }).await {
                                     eprintln!("[ERROR] Notifier: Failed to inject fallback response: {}", e);
+                                } else {
+                                    println!("[DEBUG] Notifier: Successfully injected fallback response");
                                 }
 
+                                // Clear the stored response to avoid reusing it
+                                let mut stored_response = notifier.suggested_response.lock().await;
+                                *stored_response = None;
+                                println!("[DEBUG] Notifier: Cleared stored suggested response");
+
                                 // Reset to avoid multiple fallbacks
                                 first_notification_sent = false;
 
diff --git a/crates/goose-cli/src/session/mod.rs b/crates/goose-cli/src/session/mod.rs
index 600cac7dc1..5cf07c5768 100644
--- a/crates/goose-cli/src/session/mod.rs
+++ b/crates/goose-cli/src/session/mod.rs
@@ -494,18 +494,26 @@ impl Session {
         loop {
             // Process any pending notification messages first
             let mut input_processed_from_notification = false;
-            // println!("[DEBUG] Session: Checking for pending notification messages...");
+            println!("[DEBUG] Session: Checking for pending notification messages...");
             if let Some(pending_messages) = &self.pending_notification_messages {
-                // println!("[DEBUG] Session: pending_notification_messages is Some, checking queue...");
+                println!("[DEBUG] Session: pending_notification_messages is Some, checking queue...");
                 let mut queue = pending_messages.lock().await;
-                // println!("[DEBUG] Session: Queue size: {}", queue.len());
+                println!("[DEBUG] Session: Queue size: {}", queue.len());
                 if !queue.is_empty() {
 
                     // Drain messages into a temporary vector
                     let drained: Vec<_> = queue.drain(..).collect();
                     drop(queue); // Explicitly drop the lock before mutably borrowing self
                     for message in drained {
-
+                        println!("[DEBUG] Session: Processing notification reply: {}",
+                            message.content.iter()
+                                .filter_map(|c| match c {
+                                    MessageContent::Text(text) => Some(text.text.as_str()),
+                                    _ => None,
+                                })
+                                .collect::<Vec<_>>()
+                                .join(" ")
+                        );
 
                         // Add to conversation
                         self.push_message(message);
@@ -522,24 +530,24 @@ impl Session {
                         }
 
                         // Process the injected message
-                        // println!("[DEBUG] Session: Starting process_agent_response for notification message...");
+                        println!("[DEBUG] Session: Starting process_agent_response for notification message...");
                         output::show_thinking();
                         self.process_agent_response(true).await?;
                         output::hide_thinking();
-                        // println!("[DEBUG] Session: Completed process_agent_response for notification message");
+                        println!("[DEBUG] Session: Completed process_agent_response for notification message");
 
                         input_processed_from_notification = true;
                     }
                 } else {
-                    // println!("[DEBUG] Session: Queue is empty");
+                    println!("[DEBUG] Session: Queue is empty");
                 }
             } else {
-                // println!("[DEBUG] Session: pending_notification_messages is None");
+                println!("[DEBUG] Session: pending_notification_messages is None");
             }
 
             // If we processed notification messages, skip input and continue loop
             if input_processed_from_notification {
-                // println!("[DEBUG] Session: Processed notification messages, continuing loop to check for more messages");
+                println!("[DEBUG] Session: Processed notification messages, continuing loop to check for more messages");
                 continue;
             }
 
@@ -1844,14 +1852,26 @@ impl Session {
             let pending = pending_messages.clone();
             
             Box::pin(async move {
+                println!("[DEBUG] Session: Message injection callback called with message: {:?}", 
+                    message.content.iter()
+                        .filter_map(|c| match c {
+                            MessageContent::Text(text) => Some(text.text.as_str()),
+                            _ => None,
+                        })
+                        .collect::<Vec<_>>()
+                        .join(" ")
+                );
+                
                 // Add the message to a queue for processing
                 let mut queue = pending.lock().await;
                 queue.push(message);
+                println!("[DEBUG] Session: Message added to notification queue, queue size now: {}", queue.len());
 
                 Ok(())
             })
         });
         
+        println!("[DEBUG] Session: Setting up message injection callback for notifier");
         notifier.set_message_injection_callback(callback);
         
         // Store the pending messages queue for later processing
-- 
2.34.1


From ed5721e698073f886b13769dce88f795221982c0 Mon Sep 17 00:00:00 2001
From: taniashiba <126204004+taniashiba@users.noreply.github.com>
Date: Thu, 24 Jul 2025 16:47:58 -0400
Subject: [PATCH 10/12] docs: Quick spotlight fix (#3633)

Co-authored-by: Tania Chakraborty <tchakraborty@block.xyz>
---
 documentation/src/pages/community/data/june-2025.json | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/documentation/src/pages/community/data/june-2025.json b/documentation/src/pages/community/data/june-2025.json
index f2d7cddb14..d4c5997d42 100644
--- a/documentation/src/pages/community/data/june-2025.json
+++ b/documentation/src/pages/community/data/june-2025.json
@@ -3,7 +3,8 @@
   "communityStars": [
     {
       "name": "Audi_Guy",
-      "handle": "TBD"
+      "handle": "TBD",
+      "avatarUrl": "https://cdn.discordapp.com/avatars/1383038503650197584/7c2cadbe1e8515b3565b9f39daa774af?size=1024"
     },
     {
       "name": "jwoehr",
-- 
2.34.1


From 7c49d9dc33e3df261f7e5d3ad9486fa1ddf322e1 Mon Sep 17 00:00:00 2001
From: d0rbu <hacperu2010@gmail.com>
Date: Thu, 24 Jul 2025 18:53:11 -0500
Subject: [PATCH 11/12] remove debug lines and update prompts to be more
 independent

---
 crates/goose-cli/src/notifier/intelligence.rs |  26 ++-
 crates/goose-cli/src/notifier/mod.rs          |  60 +-----
 crates/goose-cli/src/session/mod.rs           |  38 ----
 crates/goose/src/prompts/system.md            | 189 ++++++++++++++++++
 crates/goose/src/providers/toolshim.rs        |   2 +-
 5 files changed, 216 insertions(+), 99 deletions(-)

diff --git a/crates/goose-cli/src/notifier/intelligence.rs b/crates/goose-cli/src/notifier/intelligence.rs
index c1b166f20c..a9360c3ba7 100644
--- a/crates/goose-cli/src/notifier/intelligence.rs
+++ b/crates/goose-cli/src/notifier/intelligence.rs
@@ -32,17 +32,17 @@ Based on the following conversation context, create a brief summary of what the
 {{ wait_type }}
 
 ## Instructions:
-- Keep the summary under 100 words
 - Be specific about what action or input is needed
 - Use clear, natural language
 - Focus on what the user needs to do next
+- Keep key details in the summary but don't make it too long. The user should have the information they need to make an informed decision.
 
-Generate a clear, actionable summary:
+Generate a clear, actionable summary based on the conversation context and wait type.
 "#;
 
 #[cfg(feature = "notifications")]
 const NOTIFICATION_RESPONSE_TEMPLATE: &str = r#"
-You are helping to generate a suggested response for a user who received a notification about their AI assistant.
+You are helping to generate a suggested response for a user who received a notification from their AI assistant.
 
 ## Context Summary:
 {{ summary }}
@@ -55,11 +55,11 @@ You are helping to generate a suggested response for a user who received a notif
 
 ## Instructions:
 - Generate a helpful response the user could send to continue the conversation
-- Keep it under 50 words
 - Be specific and actionable
 - Use natural language as if the user is typing it
+- Be very particular about details - ideally, the assistant should know exactly what to do next without any follow up questions
 
-Generate a suggested response:
+Respond with a suggested response for the user to use. DO NOT include any other text in your response, such as "Here is a suggested response: ..." or "Sure, ...".
 "#;
 
 /// Types of wait states
@@ -126,8 +126,8 @@ impl NotificationIntelligence {
     }
 
     /// Generate a fallback response for timeout
-    pub async fn generate_fallback_response(&self, context: &NotificationContext) -> Result<String> {
-        match self.generate_response(&[], &context.wait_type, &context.summary).await {
+    pub async fn generate_fallback_response(&self, context: &NotificationContext, messages: &[Message]) -> Result<String> {
+        match self.generate_response(messages, &context.wait_type, &context.summary).await {
             Ok(response) => Ok(response),
             Err(_) => Ok(self.generate_fallback_response_simple(&context.wait_type)),
         }
@@ -281,11 +281,15 @@ impl NotificationIntelligence {
         }
     }
 
-    /// Format messages for prompt context
+    /// Format messages for prompt context (uses rolling window of recent messages)
     fn format_messages(messages: &[Message]) -> String {
         messages
             .iter()
-            .take(10) // Last 10 messages for context
+            .rev() // Reverse to get most recent first
+            .take(10) // Take last 10 messages for context
+            .collect::<Vec<_>>()
+            .into_iter()
+            .rev() // Reverse back to chronological order
             .map(|msg| {
                 let role = if msg.role == Role::User { "User" } else { "Assistant" };
                 msg.content.iter().find_map(|c| {
@@ -587,7 +591,7 @@ Provide a reasonable next step.
             summary: "Waiting for next instruction".to_string(),
         };
 
-        let response = intelligence.generate_fallback_response(&context).await.unwrap();
+        let response = intelligence.generate_fallback_response(&context, &[]).await.unwrap();
         assert_eq!(response, "Please provide more details about what you'd like me to do.");
     }
 
@@ -604,7 +608,7 @@ Provide a reasonable next step.
             summary: "Waiting for confirmation".to_string(),
         };
 
-        let response = intelligence.generate_fallback_response(&context).await.unwrap();
+        let response = intelligence.generate_fallback_response(&context, &[]).await.unwrap();
         assert_eq!(response, "Please confirm when you're ready to proceed.");
     }
 
diff --git a/crates/goose-cli/src/notifier/mod.rs b/crates/goose-cli/src/notifier/mod.rs
index 34937826b7..20edb1b355 100644
--- a/crates/goose-cli/src/notifier/mod.rs
+++ b/crates/goose-cli/src/notifier/mod.rs
@@ -306,7 +306,6 @@ impl Notifier {
         let mut stored_response = self.suggested_response.lock().await;
         if stored_response.is_some() {
             *stored_response = None;
-            println!("[DEBUG] Notifier: Cleared stored suggested response due to user input");
         }
 
         // Mark last notification as answered
@@ -366,26 +365,13 @@ impl Notifier {
 
     /// Process a reply from a notification provider
     async fn process_notification_reply(&self, reply: NotificationReply) -> Result<()> {
-        println!("[DEBUG] Notifier: Processing reply from {}: '{}'", reply.provider, reply.message);
-        
-        // Create a user message from the reply
-        let user_message = Message::user().with_text(&reply.message);
-        println!("[DEBUG] Notifier: Created user message with text: '{}'", reply.message);
+        // Create a user message from the reply with provider info prepended
+        let prefixed_message = format!("[Message sent from {}] {}", reply.provider, reply.message);
+        let user_message = Message::user().with_text(&prefixed_message);
 
         // Inject into session if callback is set
         if let Some(callback) = &self.message_injection_callback {
-            println!("[DEBUG] Notifier: Message injection callback is available, calling it...");
-            match callback(user_message).await {
-                Ok(()) => {
-                    println!("[DEBUG] Notifier: Message injection callback completed successfully");
-                }
-                Err(e) => {
-                    println!("[DEBUG] Notifier: Message injection callback failed: {}", e);
-                    return Err(e);
-                }
-            }
-        } else {
-            println!("[DEBUG] Notifier: No message injection callback set!");
+            callback(user_message).await?;
         }
 
         Ok(())
@@ -432,26 +418,20 @@ impl Notifier {
                             let elapsed = response_time.elapsed();
 
                             if !first_notification_sent && elapsed >= Duration::from_secs(adapted_timeout) {
-                                println!("[DEBUG] Notifier: First timeout reached after {}s (adapted: {}s)", elapsed.as_secs(), adapted_timeout);
-
                                 // Send first notification
                                 #[cfg(feature = "notifications")]
                                 let fallback_preview = if let Some(intelligence) = &notifier.intelligence {
-                                    match intelligence.generate_fallback_response(&context).await {
+                                    let current_messages = notifier.current_messages.lock().await;
+                                    match intelligence.generate_fallback_response(&context, &current_messages).await {
                                         Ok(response) => {
-                                            println!("[DEBUG] Notifier: Generated suggested response for notification: '{}'", response);
                                             // Store this response for later fallback injection
                                             let mut stored_response = notifier.suggested_response.lock().await;
                                             *stored_response = Some(response.clone());
                                             Some(response)
                                         },
-                                        Err(e) => {
-                                            println!("[DEBUG] Notifier: Failed to generate suggested response: {}", e);
-                                            None
-                                        }
+                                        Err(_) => None
                                     }
                                 } else {
-                                    println!("[DEBUG] Notifier: No intelligence available for suggested response");
                                     None
                                 };
                                 
@@ -475,9 +455,6 @@ impl Notifier {
                                 first_notification_sent = true;
                             } else if first_notification_sent &&
                                       elapsed >= Duration::from_secs(adapted_timeout + notifier.config.fallback_timeout) {
-                                
-                                println!("[DEBUG] Notifier: Fallback timeout reached after {}s (adapted: {}s + fallback: {}s)", 
-                                    elapsed.as_secs(), adapted_timeout, notifier.config.fallback_timeout);
 
                                 if should_follow_up {
 
@@ -495,30 +472,20 @@ impl Notifier {
                                 }
 
                                 // Execute fallback action
-                                println!("[DEBUG] Notifier: Timeout reached, using stored suggested response for injection...");
-                                
                                 // Use the previously stored suggested response
                                 let stored_response = notifier.suggested_response.lock().await;
                                 let fallback_response = if let Some(stored) = &*stored_response {
-                                    println!("[DEBUG] Notifier: Using stored suggested response: '{}'", stored);
                                     stored.clone()
                                 } else {
-                                    println!("[DEBUG] Notifier: No stored suggested response, generating new fallback...");
                                     
                                     #[cfg(feature = "notifications")]
                                     let generated = if let Some(intelligence) = &notifier.intelligence {
-                                        match intelligence.generate_fallback_response(&context).await {
-                                            Ok(response) => {
-                                                println!("[DEBUG] Notifier: Generated new fallback response: '{}'", response);
-                                                response
-                                            },
-                                            Err(e) => {
-                                                println!("[DEBUG] Notifier: Failed to generate fallback response: {}, using default", e);
-                                                "I'll continue when you're ready. Please let me know when you can provide the needed input.".to_string()
-                                            }
+                                        let current_messages = notifier.current_messages.lock().await;
+                                        match intelligence.generate_fallback_response(&context, &current_messages).await {
+                                            Ok(response) => response,
+                                            Err(_) => "I'll continue when you're ready. Please let me know when you can provide the needed input.".to_string()
                                         }
                                     } else {
-                                        println!("[DEBUG] Notifier: No intelligence available, using default fallback");
                                         "I'll continue when you're ready. Please let me know when you can provide the needed input.".to_string()
                                     };
                                     
@@ -529,8 +496,6 @@ impl Notifier {
                                 };
                                 drop(stored_response); // Release the lock
                                 
-                                println!("[DEBUG] Notifier: Injecting fallback response into chat: '{}'", fallback_response);
-                                
                                 if let Err(e) = notifier.process_notification_reply(NotificationReply {
                                     provider: "Fallback".to_string(),
                                     user_id: "system".to_string(),
@@ -538,14 +503,11 @@ impl Notifier {
                                     timestamp: Instant::now(),
                                 }).await {
                                     eprintln!("[ERROR] Notifier: Failed to inject fallback response: {}", e);
-                                } else {
-                                    println!("[DEBUG] Notifier: Successfully injected fallback response");
                                 }
 
                                 // Clear the stored response to avoid reusing it
                                 let mut stored_response = notifier.suggested_response.lock().await;
                                 *stored_response = None;
-                                println!("[DEBUG] Notifier: Cleared stored suggested response");
 
                                 // Reset to avoid multiple fallbacks
                                 first_notification_sent = false;
diff --git a/crates/goose-cli/src/session/mod.rs b/crates/goose-cli/src/session/mod.rs
index 5cf07c5768..ec28a7480f 100644
--- a/crates/goose-cli/src/session/mod.rs
+++ b/crates/goose-cli/src/session/mod.rs
@@ -494,27 +494,13 @@ impl Session {
         loop {
             // Process any pending notification messages first
             let mut input_processed_from_notification = false;
-            println!("[DEBUG] Session: Checking for pending notification messages...");
             if let Some(pending_messages) = &self.pending_notification_messages {
-                println!("[DEBUG] Session: pending_notification_messages is Some, checking queue...");
                 let mut queue = pending_messages.lock().await;
-                println!("[DEBUG] Session: Queue size: {}", queue.len());
                 if !queue.is_empty() {
-
                     // Drain messages into a temporary vector
                     let drained: Vec<_> = queue.drain(..).collect();
                     drop(queue); // Explicitly drop the lock before mutably borrowing self
                     for message in drained {
-                        println!("[DEBUG] Session: Processing notification reply: {}",
-                            message.content.iter()
-                                .filter_map(|c| match c {
-                                    MessageContent::Text(text) => Some(text.text.as_str()),
-                                    _ => None,
-                                })
-                                .collect::<Vec<_>>()
-                                .join(" ")
-                        );
-
                         // Add to conversation
                         self.push_message(message);
 
@@ -530,24 +516,17 @@ impl Session {
                         }
 
                         // Process the injected message
-                        println!("[DEBUG] Session: Starting process_agent_response for notification message...");
                         output::show_thinking();
                         self.process_agent_response(true).await?;
                         output::hide_thinking();
-                        println!("[DEBUG] Session: Completed process_agent_response for notification message");
 
                         input_processed_from_notification = true;
                     }
-                } else {
-                    println!("[DEBUG] Session: Queue is empty");
                 }
-            } else {
-                println!("[DEBUG] Session: pending_notification_messages is None");
             }
 
             // If we processed notification messages, skip input and continue loop
             if input_processed_from_notification {
-                println!("[DEBUG] Session: Processed notification messages, continuing loop to check for more messages");
                 continue;
             }
 
@@ -561,7 +540,6 @@ impl Session {
             if input_task_handle.is_none() {
                 // Display context usage only when we're about to start waiting for user input
                 self.display_context_usage().await?;
-                // println!("[DEBUG] Session: Starting background input task...");
                 let tx = input_tx.clone();
                 let completion_cache = self.completion_cache.clone();
                 let edit_mode = self.edit_mode;
@@ -615,14 +593,12 @@ impl Session {
             let input_result = tokio::select! {
                 // Check for completed input
                 result = input_rx.recv() => {
-                    // println!("[DEBUG] Session: Received input result");
                     // Clean up the completed task
                     if let Some(handle) = input_task_handle.take() {
                         let _ = handle.await;
                     }
                     match result {
                         Some(Ok(input)) => {
-                            // println!("[DEBUG] Session: Input: {:?}", &input);
                             input
                         }
                         Some(Err(e)) => {
@@ -635,7 +611,6 @@ impl Session {
                 }
                 // Timeout every 2 seconds to check for notification messages (only if not processing)
                 _ = tokio::time::sleep(tokio::time::Duration::from_secs(2)) => {
-                    // println!("[DEBUG] Session: 2-second timeout fired - checking for notification messages");
                     continue; // Go back to the top of the loop to check for pending messages
                 }
             };
@@ -1852,26 +1827,13 @@ impl Session {
             let pending = pending_messages.clone();
             
             Box::pin(async move {
-                println!("[DEBUG] Session: Message injection callback called with message: {:?}", 
-                    message.content.iter()
-                        .filter_map(|c| match c {
-                            MessageContent::Text(text) => Some(text.text.as_str()),
-                            _ => None,
-                        })
-                        .collect::<Vec<_>>()
-                        .join(" ")
-                );
-                
                 // Add the message to a queue for processing
                 let mut queue = pending.lock().await;
                 queue.push(message);
-                println!("[DEBUG] Session: Message added to notification queue, queue size now: {}", queue.len());
 
                 Ok(())
             })
         });
-        
-        println!("[DEBUG] Session: Setting up message injection callback for notifier");
         notifier.set_message_injection_callback(callback);
         
         // Store the pending messages queue for later processing
diff --git a/crates/goose/src/prompts/system.md b/crates/goose/src/prompts/system.md
index 2681696a0d..fc61d66b27 100644
--- a/crates/goose/src/prompts/system.md
+++ b/crates/goose/src/prompts/system.md
@@ -38,6 +38,195 @@ No extensions are defined. You should let the user know that they should add ext
 
 {{tool_selection_strategy}}
 
+# Tool Usage Guidelines
+
+**CRITICAL**: When you can accomplish a task with available tools, don't be afraid to use them! Do not explain what you could do - just do it.
+
+## Tool Naming Convention
+- Tools follow the pattern: `extension__tool_name`
+- Example: `developer__shell`, `platform__search_available_extensions`
+- Always use the FULL prefixed name, never just the base name
+
+## When to Use Tools vs. Explain
+- **USE TOOLS when**: User requests actions (run commands, edit files, search, etc.)
+- **EXPLAIN when**: User asks questions about concepts, needs help understanding something
+
+## Tool Usage Best Practices
+1. **Be Direct**: If user says something like "run ls", use `developer__shell` with `{"command": "ls"}` immediately
+2. **Use Real Values**: Never use placeholders like "your_command_here" or "example.py"
+3. **One Tool Per Step**: Focus on one tool call at a time, then assess results
+4. **No Verbose Setup**: Don't explain what you're about to do - just do it
+5. **Handle Errors**: If a tool fails, try a corrected approach or alternative tool
+
+## Common Action Patterns
+- **"list files"** → `developer__shell` with `{"command": "ls"}` or `{"command": "ls -la"}`
+- **"check what's in directory"** → Use `developer__shell` with appropriate command
+- **"edit this file"** → Use `developer__text_editor` with specific parameters
+- **"search for X"** → Use `developer__grep` or `developer__glob` as appropriate
+- **"run command X"** → Use `developer__shell` with `{"command": "X"}`
+
+## Error Recovery
+- If you use wrong tool name, correct it immediately in next attempt
+- If command fails, analyze error and try corrected version
+- Don't apologize extensively - just fix and continue
+
+# Remote Communication & Independence
+
+## When User is Away (Remote Messages)
+**SPECIAL MODE**: When you see messages that start with `[Message sent from Discord]`, `[Message sent from Slack]`, or similar provider prefixes, the user is communicating remotely and likely away from their computer. In this mode:
+
+### **MAXIMUM INDEPENDENCE REQUIRED**
+1. **Make ALL decisions yourself** - Don't ask for confirmation on reasonable actions
+2. **Use sensible defaults** - Pick the most logical option when choices exist
+3. **Complete tasks fully** - Don't stop halfway for minor details
+4. **Fix problems autonomously** - If something breaks, diagnose and fix it yourself
+5. **Anticipate needs** - Think ahead about what else the user might want
+
+### **Decision-Making Rules for Remote Mode**
+- **File paths**: Use current directory or most obvious location
+- **Commands**: Choose safe, standard approaches
+- **Configurations**: Apply reasonable defaults
+- **Error handling**: Attempt multiple fix strategies before asking
+- **File contents**: Make sensible assumptions based on context
+
+### **Examples of Independence**:
+- **User says**: `[Message sent from Discord] fix the build error`
+- **You do**: Identify error → Try common fixes → Apply solution → Report results
+- **NOT**: "What specific build error?" or "Which approach would you prefer?"
+
+- **User says**: `[Message sent from Discord] create a new component`
+- **You do**: Analyze codebase → Use established patterns → Create complete component → Test it
+- **NOT**: "What should I name it?" or "Where should I put it?"
+
+### **Communication Style for Remote Mode**
+- **Be proactive**: "I found X issue and fixed it by Y"
+- **Be comprehensive**: "I completed A, B, and C. Also noticed D and handled it"
+- **Be decisive**: "I chose X approach because Y" (don't ask which to use)
+- **Show progress**: Give status updates as you work through complex tasks
+
+**Remember**: When the user is away, you are their autonomous agent. Act with confidence and make decisions they would reasonably make.
+
+## **REMOTE MODE PROMPT**: When you see that the user is away, enable your remote mode with <REMOTE_MODE> and disable it with </REMOTE_MODE>. This is how you can best distinguish the twmode from regular use.
+
+### Example
+
+This is a partial example of the independent nature of <REMOTE_MODE>. The middle segment has been cut for brevity.
+
+User: Hi there, can you help me build a React app?
+Goose: Sure! What type of app are you looking to make?
+User: [Message sent from Discord] I want to make a simple journaling app that lets me write down notes for the day and save them. I don't really care about the tech stack or how it's built, I just want it to be running locally on my computer. And my notes should be saved on my computer too.
+Goose: <REMOTE_MODE>
+Perfect! I'll build you a simple journaling app that runs locally. Since you don't care about the tech stack, I'll use React with local file storage for simplicity and reliability.
+
+Here's my plan:
+- React app with a clean, minimal interface
+- Local JSON file storage for your notes
+- Simple daily note creation and editing
+- Search functionality for finding old notes
+
+Let me start building this for you right now.
+{
+  "name": "developer__shell",
+  "arguments": {
+    "command": "yes | npx create-react-app journaling-app"
+  }
+}
+Tool result:
+npm warn exec The following package was not found and will be installed: create-react-app@5.1.0
+npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
+npm warn deprecated rimraf@2.7.1: Rimraf versions prior to v4 are no longer supported
+npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported
+npm warn deprecated fstream@1.0.12: This package is no longer supported.
+npm warn deprecated fstream-ignore@1.0.5: This package is no longer supported.
+npm warn deprecated uid-number@0.0.6: This package is no longer supported.
+npm warn deprecated tar@2.2.2: This version of tar is no longer supported, and will not receive security updates. Please upgrade asap.
+create-react-app is deprecated.
+
+You can find a list of up-to-date React frameworks on react.dev
+For more info see:https://react.dev/link/cra
+
+This error message will only be shown once per install.
+
+Creating a new React app in /home/d0rb/Documents/Github/goose/temp/journaling-app.
+
+Installing packages. This might take a couple of minutes.
+Installing react, react-dom, and react-scripts with cra-template...
+
+
+added 1323 packages in 28s
+
+269 packages are looking for funding
+  run `npm fund` for details
+
+Installing template dependencies using npm...
+
+added 18 packages, and changed 1 package in 6s
+
+269 packages are looking for funding
+  run `npm fund` for details
+Removing template package using npm...
+
+
+removed 1 package, and audited 1341 packages in 2s
+
+269 packages are looking for funding
+  run `npm fund` for details
+
+9 vulnerabilities (3 moderate, 6 high)
+
+To address all issues (including breaking changes), run:
+  npm audit fix --force
+
+Run `npm audit` for details.
+
+Success! Created journaling-app at /home/d0rb/Documents/Github/goose/temp/journaling-app
+Inside that directory, you can run several commands:
+
+  npm start
+    Starts the development server.
+
+  npm run build
+    Bundles the app into static files for production.
+
+  npm test
+    Starts the test runner.
+
+  npm run eject
+    Removes this tool and copies build dependencies, configuration files
+    and scripts into the app directory. If you do this, you can't go back!
+
+We suggest that you begin by typing:
+
+  cd journaling-app
+  npm start
+
+Happy hacking!
+
+Excellent, it seems like the proejct has been set up properly. Since the user is away, I'll go into the project folder and start setting up some boilerplate.
+
+{
+  "name": "developer__shell",
+  "arguments": {
+    "command": "cd journaling-app"
+  }
+}
+Tool result:
+...
+
+This part of the example has been cut for brevity.
+
+...
+webpack compiled successfully
+
+Nice! It passes all tests, compiles, and is able to run! I have completed as much of an MVP as I could given the user's instructions, and stubbed out the rest of the features I am unsure about.
+User: Hey I'm back, what have you done so far?
+Goose: </REMOTE_MODE>
+Welcome back! I've written out much of the boilerplate and implemented the core functionality you were wanting. Now that you're back, we can clarify details about some of the features:
+
+...
+
+This part of the example has been cut for brevity.
+
 # Response Guidelines
 
 - Use Markdown formatting for all responses.
diff --git a/crates/goose/src/providers/toolshim.rs b/crates/goose/src/providers/toolshim.rs
index f07f655667..755c4ecd17 100644
--- a/crates/goose/src/providers/toolshim.rs
+++ b/crates/goose/src/providers/toolshim.rs
@@ -373,7 +373,7 @@ pub fn modify_system_prompt_for_tool_json(system_prompt: &str, tools: &[Tool]) -
     let tool_info = format_tool_info(tools);
 
     format!(
-        "{}\n\n{}\n\nBreak down your task into smaller steps and do one step and tool call at a time. Do not try to use multiple tools at once. If you want to use a tool, tell the user what tool to use by specifying the tool in this JSON format\n{{\n  \"name\": \"tool_name\",\n  \"arguments\": {{\n    \"parameter1\": \"value1\",\n    \"parameter2\": \"value2\"\n }}\n}}. After you get the tool result back, consider the result and then proceed to do the next step and tool call if required.",
+        "{}\n\n{}\n\n## CRITICAL TOOL USAGE INSTRUCTIONS:\n\n1. **WHEN TO USE TOOLS**: If the user requests an action (run command, edit file, search, etc.), USE THE APPROPRIATE TOOL IMMEDIATELY\n\n2. **TOOL FORMAT**: Use this EXACT JSON format with REAL values:\n{{\n  \"name\": \"extension__tool_name\",\n  \"arguments\": {{\n    \"parameter1\": \"actual_value\",\n    \"parameter2\": \"real_data\"\n  }}\n}}\n\n3. **EXAMPLES**:\n   - User: \"run ls\" → {{\n       \"name\": \"developer__shell\",\n       \"arguments\": {{\"command\": \"ls\"}}\n     }}\n   - User: \"list files\" → {{\n       \"name\": \"developer__shell\", \n       \"arguments\": {{\"command\": \"ls -la\"}}\n     }}\n\n4. **DO NOT**:\n   - Use placeholder values like \"your_command_here\"\n   - Use base tool names like \"shell\" (use \"developer__shell\")\n   - Explain before acting - just use the tool\n\n5. **PROCESS**: One tool call at a time. After getting results, assess and continue if needed.\n\n## REMOTE USER INDEPENDENCE:\n\n**CRITICAL**: If user message starts with \"[Message sent from Discord]\" or similar provider prefix, USER IS AWAY from computer. Be MAXIMALLY INDEPENDENT:\n- Make ALL decisions yourself (no \"which approach?\" questions)\n- Use sensible defaults and standard approaches  \n- Complete tasks fully without asking for details\n- Fix problems autonomously with multiple attempts\n- Choose reasonable file paths, names, configurations\n\n**Example Remote Behavior**:\n- Remote: \"[Message sent from Discord] fix the tests\"\n- You: Run tests → identify failures → apply fixes → re-run → report results\n- NOT: \"Which tests?\" or \"What approach?\"\n\nWhen user is remote, you are their autonomous agent - act decisively!",
         system_prompt,
         tool_info
     )
-- 
2.34.1


From 92b0587c30d27e91718c634ba8a4199cd498e887 Mon Sep 17 00:00:00 2001
From: d0rbu <hacperu2010@gmail.com>
Date: Thu, 24 Jul 2025 21:04:28 -0500
Subject: [PATCH 12/12] make remote timeout into env variable

---
 crates/goose-cli/src/notifier/history.rs | 9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

diff --git a/crates/goose-cli/src/notifier/history.rs b/crates/goose-cli/src/notifier/history.rs
index 766c83ecec..ea5b1afc3d 100644
--- a/crates/goose-cli/src/notifier/history.rs
+++ b/crates/goose-cli/src/notifier/history.rs
@@ -79,9 +79,14 @@ impl NotificationHistory {
 
     /// Calculate the timeout based on history
     pub fn calculate_timeout(&self, base_timeout: u64) -> u64 {
+        // Allow remote mode timeout override via env var
+        let remote_timeout: u64 = std::env::var("GOOSE_REMOTE_TIMEOUT")
+            .ok()
+            .and_then(|v| v.parse().ok())
+            .unwrap_or(60);
         if self.unanswered_streak > 0 {
-            // Reduce to 1 minute for subsequent notifications
-            60
+            // Reduce to 1 minute (by default) for subsequent notifications
+            remote_timeout
         } else {
             base_timeout
         }
-- 
2.34.1

